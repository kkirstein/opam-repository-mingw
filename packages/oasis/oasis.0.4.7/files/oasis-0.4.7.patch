--- ./myocamlbuild.ml
+++ ./myocamlbuild.ml
@@ -107,21 +107,14 @@
 ;;
 
 (* OASIS_START *)
-(* DO NOT EDIT (digest: 06d487173f015b9b206716cd7267e817) *)
+(* DO NOT EDIT (digest: 754a4c54736fb41903367f81ed4f296e) *)
 module OASISGettext = struct
 # 22 "src/oasis/OASISGettext.ml"
 
 
-  let ns_ str =
-    str
-
-
-  let s_ str =
-    str
-
-
-  let f_ (str: ('a, 'b, 'c, 'd) format4) =
-    str
+  let ns_ str = str
+  let s_ str = str
+  let f_ (str: ('a, 'b, 'c, 'd) format4) = str
 
 
   let fn_ fmt1 fmt2 n =
@@ -131,10 +124,7 @@
       fmt2^^""
 
 
-  let init =
-    []
-
-
+  let init = []
 end
 
 module OASISString = struct
@@ -295,21 +285,205 @@
     else
       s
 
-end
+  let exists f str =
+    let rec iter i =
+      if i < 0 then
+        false
+      else if f str.[i] then
+        true
+      else
+        iter (pred i)
+    in
+      iter (String.length str - 1)
 
-module OASISExpr = struct
-# 22 "src/oasis/OASISExpr.ml"
+  let is_digit c =
+    '0' <= c && c <= '9'
 
+  let is_alpha c =
+    ('a' <= c && c <= 'z') || ('A' <= c && c <= 'Z')
+
+  let is_whitespace =
+    function
+      | ' ' | '\r' | '\n' | '\t' -> true
+      |  _  -> false
 
+end
 
+module OASISUtils = struct
+# 22 "src/oasis/OASISUtils.ml"
 
 
   open OASISGettext
 
 
-  type test = string
+  module MapExt =
+  struct
+    module type S =
+    sig
+      include Map.S
+      val add_list: 'a t -> (key * 'a) list -> 'a t
+      val of_list: (key * 'a) list -> 'a t
+      val to_list: 'a t -> (key * 'a) list
+    end
+
+    module Make (Ord: Map.OrderedType) =
+    struct
+      include Map.Make(Ord)
+
+      let rec add_list t =
+        function
+          | (k, v) :: tl -> add_list (add k v t) tl
+          | [] -> t
+
+      let of_list lst = add_list empty lst
+
+      let to_list t = fold (fun k v acc -> (k, v) :: acc) t []
+    end
+  end
+
 
+  module MapString = MapExt.Make(String)
 
+
+  module SetExt  =
+  struct
+    module type S =
+    sig
+      include Set.S
+      val add_list: t -> elt list -> t
+      val of_list: elt list -> t
+      val to_list: t -> elt list
+    end
+
+    module Make (Ord: Set.OrderedType) =
+    struct
+      include Set.Make(Ord)
+
+      let rec add_list t =
+        function
+          | e :: tl -> add_list (add e t) tl
+          | [] -> t
+
+      let of_list lst = add_list empty lst
+
+      let to_list = elements
+    end
+  end
+
+
+  module SetString = SetExt.Make(String)
+
+
+  let compare_csl s1 s2 =
+    String.compare (OASISString.lowercase_ascii s1) (OASISString.lowercase_ascii s2)
+
+
+  module HashStringCsl =
+    Hashtbl.Make
+      (struct
+         type t = string
+         let equal s1 s2 = (compare_csl s1 s2) = 0
+         let hash s = Hashtbl.hash (OASISString.lowercase_ascii s)
+       end)
+
+  module SetStringCsl =
+    SetExt.Make
+      (struct
+         type t = string
+         let compare = compare_csl
+       end)
+
+
+  let varname_of_string ?(hyphen='_') s =
+    if String.length s = 0 then
+      begin
+        invalid_arg "varname_of_string"
+      end
+    else
+      begin
+        let buf =
+          OASISString.replace_chars
+            (fun c ->
+               if ('a' <= c && c <= 'z')
+                 ||
+                  ('A' <= c && c <= 'Z')
+                 ||
+                  ('0' <= c && c <= '9') then
+                 c
+               else
+                 hyphen)
+            s;
+        in
+        let buf =
+          (* Start with a _ if digit *)
+          if '0' <= s.[0] && s.[0] <= '9' then
+            "_"^buf
+          else
+            buf
+        in
+          OASISString.lowercase_ascii buf
+      end
+
+
+  let varname_concat ?(hyphen='_') p s =
+    let what = String.make 1 hyphen in
+    let p =
+      try
+        OASISString.strip_ends_with ~what p
+      with Not_found ->
+        p
+    in
+    let s =
+      try
+        OASISString.strip_starts_with ~what s
+      with Not_found ->
+        s
+    in
+      p^what^s
+
+
+  let is_varname str =
+    str = varname_of_string str
+
+
+  let failwithf fmt = Printf.ksprintf failwith fmt
+
+
+  let rec file_location ?pos1 ?pos2 ?lexbuf () =
+      match pos1, pos2, lexbuf with
+      | Some p, None, _ | None, Some p, _ ->
+        file_location ~pos1:p ~pos2:p ?lexbuf ()
+      | Some p1, Some p2, _ ->
+        let open Lexing in
+        let fn, lineno = p1.pos_fname, p1.pos_lnum in
+        let c1 = p1.pos_cnum - p1.pos_bol in
+        let c2 = c1 + (p2.pos_cnum - p1.pos_cnum) in
+        Printf.sprintf (f_ "file %S, line %d, characters %d-%d")  fn lineno c1 c2
+      | _, _, Some lexbuf ->
+        file_location
+          ~pos1:(Lexing.lexeme_start_p lexbuf)
+          ~pos2:(Lexing.lexeme_end_p lexbuf)
+          ()
+      | None, None, None ->
+        s_ "<position undefined>"
+
+
+  let failwithpf ?pos1 ?pos2 ?lexbuf fmt =
+    let loc = file_location ?pos1 ?pos2 ?lexbuf () in
+    Printf.ksprintf (fun s -> failwith (Printf.sprintf "%s: %s" loc s)) fmt
+
+
+end
+
+module OASISExpr = struct
+# 22 "src/oasis/OASISExpr.ml"
+
+
+  open OASISGettext
+  open OASISUtils
+
+
+  type test = string
   type flag = string
 
 
@@ -397,7 +571,7 @@
 end
 
 
-# 292 "myocamlbuild.ml"
+# 465 "myocamlbuild.ml"
 module BaseEnvLight = struct
 # 22 "src/base/BaseEnvLight.ml"
 
@@ -408,24 +582,12 @@
   type t = string MapString.t
 
 
-  let default_filename =
-    Filename.concat
-      (Sys.getcwd ())
-      "setup.data"
+  let default_filename = Filename.concat (Sys.getcwd ()) "setup.data"
 
 
-  let load ?(allow_empty=false) ?(filename=default_filename) () =
-    if Sys.file_exists filename then
-      begin
-        let chn =
-          open_in_bin filename
-        in
-        let st =
-          Stream.of_channel chn
-        in
-        let line =
-          ref 1
-        in
+  let load ?(allow_empty=false) ?(filename=default_filename) ?stream () =
+    let line = ref 1 in
+    let lexer st =
         let st_line =
           Stream.from
             (fun _ ->
@@ -435,36 +597,32 @@
                    | c -> Some c
                with Stream.Failure -> None)
         in
-        let lexer =
           Genlex.make_lexer ["="] st_line
         in
-        let rec read_file mp =
-          match Stream.npeek 3 lexer with
+    let rec read_file lxr mp =
+      match Stream.npeek 3 lxr with
             | [Genlex.Ident nm; Genlex.Kwd "="; Genlex.String value] ->
-                Stream.junk lexer;
-                Stream.junk lexer;
-                Stream.junk lexer;
-                read_file (MapString.add nm value mp)
-            | [] ->
-                mp
+        Stream.junk lxr; Stream.junk lxr; Stream.junk lxr;
+        read_file lxr (MapString.add nm value mp)
+      | [] -> mp
             | _ ->
                 failwith
-                  (Printf.sprintf
-                     "Malformed data file '%s' line %d"
-                     filename !line)
-        in
-        let mp =
-          read_file MapString.empty
+          (Printf.sprintf "Malformed data file '%s' line %d" filename !line)
         in
-          close_in chn;
-          mp
-      end
-    else if allow_empty then
-      begin
+    match stream with
+    | Some st -> read_file (lexer st) MapString.empty
+    | None ->
+      if Sys.file_exists filename then begin
+        let chn = open_in_bin filename in
+        let st = Stream.of_channel chn in
+        try
+          let mp = read_file (lexer st) MapString.empty in
+          close_in chn; mp
+        with e ->
+          close_in chn; raise e
+      end else if allow_empty then begin
         MapString.empty
-      end
-    else
-      begin
+      end else begin
         failwith
           (Printf.sprintf
              "Unable to load environment, the file '%s' doesn't exist."
@@ -471,11 +629,8 @@
              filename)
       end
 
-
   let rec var_expand str env =
-    let buff =
-      Buffer.create ((String.length str) * 2)
-    in
+    let buff = Buffer.create ((String.length str) * 2) in
       Buffer.add_substitute
         buff
         (fun var ->
@@ -491,49 +646,39 @@
       Buffer.contents buff
 
 
-  let var_get name env =
-    var_expand (MapString.find name env) env
-
-
-  let var_choose lst env =
-    OASISExpr.choose
-      (fun nm -> var_get nm env)
-      lst
+  let var_get name env = var_expand (MapString.find name env) env
+  let var_choose lst env = OASISExpr.choose (fun nm -> var_get nm env) lst
 end
 
 
-# 397 "myocamlbuild.ml"
+# 545 "myocamlbuild.ml"
 module MyOCamlbuildFindlib = struct
 # 22 "src/plugins/ocamlbuild/MyOCamlbuildFindlib.ml"
 
 
   (** OCamlbuild extension, copied from
-    * http://brion.inria.fr/gallium/index.php/Using_ocamlfind_with_ocamlbuild
+    * https://ocaml.org/learn/tutorials/ocamlbuild/Using_ocamlfind_with_ocamlbuild.html
     * by N. Pouillard and others
     *
-    * Updated on 2009/02/28
+    * Updated on 2016-06-02
     *
     * Modified by Sylvain Le Gall
     *)
   open Ocamlbuild_plugin
 
-  type conf =
-    { no_automatic_syntax: bool;
-    }
 
-  (* these functions are not really officially exported *)
-  let run_and_read =
-    Ocamlbuild_pack.My_unix.run_and_read
+  type conf = {no_automatic_syntax: bool}
 
 
-  let blank_sep_strings =
-    Ocamlbuild_pack.Lexers.blank_sep_strings
+  let run_and_read = Ocamlbuild_pack.My_unix.run_and_read
+
+
+  let blank_sep_strings = Ocamlbuild_pack.Lexers.blank_sep_strings
 
 
   let exec_from_conf exec =
     let exec =
-      let env_filename = Pathname.basename BaseEnvLight.default_filename in
-      let env = BaseEnvLight.load ~filename:env_filename ~allow_empty:true () in
+      let env = BaseEnvLight.load ~allow_empty:true () in
       try
         BaseEnvLight.var_get exec env
       with Not_found ->
@@ -582,7 +727,9 @@
     with Not_found -> s
 
   (* ocamlfind command *)
-  let ocamlfind x = S[Sh (exec_from_conf "ocamlfind"); x]
+  let ocamlfind x = S[Sh (
+    Ocamlbuild_pack.Shell.quote_filename_if_needed
+      (exec_from_conf "ocamlfind") ); x]
 
   (* This lists all supported packages. *)
   let find_packages () =
@@ -624,11 +771,13 @@
 
       | After_rules ->
 
+        (* Avoid warnings for unused tag *)
+        flag ["tests"] N;
+
           (* When one link an OCaml library/binary/package, one should use
            * -linkpkg *)
           flag ["ocaml"; "link"; "program"] & A"-linkpkg";
 
-          if not (conf.no_automatic_syntax) then begin
             (* For each ocamlfind package one inject the -package option when
              * compiling, computing dependencies, generating documentation and
              * linking. *)
@@ -641,8 +790,9 @@
                   (* Heuristic to identify syntax extensions: whether they end in
                      ".syntax"; some might not.
                   *)
-                  if Filename.check_suffix pkg "syntax" ||
-                     List.mem pkg well_known_syntax then
+              if not (conf.no_automatic_syntax) &&
+                 (Filename.check_suffix pkg "syntax" ||
+                  List.mem pkg well_known_syntax) then
                     (syn_args @ base_args, syn_args)
                   else
                     (base_args, [])
@@ -660,7 +810,6 @@
                 flag ["ocaml"; "infer_interface"; "package("^pkg^")"] & S pargs;
               end
               (find_packages ());
-          end;
 
           (* Like -package but for extensions syntax. Morover -syntax is useless
            * when linking. *)
@@ -684,10 +833,12 @@
           flag ["ocaml"; "pkg_threads"; "doc"] (S[A "-I"; A "+threads"]);
           flag ["ocaml"; "pkg_threads"; "link"] (S[A "-thread"]);
           flag ["ocaml"; "pkg_threads"; "infer_interface"] (S[A "-thread"]);
+        flag ["c"; "pkg_threads"; "compile"] (S[A "-thread"]);
           flag ["ocaml"; "package(threads)"; "compile"] (S[A "-thread"]);
           flag ["ocaml"; "package(threads)"; "doc"] (S[A "-I"; A "+threads"]);
           flag ["ocaml"; "package(threads)"; "link"] (S[A "-thread"]);
           flag ["ocaml"; "package(threads)"; "infer_interface"] (S[A "-thread"]);
+        flag ["c"; "package(threads)"; "compile"] (S[A "-thread"]);
 
       | _ ->
           ()
@@ -715,9 +866,6 @@
   type tag = string
 
 
-# 62 "src/plugins/ocamlbuild/MyOCamlbuildBase.ml"
-
-
   type t =
       {
         lib_ocaml: (name * dir list * string list) list;
@@ -730,9 +878,7 @@
       }
 
 
-  let env_filename =
-    Pathname.basename
-      BaseEnvLight.default_filename
+# 110 "src/plugins/ocamlbuild/MyOCamlbuildBase.ml"
 
 
   let dispatch_combine lst =
@@ -751,12 +897,7 @@
 
 
   let dispatch t e =
-    let env =
-      BaseEnvLight.load
-        ~filename:env_filename
-        ~allow_empty:true
-        ()
-    in
+    let env = BaseEnvLight.load ~allow_empty:true () in
       match e with
         | Before_options ->
             let no_trailing_dot s =
@@ -820,6 +961,7 @@
                    flag ["link"; "library"; "ocaml"; "native"; tag_libstubs lib]
                      (S[A"-cclib"; A("-l"^(nm_libstubs lib))]);
 
+                   if bool_of_string (BaseEnvLight.var_get "native_dynlink" env) then
                    flag ["link"; "program"; "ocaml"; "byte"; tag_libstubs lib]
                      (S[A"-dllib"; A("dll"^(nm_libstubs lib))]);
 
@@ -871,7 +1013,7 @@
 end
 
 
-# 766 "myocamlbuild.ml"
+# 905 "myocamlbuild.ml"
 open Ocamlbuild_plugin;;
 let package_default =
   {
@@ -1113,7 +1255,7 @@
 
 let dispatch_default = MyOCamlbuildBase.dispatch_default conf package_default;;
 
-# 1009 "myocamlbuild.ml"
+# 1148 "myocamlbuild.ml"
 (* OASIS_STOP *)
 
 open Ocamlbuild_plugin;;
--- ./setup.ml
+++ ./setup.ml
@@ -21,9 +21,9 @@
 (******************************************************************************)
 
 (* OASIS_START *)
-(* DO NOT EDIT (digest: a9f7536ee10d3212f851a114a6f4734d) *)
+(* DO NOT EDIT (digest: a0c2cd234dbbe42b869bfa26f6726c36) *)
 (*
-   Regenerated by OASIS v0.4.6
+   Regenerated by OASIS v0.4.7
    Visit http://oasis.forge.ocamlcore.org for more information and
    documentation about functions used in this file.
 *)
@@ -31,16 +31,9 @@
 # 22 "src/oasis/OASISGettext.ml"
 
 
-  let ns_ str =
-    str
-
-
-  let s_ str =
-    str
-
-
-  let f_ (str: ('a, 'b, 'c, 'd) format4) =
-    str
+  let ns_ str = str
+  let s_ str = str
+  let f_ (str: ('a, 'b, 'c, 'd) format4) = str
 
 
   let fn_ fmt1 fmt2 n =
@@ -50,90 +43,7 @@
       fmt2^^""
 
 
-  let init =
-    []
-
-
-end
-
-module OASISContext = struct
-# 22 "src/oasis/OASISContext.ml"
-
-
-  open OASISGettext
-
-
-  type level =
-    [ `Debug
-    | `Info
-    | `Warning
-    | `Error]
-
-
-  type t =
-    {
-      (* TODO: replace this by a proplist. *)
-      quiet:                 bool;
-      info:                  bool;
-      debug:                 bool;
-      ignore_plugins:        bool;
-      ignore_unknown_fields: bool;
-      printf:                level -> string -> unit;
-    }
-
-
-  let printf lvl str =
-    let beg =
-      match lvl with
-        | `Error -> s_ "E: "
-        | `Warning -> s_ "W: "
-        | `Info  -> s_ "I: "
-        | `Debug -> s_ "D: "
-    in
-      prerr_endline (beg^str)
-
-
-  let default =
-    ref
-      {
-        quiet                 = false;
-        info                  = false;
-        debug                 = false;
-        ignore_plugins        = false;
-        ignore_unknown_fields = false;
-        printf                = printf;
-      }
-
-
-  let quiet =
-    {!default with quiet = true}
-
-
-  let fspecs () =
-    (* TODO: don't act on default. *)
-    let ignore_plugins = ref false in
-    ["-quiet",
-     Arg.Unit (fun () -> default := {!default with quiet = true}),
-     s_ " Run quietly";
-
-     "-info",
-     Arg.Unit (fun () -> default := {!default with info = true}),
-     s_ " Display information message";
-
-
-     "-debug",
-     Arg.Unit (fun () -> default := {!default with debug = true}),
-     s_ " Output debug message";
-
-     "-ignore-plugins",
-     Arg.Set ignore_plugins,
-     s_ " Ignore plugin's field.";
-
-     "-C",
-     (* TODO: remove this chdir. *)
-     Arg.String (fun str -> Sys.chdir str),
-     s_ "dir Change directory before running."],
-    fun () -> {!default with ignore_plugins = !ignore_plugins}
+  let init = []
 end
 
 module OASISString = struct
@@ -294,6 +204,28 @@
     else
       s
 
+  let exists f str =
+    let rec iter i =
+      if i < 0 then
+        false
+      else if f str.[i] then
+        true
+      else
+        iter (pred i)
+    in
+      iter (String.length str - 1)
+
+  let is_digit c =
+    '0' <= c && c <= '9'
+
+  let is_alpha c =
+    ('a' <= c && c <= 'z') || ('A' <= c && c <= 'Z')
+
+  let is_whitespace =
+    function
+      | ' ' | '\r' | '\n' | '\t' -> true
+      |  _  -> false
+
 end
 
 module OASISUtils = struct
@@ -436,153 +368,664 @@
   let failwithf fmt = Printf.ksprintf failwith fmt
 
 
-end
-
-module PropList = struct
-# 22 "src/oasis/PropList.ml"
-
+  let rec file_location ?pos1 ?pos2 ?lexbuf () =
+      match pos1, pos2, lexbuf with
+      | Some p, None, _ | None, Some p, _ ->
+        file_location ~pos1:p ~pos2:p ?lexbuf ()
+      | Some p1, Some p2, _ ->
+        let open Lexing in
+        let fn, lineno = p1.pos_fname, p1.pos_lnum in
+        let c1 = p1.pos_cnum - p1.pos_bol in
+        let c2 = c1 + (p2.pos_cnum - p1.pos_cnum) in
+        Printf.sprintf (f_ "file %S, line %d, characters %d-%d")  fn lineno c1 c2
+      | _, _, Some lexbuf ->
+        file_location
+          ~pos1:(Lexing.lexeme_start_p lexbuf)
+          ~pos2:(Lexing.lexeme_end_p lexbuf)
+          ()
+      | None, None, None ->
+        s_ "<position undefined>"
 
-  open OASISGettext
 
+  let failwithpf ?pos1 ?pos2 ?lexbuf fmt =
+    let loc = file_location ?pos1 ?pos2 ?lexbuf () in
+    Printf.ksprintf (fun s -> failwith (Printf.sprintf "%s: %s" loc s)) fmt
 
-  type name = string
 
+end
 
-  exception Not_set of name * string option
-  exception No_printer of name
-  exception Unknown_field of name * name
+module OASISUnixPath = struct
+# 22 "src/oasis/OASISUnixPath.ml"
 
 
-  let () =
-    Printexc.register_printer
-      (function
-         | Not_set (nm, Some rsn) ->
-             Some
-               (Printf.sprintf (f_ "Field '%s' is not set: %s") nm rsn)
-         | Not_set (nm, None) ->
-             Some
-               (Printf.sprintf (f_ "Field '%s' is not set") nm)
-         | No_printer nm ->
-             Some
-               (Printf.sprintf (f_ "No default printer for value %s") nm)
-         | Unknown_field (nm, schm) ->
-             Some
-               (Printf.sprintf
-                  (f_ "Field %s is not defined in schema %s") nm schm)
-         | _ ->
-             None)
+  type unix_filename = string
+  type unix_dirname = string
 
 
-  module Data =
-  struct
-    type t =
-        (name, unit -> unit) Hashtbl.t
+  type host_filename = string
+  type host_dirname = string
 
-    let create () =
-      Hashtbl.create 13
 
-    let clear t =
-      Hashtbl.clear t
+  let current_dir_name = "."
 
 
-# 78 "src/oasis/PropList.ml"
-  end
+  let parent_dir_name = ".."
 
 
-  module Schema =
-  struct
-    type ('ctxt, 'extra) value =
-        {
-          get:   Data.t -> string;
-          set:   Data.t -> ?context:'ctxt -> string -> unit;
-          help:  (unit -> string) option;
-          extra: 'extra;
-        }
+  let is_current_dir fn =
+    fn = current_dir_name || fn = ""
 
-    type ('ctxt, 'extra) t =
-        {
-          name:      name;
-          fields:    (name, ('ctxt, 'extra) value) Hashtbl.t;
-          order:     name Queue.t;
-          name_norm: string -> string;
-        }
 
-    let create ?(case_insensitive=false) nm =
-      {
-        name      = nm;
-        fields    = Hashtbl.create 13;
-        order     = Queue.create ();
-        name_norm =
-          (if case_insensitive then
-             OASISString.lowercase_ascii
+  let concat f1 f2 =
+    if is_current_dir f1 then
+      f2
            else
-             fun s -> s);
-      }
-
-    let add t nm set get extra help =
-      let key =
-        t.name_norm nm
+      let f1' =
+        try OASISString.strip_ends_with ~what:"/" f1 with Not_found -> f1
       in
+      f1'^"/"^f2
 
-        if Hashtbl.mem t.fields key then
-          failwith
-            (Printf.sprintf
-               (f_ "Field '%s' is already defined in schema '%s'")
-               nm t.name);
-        Hashtbl.add
-          t.fields
-          key
-          {
-            set   = set;
-            get   = get;
-            help  = help;
-            extra = extra;
-          };
-        Queue.add nm t.order
 
-    let mem t nm =
-      Hashtbl.mem t.fields nm
+  let make =
+    function
+      | hd :: tl ->
+        List.fold_left
+          (fun f p -> concat f p)
+          hd
+          tl
+      | [] ->
+        invalid_arg "OASISUnixPath.make"
 
-    let find t nm =
+
+  let dirname f =
       try
-        Hashtbl.find t.fields (t.name_norm nm)
+      String.sub f 0 (String.rindex f '/')
       with Not_found ->
-        raise (Unknown_field (nm, t.name))
-
-    let get t data nm =
-      (find t nm).get data
+      current_dir_name
 
-    let set t data nm ?context x =
-      (find t nm).set
-        data
-        ?context
-        x
 
-    let fold f acc t =
-      Queue.fold
-        (fun acc k ->
-           let v =
-             find t k
+  let basename f =
+    try
+      let pos_start =
+        (String.rindex f '/') + 1
            in
-             f acc k v.extra v.help)
-        acc
-        t.order
-
-    let iter f t =
-      fold
-        (fun () -> f)
-        ()
-        t
-
-    let name t =
-      t.name
-  end
+      String.sub f pos_start ((String.length f) - pos_start)
+    with Not_found ->
+      f
 
 
-  module Field =
-  struct
-    type ('ctxt, 'value, 'extra) t =
-        {
+  let chop_extension f =
+    try
+      let last_dot =
+        String.rindex f '.'
+      in
+      let sub =
+        String.sub f 0 last_dot
+      in
+      try
+        let last_slash =
+          String.rindex f '/'
+        in
+        if last_slash < last_dot then
+          sub
+        else
+          f
+      with Not_found ->
+        sub
+
+    with Not_found ->
+      f
+
+
+  let capitalize_file f =
+    let dir = dirname f in
+    let base = basename f in
+    concat dir (OASISString.capitalize_ascii base)
+
+
+  let uncapitalize_file f =
+    let dir = dirname f in
+    let base = basename f in
+    concat dir (OASISString.uncapitalize_ascii base)
+
+
+end
+
+module OASISHostPath = struct
+# 22 "src/oasis/OASISHostPath.ml"
+
+
+  open Filename
+  open OASISGettext
+
+
+  module Unix = OASISUnixPath
+
+  let bash_cmd = ref ( fun () -> "" )
+
+  let use_bash () = ( !bash_cmd () ) <> ""
+
+
+  (* generic quote and unixquote are taken from ocaml source *)
+  let generic_quote quotequote s =
+    let l = String.length s in
+    let b = Buffer.create (l + 20) in
+      Buffer.add_char b '\'';
+      for i = 0 to l - 1 do
+        if s.[i] = '\'' then
+          Buffer.add_string b quotequote
+        else
+          Buffer.add_char b  s.[i]
+      done;
+      Buffer.add_char b '\'';
+      Buffer.contents b
+
+  let unixquote = generic_quote "'\\''"
+
+  let win = Sys.os_type = "Win32"
+
+  let quote str =
+    if win && use_bash () then
+      unixquote str
+    else
+      quote str
+
+  (* uniform_path (only called, if Sys.os_type = "Win32")
+   * - enforces uniform path seperators
+   * - strips trailing slashes (exceptions in case of C:\ and / )
+   * - removes (some) unnecessary file components like ./././
+   *)
+
+  let get_naccu accu str first pos =
+    (* I assume c//d is identic to c/d
+     * the only exception (Network devices \\xyz\asdf)
+     * is covered in uniform_path
+     *)
+    if first = pos then
+      accu
+    else
+      let nlen = pos - first in
+      let nstr = String.sub str first nlen in
+        (* test/././ is the same as test *)
+        if nlen = 1 && nstr = "." then
+          accu
+        (* a/b/../ is the same as a *)
+        else if nlen = 2 && nstr = ".." then
+          match accu with
+            | []      -> [ nstr ]
+            | ".."::_ -> nstr::accu
+            | hd::tl  -> tl
+        else
+          nstr::accu
+
+  let is_path_sep = function
+    | '\\' | '/' -> true
+    | _ -> false
+
+
+  let uniform_path path_sep = function
+    | "" -> "" (* Raise an exception? Or an possible intermediate result?
+               * Filename.basename and dirname also don't raise exceptions *)
+    | str ->
+        let rec iter accu str len first pos =
+          if pos >= len then
+            List.rev (get_naccu accu str first pos)
+          else
+            let next = succ pos in
+              match is_path_sep str.[pos] with
+                | true -> iter (get_naccu accu str first pos) str len next next
+                | false -> iter accu str len first next
+        in
+          let is_unix_root = is_path_sep str.[0] in
+          let len = String.length str in
+          let next_sep = len > 1 && is_path_sep str.[1] in
+          let is_network_root = is_unix_root && next_sep in
+          let is_currel = str.[0] = '.' && ( next_sep || len = 1 ) in
+          let l = iter [] str len 0 0 in
+          (* Trailing slashes are normally stripped.
+           * This is not possible in case of root folders
+           * Sys.file_exists "C:" is false, Sys.file_exists "C:\\" true
+           *)
+          let l_min =
+            match l with
+              | [] -> [ "" ]
+              | _ -> l
+          in
+          let l =
+            if is_network_root then
+              ""::""::l_min
+            else if is_unix_root then
+              ""::l_min
+            else if is_currel then
+              "."::l
+            else
+              match l with
+                | s :: [] ->
+                    (* root folders like C:\ *)
+                    if String.length s = 2 && s.[1] = ':' &&
+                      len > 2 && is_path_sep str.[2]
+                    then
+                      s :: [ "" ]
+                    else
+                      l
+                | _ -> l
+          in
+            String.concat path_sep l
+
+
+
+  let make =
+    function
+      | [] ->
+        invalid_arg "OASISHostPath.make"
+      | hd :: tl ->
+        List.fold_left Filename.concat hd tl
+
+
+  let of_unix ufn =
+    match Sys.os_type with
+    | "Unix" | "Cygwin" -> ufn
+    | "Win32" ->
+      let path_sep =
+        if use_bash () then
+          "/"
+              else
+          "\\"
+      in
+      uniform_path path_sep ufn
+    | os_type ->
+      OASISUtils.failwithf
+        (f_ "Don't know the path format of os_type %S when translating unix \
+             filename. %S")
+        os_type ufn
+
+  (* see findlib's src/findlib/frontend.ml for details *)
+  let ocamlfind_unquote dir =
+    match Sys.os_type with
+    | "Cygwin"
+    | "Win32" ->
+      let len = String.length dir in
+      if len < 3 || dir.[0] <> '"' || dir.[len - 1] <> '"' ||
+         String.contains dir ' ' = false then
+        dir
+      else
+        String.sub dir 1 (len - 2)
+    | _ -> dir
+
+end
+
+module OASISFileSystem = struct
+# 22 "src/oasis/OASISFileSystem.ml"
+
+  (** File System functions
+
+      @author Sylvain Le Gall
+  *)
+
+  type 'a filename = string
+
+  class type closer =
+    object
+      method close: unit
+    end
+
+  class type reader =
+    object
+      inherit closer
+      method input: Buffer.t -> int -> unit
+    end
+
+  class type writer =
+    object
+      inherit closer
+      method output: Buffer.t -> unit
+    end
+
+  class type ['a] fs =
+    object
+      method string_of_filename: 'a filename -> string
+      method open_out: ?mode:(open_flag list) -> ?perm:int -> 'a filename -> writer
+      method open_in: ?mode:(open_flag list) -> ?perm:int -> 'a filename -> reader
+      method file_exists: 'a filename -> bool
+      method remove: 'a filename -> unit
+    end
+
+
+  module Mode =
+  struct
+    let default_in = [Open_rdonly]
+    let default_out = [Open_wronly; Open_creat; Open_trunc]
+
+    let text_in = Open_text :: default_in
+    let text_out = Open_text :: default_out
+
+    let binary_in = Open_binary :: default_in
+    let binary_out = Open_binary :: default_out
+  end
+
+  let std_length = 4096 (* Standard buffer/read length. *)
+  let binary_out = Mode.binary_out
+  let binary_in = Mode.binary_in
+
+  let of_unix_filename ufn = (ufn: 'a filename)
+  let to_unix_filename fn = (fn: string)
+
+
+  let defer_close o f =
+    try
+      let r = f o in o#close; r
+    with e ->
+      o#close; raise e
+
+
+  let stream_of_reader rdr =
+    let buf = Buffer.create std_length in
+    let pos = ref 0 in
+    let eof = ref false in
+    let rec next idx =
+      let bpos = idx - !pos in
+      if !eof then begin
+        None
+      end else if bpos < Buffer.length buf then begin
+        Some (Buffer.nth buf bpos)
+      end else begin
+        pos := !pos + Buffer.length buf;
+        Buffer.clear buf;
+        begin
+          try
+            rdr#input buf std_length;
+          with End_of_file ->
+            if Buffer.length buf = 0 then
+              eof := true
+        end;
+        next idx
+      end
+    in
+    Stream.from next
+
+
+  let read_all buf rdr =
+    try
+      while true do
+        rdr#input buf std_length
+      done
+    with End_of_file ->
+      ()
+
+  class ['a] host_fs rootdir : ['a] fs =
+    object (self)
+      method private host_filename fn = Filename.concat rootdir fn
+      method string_of_filename = self#host_filename
+
+      method open_out ?(mode=Mode.text_out)  ?(perm=0o666) fn =
+        let chn = open_out_gen mode perm (self#host_filename fn) in
+        object
+          method close = close_out chn
+          method output buf = Buffer.output_buffer chn buf
+        end
+
+      method open_in ?(mode=Mode.text_in) ?(perm=0o666) fn =
+        (* TODO: use Buffer.add_channel when minimal version of OCaml will
+         * be >= 4.03.0 (previous version was discarding last chars).
+         *)
+        let chn = open_in_gen mode perm (self#host_filename fn) in
+        let strm = Stream.of_channel chn in
+        object
+          method close = close_in chn
+          method input buf len =
+            let read = ref 0 in
+            try
+              for _i = 0 to len do
+                Buffer.add_char buf (Stream.next strm);
+                incr read
+              done
+            with Stream.Failure ->
+              if !read = 0 then
+                raise End_of_file
+        end
+
+      method file_exists fn = Sys.file_exists (self#host_filename fn)
+      method remove fn = Sys.remove (self#host_filename fn)
+    end
+
+end
+
+module OASISContext = struct
+# 22 "src/oasis/OASISContext.ml"
+
+
+  open OASISGettext
+
+
+  type level =
+    [ `Debug
+    | `Info
+    | `Warning
+    | `Error]
+
+
+  type source
+  type source_filename = source OASISFileSystem.filename
+
+
+  let in_srcdir ufn = OASISFileSystem.of_unix_filename ufn
+
+
+  type t =
+    {
+      (* TODO: replace this by a proplist. *)
+      quiet:                 bool;
+      info:                  bool;
+      debug:                 bool;
+      ignore_plugins:        bool;
+      ignore_unknown_fields: bool;
+      printf:                level -> string -> unit;
+      srcfs:                 source OASISFileSystem.fs;
+    }
+
+
+  let printf lvl str =
+    let beg =
+      match lvl with
+        | `Error -> s_ "E: "
+        | `Warning -> s_ "W: "
+        | `Info  -> s_ "I: "
+        | `Debug -> s_ "D: "
+    in
+    prerr_endline (beg^str)
+
+
+  let default =
+    ref
+      {
+        quiet                 = false;
+        info                  = false;
+        debug                 = false;
+        ignore_plugins        = false;
+        ignore_unknown_fields = false;
+        printf                = printf;
+        srcfs                 = new OASISFileSystem.host_fs(Sys.getcwd ());
+      }
+
+
+  let quiet =
+    {!default with quiet = true}
+
+
+  let fspecs () =
+    (* TODO: don't act on default. *)
+    let ignore_plugins = ref false in
+    ["-quiet",
+     Arg.Unit (fun () -> default := {!default with quiet = true}),
+     s_ " Run quietly";
+
+     "-info",
+     Arg.Unit (fun () -> default := {!default with info = true}),
+     s_ " Display information message";
+
+
+     "-debug",
+     Arg.Unit (fun () -> default := {!default with debug = true}),
+     s_ " Output debug message";
+
+     "-ignore-plugins",
+     Arg.Set ignore_plugins,
+     s_ " Ignore plugin's field.";
+
+     "-C",
+     Arg.String
+       (fun str ->
+          Sys.chdir str;
+          default := {!default with srcfs = new OASISFileSystem.host_fs str}),
+     s_ "dir Change directory before running (affects setup.{data,log})."],
+    fun () -> {!default with ignore_plugins = !ignore_plugins}
+end
+
+module PropList = struct
+# 22 "src/oasis/PropList.ml"
+
+
+  open OASISGettext
+
+
+  type name = string
+
+
+  exception Not_set of name * string option
+  exception No_printer of name
+  exception Unknown_field of name * name
+
+
+  let () =
+    Printexc.register_printer
+      (function
+        | Not_set (nm, Some rsn) ->
+          Some
+            (Printf.sprintf (f_ "Field '%s' is not set: %s") nm rsn)
+        | Not_set (nm, None) ->
+          Some
+            (Printf.sprintf (f_ "Field '%s' is not set") nm)
+        | No_printer nm ->
+          Some
+            (Printf.sprintf (f_ "No default printer for value %s") nm)
+        | Unknown_field (nm, schm) ->
+          Some
+            (Printf.sprintf
+               (f_ "Field %s is not defined in schema %s") nm schm)
+        | _ ->
+          None)
+
+
+  module Data =
+  struct
+    type t =
+      (name, unit -> unit) Hashtbl.t
+
+    let create () =
+      Hashtbl.create 13
+
+    let clear t =
+      Hashtbl.clear t
+
+
+# 77 "src/oasis/PropList.ml"
+  end
+
+
+  module Schema =
+  struct
+    type ('ctxt, 'extra) value =
+      {
+        get:   Data.t -> string;
+        set:   Data.t -> ?context:'ctxt -> string -> unit;
+        help:  (unit -> string) option;
+        extra: 'extra;
+      }
+
+    type ('ctxt, 'extra) t =
+      {
+        name:      name;
+        fields:    (name, ('ctxt, 'extra) value) Hashtbl.t;
+        order:     name Queue.t;
+        name_norm: string -> string;
+      }
+
+    let create ?(case_insensitive=false) nm =
+      {
+        name      = nm;
+        fields    = Hashtbl.create 13;
+        order     = Queue.create ();
+        name_norm =
+          (if case_insensitive then
+             OASISString.lowercase_ascii
+           else
+             fun s -> s);
+      }
+
+    let add t nm set get extra help =
+      let key =
+        t.name_norm nm
+      in
+
+      if Hashtbl.mem t.fields key then
+        failwith
+          (Printf.sprintf
+             (f_ "Field '%s' is already defined in schema '%s'")
+             nm t.name);
+      Hashtbl.add
+        t.fields
+        key
+        {
+          set   = set;
+          get   = get;
+          help  = help;
+          extra = extra;
+        };
+      Queue.add nm t.order
+
+    let mem t nm =
+      Hashtbl.mem t.fields nm
+
+    let find t nm =
+      try
+        Hashtbl.find t.fields (t.name_norm nm)
+      with Not_found ->
+        raise (Unknown_field (nm, t.name))
+
+    let get t data nm =
+      (find t nm).get data
+
+    let set t data nm ?context x =
+      (find t nm).set
+        data
+        ?context
+        x
+
+    let fold f acc t =
+      Queue.fold
+        (fun acc k ->
+           let v =
+             find t k
+           in
+           f acc k v.extra v.help)
+        acc
+        t.order
+
+    let iter f t =
+      fold
+        (fun () -> f)
+        ()
+        t
+
+    let name t =
+      t.name
+  end
+
+
+  module Field =
+  struct
+    type ('ctxt, 'value, 'extra) t =
+      {
           set:    Data.t -> ?context:'ctxt -> 'value -> unit;
           get:    Data.t -> 'value;
           sets:   Data.t -> ?context:'ctxt -> string -> unit;
@@ -774,12 +1217,6 @@
   open OASISGettext
 
 
-
-
-
-  type s = string
-
-
   type t = string
 
 
@@ -793,20 +1230,10 @@
     | VAnd of comparator * comparator
 
 
-
   (* Range of allowed characters *)
-  let is_digit c =
-    '0' <= c && c <= '9'
-
-
-  let is_alpha c =
-    ('a' <= c && c <= 'z') || ('A' <= c && c <= 'Z')
-
-
-  let is_special =
-    function
-      | '.' | '+' | '-' | '~' -> true
-      | _ -> false
+  let is_digit = OASISString.is_digit
+  let is_alpha = OASISString.is_alpha
+  let is_special = function | '.' | '+' | '-' | '~' -> true | _ -> false
 
 
   let rec version_compare v1 v2 =
@@ -884,8 +1311,7 @@
             | n ->
                 n
       end
-    else
-      begin
+    else begin
         0
       end
 
@@ -896,10 +1322,6 @@
   let string_of_version t = t
 
 
-  let version_compare_string s1 s2 =
-    version_compare (version_of_string s1) (version_of_string s2)
-
-
   let chop t =
     try
       let pos =
@@ -960,18 +1382,6 @@
             (varname_of_comparator c1)^"_and_"^(varname_of_comparator c2)
 
 
-  let rec comparator_ge v' =
-    let cmp v = version_compare v v' >= 0 in
-    function
-      | VEqual v
-      | VGreaterEqual v
-      | VGreater v -> cmp v
-      | VLesserEqual _
-      | VLesser _ -> false
-      | VOr (c1, c2) -> comparator_ge v' c1 || comparator_ge v' c2
-      | VAnd (c1, c2) -> comparator_ge v' c1 && comparator_ge v' c2
-
-
 end
 
 module OASISLicense = struct
@@ -1026,10 +1436,8 @@
 # 22 "src/oasis/OASISExpr.ml"
 
 
-
-
-
   open OASISGettext
+  open OASISUtils
 
 
   type test = string
@@ -1136,20 +1544,148 @@
 
 end
 
-module OASISTypes = struct
-# 22 "src/oasis/OASISTypes.ml"
+module OASISSourcePatterns = struct
+# 22 "src/oasis/OASISSourcePatterns.ml"
+
+  open OASISUtils
+  open OASISGettext
+
+  module Templater =
+  struct
+    (* TODO: use this module in BaseEnv.var_expand and BaseFileAB, at least. *)
+    type t =
+      {
+        atoms: atom list;
+        origin: string
+      }
+    and atom =
+      | Text of string
+      | Expr of expr
+    and expr =
+      | Ident of string
+      | String of string
+      | Call of string * expr
 
 
+    type env =
+      {
+        variables: string MapString.t;
+        functions: (string -> string) MapString.t;
+      }
+
+
+    let eval env t =
+      let rec eval_expr env =
+        function
+        | String str -> str
+        | Ident nm ->
+          begin
+            try
+              MapString.find nm env.variables
+            with Not_found ->
+              (* TODO: add error location within the string. *)
+              failwithf
+                (f_ "Unable to find variable %S in source pattern %S")
+                nm t.origin
+          end
+
+        | Call (fn, expr) ->
+          begin
+            try
+              (MapString.find fn env.functions) (eval_expr env expr)
+            with Not_found ->
+              (* TODO: add error location within the string. *)
+              failwithf
+                (f_ "Unable to find function %S in source pattern %S")
+                fn t.origin
+          end
+      in
+      String.concat ""
+        (List.map
+           (function
+             | Text str -> str
+             | Expr expr -> eval_expr env expr)
+           t.atoms)
+
+
+    let parse env s =
+      let lxr = Genlex.make_lexer [] in
+      let parse_expr s =
+        let st = lxr (Stream.of_string s) in
+        match Stream.npeek 3 st with
+        | [Genlex.Ident fn; Genlex.Ident nm] -> Call(fn, Ident nm)
+        | [Genlex.Ident fn; Genlex.String str] -> Call(fn, String str)
+        | [Genlex.String str] -> String str
+        | [Genlex.Ident nm] -> Ident nm
+        (* TODO: add error location within the string. *)
+        | _ -> failwithf (f_ "Unable to parse expression %S") s
+      in
+      let parse s =
+        let lst_exprs = ref [] in
+        let ss =
+          let buff = Buffer.create (String.length s) in
+          Buffer.add_substitute
+            buff
+            (fun s -> lst_exprs := (parse_expr s) :: !lst_exprs; "\000")
+            s;
+          Buffer.contents buff
+        in
+        let rec join =
+          function
+          | hd1 :: tl1, hd2 :: tl2 -> Text hd1 :: Expr hd2 :: join (tl1, tl2)
+          | [], tl -> List.map (fun e -> Expr e) tl
+          | tl, [] -> List.map (fun e -> Text e) tl
+        in
+        join (OASISString.nsplit ss '\000', List.rev (!lst_exprs))
+      in
+      let t = {atoms = parse s; origin = s} in
+      (* We rely on a simple evaluation for checking variables/functions.
+         It works because there is no if/loop statement.
+      *)
+      let _s : string = eval env t in
+      t
+
+# 144 "src/oasis/OASISSourcePatterns.ml"
+  end
 
 
+  type t = Templater.t
+
+
+  let env ~modul () =
+    {
+      Templater.
+      variables = MapString.of_list ["module", modul];
+      functions = MapString.of_list
+          [
+            "capitalize_file", OASISUnixPath.capitalize_file;
+            "uncapitalize_file", OASISUnixPath.uncapitalize_file;
+          ];
+    }
+
+  let all_possible_files lst ~path ~modul =
+    let eval = Templater.eval (env ~modul ()) in
+    List.fold_left
+      (fun acc pat -> OASISUnixPath.concat path (eval pat) :: acc)
+      [] lst
+
+
+  let to_string t = t.Templater.origin
+
+
+end
+
+module OASISTypes = struct
+# 22 "src/oasis/OASISTypes.ml"
+
 
   type name          = string
   type package_name  = string
   type url           = string
   type unix_dirname  = string
-  type unix_filename = string
-  type host_dirname  = string
-  type host_filename = string
+  type unix_filename = string (* TODO: replace everywhere. *)
+  type host_dirname  = string (* TODO: replace everywhere. *)
+  type host_filename = string (* TODO: replace everywhere. *)
   type prog          = string
   type arg           = string
   type args          = string list
@@ -1226,9 +1762,6 @@
   type plugin_data = (all_plugin * plugin_data_purpose * (unit -> unit)) list
 
 
-# 115 "src/oasis/OASISTypes.ml"
-
-
   type 'a conditional = 'a OASISExpr.choices
 
 
@@ -1257,8 +1790,11 @@
         bs_compiled_object: compiled_object;
         bs_build_depends:   dependency list;
         bs_build_tools:     tool list;
+      bs_interface_patterns:      OASISSourcePatterns.t list;
+      bs_implementation_patterns: OASISSourcePatterns.t list;
         bs_c_sources:       unix_filename list;
         bs_data_files:      (unix_filename * unix_filename option) list;
+      bs_findlib_extra_files:     unix_filename list;
         bs_ccopt:           args conditional;
         bs_cclib:           args conditional;
         bs_dlllib:          args conditional;
@@ -1276,6 +1812,7 @@
         lib_internal_modules:   string list;
         lib_findlib_parent:     findlib_name option;
         lib_findlib_name:       findlib_name option;
+      lib_findlib_directory:  unix_dirname option;
         lib_findlib_containers: findlib_name list;
       }
 
@@ -1284,6 +1821,7 @@
       {
         obj_modules:            string list;
         obj_findlib_fullname:   findlib_name list option;
+      obj_findlib_directory:  unix_dirname option;
       }
 
 
@@ -1325,11 +1863,11 @@
 
 
   type doc_format =
-    | HTML of unix_filename
+    | HTML of unix_filename (* TODO: source filename. *)
     | DocText
     | PDF
     | PostScript
-    | Info of unix_filename
+    | Info of unix_filename (* TODO: source filename. *)
     | DVI
     | OtherDoc
 
@@ -1341,11 +1879,12 @@
         doc_custom:      custom;
         doc_build:       bool conditional;
         doc_install:     bool conditional;
-        doc_install_dir: unix_filename;
+      doc_install_dir: unix_filename; (* TODO: dest filename ?. *)
         doc_title:       string;
         doc_authors:     string list;
         doc_abstract:    string option;
         doc_format:      doc_format;
+      (* TODO: src filename. *)
         doc_data_files:  (unix_filename * unix_filename option) list;
         doc_build_tools: tool list;
       }
@@ -1376,13 +1915,15 @@
         name:                   package_name;
         version:                OASISVersion.t;
         license:                OASISLicense.t;
-        license_file:           unix_filename option;
+      license_file:           unix_filename option; (* TODO: source filename. *)
         copyrights:             string list;
         maintainers:            string list;
         authors:                string list;
         homepage:               url option;
+      bugreports:             url option;
         synopsis:               string;
         description:            OASISText.t option;
+      tags:                   string list;
         categories:             url list;
 
         conf_type:              [`Configure] plugin;
@@ -1398,10 +1939,10 @@
         clean_custom:           custom;
         distclean_custom:       custom;
 
-        files_ab:               unix_filename list;
+      files_ab:               unix_filename list; (* TODO: source filename. *)
         sections:               section list;
         plugins:                [`Extra] plugin list;
-        disable_oasis_section:  unix_filename list;
+      disable_oasis_section:  unix_filename list; (* TODO: source filename. *)
         schema_data:            PropList.Data.t;
         plugin_data:            plugin_data;
       }
@@ -1462,7 +2003,7 @@
       Printf.sprintf
         "oasis_version: %s; alpha_features: %s; beta_features: %s; \
          plugins_version: %s"
-        (OASISVersion.string_of_version t.oasis_version)
+        (OASISVersion.string_of_version (t:t).oasis_version)
         (String.concat ", " t.alpha_features)
         (String.concat ", " t.beta_features)
         (String.concat ", "
@@ -1518,7 +2059,7 @@
   let to_string t =
     Printf.sprintf
       "feature: %s; plugin: %s; publication: %s"
-      t.name
+      (t:t).name
       (match t.plugin with
          | None -> "<none>"
          | Some (_, nm, _) -> nm)
@@ -1530,9 +2071,9 @@
     let no_message = "no message" in
 
     let check_feature features stage =
-      let has_feature = List.mem t.name features in
+      let has_feature = List.mem (t:t).name features in
       if not has_feature then
-        match origin with
+        match (origin:origin) with
           | Field (fld, where) ->
               Some
                 (Printf.sprintf
@@ -1557,11 +2098,7 @@
           version (OASISVersion.VGreaterEqual min_version)
       in
         Printf.ksprintf
-          (fun str ->
-             if version_is_good then
-               None
-             else
-               Some str)
+        (fun str -> if version_is_good then None else Some str)
           fmt
     in
 
@@ -1681,7 +2218,7 @@
   let data_test t data =
     match data_check t data NoOrigin with
       | None -> true
-      | Some str -> false
+    | Some _ -> false
 
 
   let package_test t pkg =
@@ -1731,14 +2268,14 @@
     create "flag_docs"
       (since_version "0.3")
       (fun () ->
-         s_ "Building docs require '-docs' flag at configure.")
+         s_ "Make building docs require '-docs' flag at configure.")
 
 
   let flag_tests =
     create "flag_tests"
       (since_version "0.3")
       (fun () ->
-         s_ "Running tests require '-tests' flag at configure.")
+         s_ "Make running tests require '-tests' flag at configure.")
 
 
   let pack =
@@ -1763,12 +2300,12 @@
   let compiled_setup_ml =
     create "compiled_setup_ml" alpha
       (fun () ->
-         s_ "It compiles the setup.ml and speed-up actions done with it.")
+         s_ "Compile the setup.ml and speed-up actions done with it.")
 
   let disable_oasis_section =
     create "disable_oasis_section" alpha
       (fun () ->
-        s_ "Allows the OASIS section comments and digest to be omitted in \
+         s_ "Allow the OASIS section comments and digests to be omitted in \
             generated files.")
 
   let no_automatic_syntax =
@@ -1777,139 +2314,22 @@
          s_ "Disable the automatic inclusion of -syntax camlp4o for packages \
              that matches the internal heuristic (if a dependency ends with \
              a .syntax or is a well known syntax).")
-end
-
-module OASISUnixPath = struct
-# 22 "src/oasis/OASISUnixPath.ml"
-
-
-  type unix_filename = string
-  type unix_dirname = string
-
-
-  type host_filename = string
-  type host_dirname = string
-
-
-  let current_dir_name = "."
-
-
-  let parent_dir_name = ".."
-
-
-  let is_current_dir fn =
-    fn = current_dir_name || fn = ""
-
-
-  let concat f1 f2 =
-    if is_current_dir f1 then
-      f2
-    else
-      let f1' =
-        try OASISString.strip_ends_with ~what:"/" f1 with Not_found -> f1
-      in
-        f1'^"/"^f2
-
-
-  let make =
-    function
-      | hd :: tl ->
-          List.fold_left
-            (fun f p -> concat f p)
-            hd
-            tl
-      | [] ->
-          invalid_arg "OASISUnixPath.make"
-
-
-  let dirname f =
-    try
-      String.sub f 0 (String.rindex f '/')
-    with Not_found ->
-      current_dir_name
-
-
-  let basename f =
-    try
-      let pos_start =
-        (String.rindex f '/') + 1
-      in
-        String.sub f pos_start ((String.length f) - pos_start)
-    with Not_found ->
-      f
-
-
-  let chop_extension f =
-    try
-      let last_dot =
-        String.rindex f '.'
-      in
-      let sub =
-        String.sub f 0 last_dot
-      in
-        try
-          let last_slash =
-            String.rindex f '/'
-          in
-            if last_slash < last_dot then
-              sub
-            else
-              f
-        with Not_found ->
-          sub
-
-    with Not_found ->
-      f
-
-
-  let capitalize_file f =
-    let dir = dirname f in
-    let base = basename f in
-    concat dir (OASISString.capitalize_ascii base)
-
-
-  let uncapitalize_file f =
-    let dir = dirname f in
-    let base = basename f in
-    concat dir (OASISString.uncapitalize_ascii base)
-
-
-end
-
-module OASISHostPath = struct
-# 22 "src/oasis/OASISHostPath.ml"
-
 
-  open Filename
-
-
-  module Unix = OASISUnixPath
-
-
-  let make =
-    function
-      | [] ->
-          invalid_arg "OASISHostPath.make"
-      | hd :: tl ->
-          List.fold_left Filename.concat hd tl
-
-
-  let of_unix ufn =
-    if Sys.os_type = "Unix" then
-      ufn
-    else
-      make
-        (List.map
-           (fun p ->
-              if p = Unix.current_dir_name then
-                current_dir_name
-              else if p = Unix.parent_dir_name then
-                parent_dir_name
-              else
-                p)
-           (OASISString.nsplit ufn '/'))
+  let findlib_directory =
+    create "findlib_directory" beta
+      (fun () ->
+         s_ "Allow to install findlib libraries in sub-directories of the target \
+            findlib directory.")
 
+  let findlib_extra_files =
+    create "findlib_extra_files" beta
+      (fun () ->
+         s_ "Allow to install extra files for findlib libraries.")
 
+  let source_patterns =
+    create "source_patterns" alpha
+      (fun () ->
+         s_ "Customize mapping between module name and source file.")
 end
 
 module OASISSection = struct
@@ -1961,19 +2381,20 @@
       k, cs.cs_name
 
 
-  let string_of_section sct =
-    let k, nm =
-      section_id sct
-    in
-      (match k with
+  let string_of_section_kind =
+    function
          | `Library    -> "library"
          | `Object     -> "object"
          | `Executable -> "executable"
          | `Flag       -> "flag"
          | `SrcRepo    -> "src repository"
          | `Test       -> "test"
-         | `Doc        -> "doc")
-      ^" "^nm
+      | `Doc        -> "doc"
+
+
+  let string_of_section sct =
+    let k, nm = section_id sct in
+    (string_of_section_kind k)^" "^nm
 
 
   let section_find id scts =
@@ -2008,6 +2429,32 @@
 module OASISBuildSection = struct
 # 22 "src/oasis/OASISBuildSection.ml"
 
+  open OASISTypes
+
+  (* Look for a module file, considering capitalization or not. *)
+  let find_module source_file_exists bs modul =
+    let possible_lst =
+      OASISSourcePatterns.all_possible_files
+        (bs.bs_interface_patterns @ bs.bs_implementation_patterns)
+        ~path:bs.bs_path
+        ~modul
+    in
+    match List.filter source_file_exists possible_lst with
+    | (fn :: _) as fn_lst -> `Sources (OASISUnixPath.chop_extension fn, fn_lst)
+    | [] ->
+      let open OASISUtils in
+      let _, rev_lst =
+        List.fold_left
+          (fun (set, acc) fn ->
+             let base_fn = OASISUnixPath.chop_extension fn in
+             if SetString.mem base_fn set then
+               set, acc
+             else
+               SetString.add base_fn set, base_fn :: acc)
+          (SetString.empty, []) possible_lst
+      in
+      `No_sources (List.rev rev_lst)
+
 
 end
 
@@ -2050,64 +2497,29 @@
 
 
   open OASISTypes
-  open OASISUtils
   open OASISGettext
-  open OASISSection
-
-
-  (* Look for a module file, considering capitalization or not. *)
-  let find_module source_file_exists bs modul =
-    let possible_base_fn =
-      List.map
-        (OASISUnixPath.concat bs.bs_path)
-        [modul;
-         OASISUnixPath.uncapitalize_file modul;
-         OASISUnixPath.capitalize_file modul]
-    in
-      (* TODO: we should be able to be able to determine the source for every
-       * files. Hence we should introduce a Module(source: fn) for the fields
-       * Modules and InternalModules
-       *)
-      List.fold_left
-        (fun acc base_fn ->
-           match acc with
-             | `No_sources _ ->
-                 begin
-                   let file_found =
-                     List.fold_left
-                       (fun acc ext ->
-                          if source_file_exists (base_fn^ext) then
-                            (base_fn^ext) :: acc
-                          else
-                            acc)
-                       []
-                       [".ml"; ".mli"; ".mll"; ".mly"]
-                   in
-                     match file_found with
-                       | [] ->
-                           acc
-                       | lst ->
-                           `Sources (base_fn, lst)
-                 end
-             | `Sources _ ->
-                 acc)
-        (`No_sources possible_base_fn)
-        possible_base_fn
 
+  let find_module ~ctxt source_file_exists cs bs modul =
+    match OASISBuildSection.find_module source_file_exists bs modul with
+    | `Sources _ as res -> res
+    | `No_sources _ as res ->
+      OASISMessage.warning
+        ~ctxt
+        (f_ "Cannot find source file matching module '%s' in library %s.")
+        modul cs.cs_name;
+      OASISMessage.warning
+        ~ctxt
+        (f_ "Use InterfacePatterns or ImplementationPatterns to define \
+             this file with feature %S.")
+        (OASISFeatures.source_patterns.OASISFeatures.name);
+      res
 
   let source_unix_files ~ctxt (cs, bs, lib) source_file_exists =
     List.fold_left
       (fun acc modul ->
-         match find_module source_file_exists bs modul with
-           | `Sources (base_fn, lst) ->
-               (base_fn, lst) :: acc
-           | `No_sources _ ->
-               OASISMessage.warning
-                 ~ctxt
-                 (f_ "Cannot find source file matching \
-                      module '%s' in library %s")
-                 modul cs.cs_name;
-               acc)
+         match find_module ~ctxt source_file_exists cs bs modul with
+         | `Sources (base_fn, lst) -> (base_fn, lst) :: acc
+         | `No_sources _ -> acc)
       []
       (lib.lib_modules @ lib.lib_internal_modules)
 
@@ -2123,19 +2535,12 @@
 
     let find_modules lst ext =
       let find_module modul =
-        match find_module source_file_exists bs modul with
-          | `Sources (base_fn, [fn]) when ext <> "cmi"
+        match find_module ~ctxt source_file_exists cs bs modul with
+        | `Sources (_, [fn]) when ext <> "cmi"
                                        && Filename.check_suffix fn ".mli" ->
               None (* No implementation files for pure interface. *)
-          | `Sources (base_fn, _) ->
-              Some [base_fn]
-          | `No_sources lst ->
-              OASISMessage.warning
-                ~ctxt
-                (f_ "Cannot find source file matching \
-                     module '%s' in library %s")
-                modul cs.cs_name;
-              Some lst
+        | `Sources (base_fn, _) -> Some [base_fn]
+        | `No_sources lst -> Some lst
       in
       List.fold_left
         (fun acc nm ->
@@ -2180,15 +2585,12 @@
         else [".cmi"; ".cmti"; ".cmt"; ".annot"]
       in
       List.map
-        begin
-          List.fold_left
-            begin fun accu s ->
+        (List.fold_left
+           (fun accu s ->
               let dot = String.rindex s '.' in
               let base = String.sub s 0 dot in
-              List.map ((^) base) sufx @ accu
-            end
-            []
-        end
+              List.map ((^) base) sufx @ accu)
+           [])
         (find_modules lib.lib_modules "cmi")
     in
 
@@ -2214,26 +2616,23 @@
           [cs.cs_name^".cmxa"] :: [cs.cs_name^ext_lib] :: acc
       in
         match bs.bs_compiled_object with
-          | Native ->
-              byte (native acc_nopath)
-          | Best when is_native ->
-              byte (native acc_nopath)
-          | Byte | Best ->
-              byte acc_nopath
+      | Native -> byte (native acc_nopath)
+      | Best when is_native -> byte (native acc_nopath)
+      | Byte | Best -> byte acc_nopath
     in
 
     (* Add C library to be built *)
     let acc_nopath =
-      if bs.bs_c_sources <> [] then
-        begin
+      if bs.bs_c_sources <> [] then begin
           ["lib"^cs.cs_name^"_stubs"^ext_lib]
           ::
-          ["dll"^cs.cs_name^"_stubs"^ext_dll]
-          ::
-          acc_nopath
-        end
+        if has_native_dynlink then
+          ["dll"^cs.cs_name^"_stubs"^ext_dll] :: acc_nopath
       else
         acc_nopath
+      end else begin
+        acc_nopath
+      end
     in
 
       (* All the files generated *)
@@ -2255,19 +2654,27 @@
   open OASISGettext
 
 
-  let source_unix_files ~ctxt (cs, bs, obj) source_file_exists =
-    List.fold_left
-      (fun acc modul ->
-         match OASISLibrary.find_module source_file_exists bs modul with
-           | `Sources (base_fn, lst) ->
-               (base_fn, lst) :: acc
-           | `No_sources _ ->
+  let find_module ~ctxt source_file_exists cs bs modul =
+    match OASISBuildSection.find_module source_file_exists bs modul with
+    | `Sources _ as res -> res
+    | `No_sources _ as res ->
                OASISMessage.warning
                  ~ctxt
-                 (f_ "Cannot find source file matching \
-                      module '%s' in object %s")
+        (f_ "Cannot find source file matching module '%s' in object %s.")
                  modul cs.cs_name;
-               acc)
+      OASISMessage.warning
+        ~ctxt
+        (f_ "Use InterfacePatterns or ImplementationPatterns to define \
+             this file with feature %S.")
+        (OASISFeatures.source_patterns.OASISFeatures.name);
+      res
+
+  let source_unix_files ~ctxt (cs, bs, obj) source_file_exists =
+    List.fold_left
+      (fun acc modul ->
+         match find_module ~ctxt source_file_exists cs bs modul with
+         | `Sources (base_fn, lst) -> (base_fn, lst) :: acc
+         | `No_sources _ -> acc)
       []
       obj.obj_modules
 
@@ -2279,15 +2686,9 @@
         (cs, bs, obj) =
 
     let find_module ext modul =
-      match OASISLibrary.find_module source_file_exists bs modul with
+      match find_module ~ctxt source_file_exists cs bs modul with
         | `Sources (base_fn, _) -> [base_fn ^ ext]
-        | `No_sources lst ->
-          OASISMessage.warning
-            ~ctxt
-            (f_ "Cannot find source file matching \
-                 module '%s' in object %s")
-            modul cs.cs_name ;
-          lst
+      | `No_sources lst -> lst
     in
 
     let header, byte, native, c_object, f =
@@ -2322,7 +2723,6 @@
   open OASISTypes
   open OASISUtils
   open OASISGettext
-  open OASISSection
 
 
   type library_name = name
@@ -2340,6 +2740,7 @@
                   common_section *
                   build_section *
                   [`Library of library | `Object of object_] *
+                  unix_dirname option *
                   group_t list)
 
 
@@ -2522,17 +2923,31 @@
         add_children (OASISString.nsplit fndlb_fullname '.') mp
     in
 
-    let rec group_of_tree mp =
+    let unix_directory dn lib =
+      let directory =
+        match lib with
+        | `Library lib -> lib.lib_findlib_directory
+        | `Object obj -> obj.obj_findlib_directory
+      in
+      match dn, directory with
+      | None, None -> None
+      | None, Some dn | Some dn, None -> Some dn
+      | Some dn1, Some dn2 -> Some (OASISUnixPath.concat dn1 dn2)
+    in
+
+    let rec group_of_tree dn mp =
       MapString.fold
         (fun nm node acc ->
            let cur =
              match node with
                | Node (Some (cs, bs, lib), children) ->
-                   Package (nm, cs, bs, lib, group_of_tree children)
+               let current_dn = unix_directory dn lib in
+               Package (nm, cs, bs, lib, current_dn, group_of_tree current_dn children)
                | Node (None, children) ->
-                   Container (nm, group_of_tree children)
+               Container (nm, group_of_tree dn children)
                | Leaf (cs, bs, lib) ->
-                   Package (nm, cs, bs, lib, [])
+               let current_dn = unix_directory dn lib in
+               Package (nm, cs, bs, lib, current_dn, [])
            in
              cur :: acc)
         mp []
@@ -2552,9 +2967,7 @@
         pkg.sections
     in
 
-    let groups =
-      group_of_tree group_mp
-    in
+    let groups = group_of_tree None group_mp in
 
     let library_name_of_findlib_name =
       lazy begin
@@ -2580,7 +2993,7 @@
   let findlib_of_group =
     function
       | Container (fndlb_nm, _)
-      | Package (fndlb_nm, _, _, _, _) -> fndlb_nm
+      | Package (fndlb_nm, _, _, _, _, _) -> fndlb_nm
 
 
   let root_of_group grp =
@@ -2596,7 +3009,7 @@
                    res)
               None
               children
-        | Package (_, cs, bs, lib, _) ->
+        | Package (_, cs, bs, lib, _, _) ->
             Some (cs, bs, lib)
     in
       match root_lib_aux grp with
@@ -2648,26 +3061,218 @@
   open OASISUtils
   open OASISMessage
 
+  (* In general, there is no chance to quote properly with the current
+   * settings. ( This is only a problem, if BaseCustom.run is used (e.g
+   * test commands, PreConfigure,....). Most of the time, OASISExec.run
+   * is used with enabled quoting.)
+   *
+   * "$rm" should ideally expand to 'rm -f' (no quotes), but "$test_exec"
+   * should ideally expand to '"C:\Program Files\dir\test.exe"' (with
+   * quotes). Paths with spaces are common on Windows, so this problem
+   * can't be ignored.
+   *
+   * Using a command with additional parameters is quite useful, not only
+   * for trivial cases like $rm. You could add an additional parameter
+   * for $make in order to use a special compatibility mode, on windows
+   * you can use it to inform ocaml that a certain program is a shell
+   * script ('sh.exe pcre-config').
+   *
+   * An additional parameter (e.g. $rm_switches) would be ugly,
+   * especially for *nix users, who don't use space characters in their
+   * installation paths anyway.
+   *
+   * I use the following workaround, which should work most of the time:
+   *
+   * - if cmd doesn't contains spaces or other suspicious characters, it
+   * can be quoted in the usual way (not ambigous, I think)
+   *
+   * - if cmd does contain spaces, a file with this name exists, and the
+   * beginning of cmd looks like a absolute pathname
+   * ('\\test\dir\foo.exe' or "C:\\sa df\\foo.exe" - not "foo.exe" ), I
+   * will also quote it. (ambigous, there could be "C:\bin\rm.exe" and
+   * "C:\bin\rm -f.exe").  Relative filenames are not considered, because
+   * I assume the source code folder contains only well named files and
+   * relative paths like "../../make.exe" are uncommon (autoconf even
+   * rejects them) *)
+
+
+  (* stricter settings as for regular windows batch lines
+   * necessary because of shell comannds like:
+   *   LC_ALL=C make ....
+   *)
+  let is_dubious_char = function
+    | '+' | '~' | ':' | '.' | '-' | '_' | '/' | '\\' -> false
+    | c ->
+      OASISString.is_digit c = false &&
+      OASISString.is_alpha c = false
+
+
+  let win_quote_needed str =
+    let f = function
+      (* this list is not exhaustive. Feel free to added common chars, that
+       * can be passed to cmd.exe without quoting *)
+      | 'a' .. 'z'  | 'A' .. 'Z' | '0' .. '9'
+      | '_' | '-' | '~' | '.' | ':' | ',' | '\\' -> false
+      | _ -> true
+    in
+      str = "" || OASISString.exists f str
+
+  let is_simple_command str =
+    String.length str > 0 &&
+    not (OASISString.exists is_dubious_char str)
+
+  let is_path_sep = function
+    | '/' | '\\' -> true
+    | _ -> false
+
+  let starts_with_absolute_path cmd =
+    let len = String.length cmd in
+      if len < 3 then
+        false
+      else
+        let c0 = cmd.[0] in
+        let c1 = cmd.[1] in
+          if is_path_sep c0 && is_path_sep c1 then (* network devices: "//" *)
+            true
+          else if len = 3 then
+            false
+          else  (* C:\.... *)
+            OASISString.is_alpha c0 && c1 = ':' && is_path_sep cmd.[2]
+
+  let exe_exts = lazy
+    begin
+      let exts =
+        try
+          OASISString.nsplit
+            (Sys.getenv "PATHEXT")
+            ';'
+        with
+          | Not_found -> []
+      in
+      let exts' =
+        List.filter
+          ( fun a -> a <> "" && a.[0] = '.' && a <> ".exe" )
+          (List.map OASISString.lowercase_ascii exts) (* windows file system doesn't care *)
+      in
+        ".exe"::exts' (* .exe first, most common *)
+    end
+
+  let exe_file_exists fln =
+    Sys.file_exists fln ||
+    List.exists
+      (fun a -> Sys.file_exists ( fln ^ a ) )
+      (Lazy.force exe_exts)
+
+
+  let quote_anyway cmd =
+    if Sys.os_type <> "Win32" then (* workaround for windows only *)
+      false
+    else if is_simple_command cmd then
+      true
+    else
+      OASISString.exists OASISString.is_whitespace cmd &&
+        starts_with_absolute_path cmd &&
+        exe_file_exists cmd
+
+
+  let run_bash ~ctxt ?f_exit_code ?(quote=true) cmd args =
+    let fn = Filename.temp_file "oasis-" ".sh" in
+    let fn_deleted = ref false in
+      try
+        begin
+          let ch = open_out_bin fn in
+          let ch_closed = ref false in
+            try
+              begin
+                let cmd =
+                  if quote || quote_anyway cmd then
+                    OASISHostPath.quote (OASISHostPath.of_unix cmd)
+                  else
+                    cmd
+                in
+                  output_string ch cmd;
+                  List.iter
+                    ( fun s -> output_char ch ' '; output_string ch s )
+                    args ;
+                  output_char ch '\n';
+                  ch_closed:=true ;
+                  close_out ch;
+                  let bash = !OASISHostPath.bash_cmd () in
+                  let add_quotes = ref false in
+                  let shell_cmd =
+                    if Sys.os_type <> "Win32" then
+                      Filename.quote bash
+                    else
+                      if win_quote_needed bash = false then
+                        bash
+                      else
+                        begin
+                          add_quotes := true;
+                          Filename.quote bash
+                        end
+                  in
+                  let cmdline_orig = String.concat " " (cmd :: args) in
+                  let cmdline =
+                    let s = shell_cmd ^ " " ^ (Filename.quote fn) in
+                      if !add_quotes then
+                        "\"" ^ s ^ "\""
+                      else
+                        s
+                  in
+                    info ~ctxt (f_ "Running command '%s'") cmdline_orig;
+                    let ret = Sys.command cmdline in
+                      fn_deleted := true;
+                      Sys.remove fn;
+                      match f_exit_code, ret with
+                        | None, 0 -> ()
+                        | None, i ->
+                            failwithf
+                              (f_ "Command '%s' terminated with error code %d")
+                              cmdline_orig i
+                        | Some f, i ->
+                            f i
+              end
+            with
+              | x when !ch_closed = false ->
+                  close_out_noerr ch;
+                  raise x
+        end
+      with
+        | x when !fn_deleted = false ->
+            (try Sys.remove fn with _ -> () ) ;
+            raise x
 
   (* TODO: I don't like this quote, it is there because $(rm) foo expands to
    * 'rm -f' foo...
    *)
-  let run ~ctxt ?f_exit_code ?(quote=true) cmd args =
+  let run_default ~ctxt ?f_exit_code ?(quote=true) cmd args =
+    let add_quotes = ref false in
     let cmd =
-      if quote then
+      if quote || quote_anyway cmd then
         if Sys.os_type = "Win32" then
-          if String.contains cmd ' ' then
-            (* Double the 1st double quote... win32... sigh *)
-            "\""^(Filename.quote cmd)
-          else
+          begin
+            if win_quote_needed cmd = false then
             cmd
         else
+              begin
+                (* Double the 1st double quote... win32... sigh *)
+                (* Above comment ist false. The whole string must be quoted.
+                 * However, an error is only triggered, if args contains also
+                 * quoted parameters *)
+                add_quotes := true;
+                Filename.quote cmd
+              end
+          end
+        else
           Filename.quote cmd
       else
         cmd
     in
     let cmdline =
-      String.concat " " (cmd :: args)
+      let s = String.concat " " (cmd :: args) in
+        match !add_quotes with
+          | true -> "\"" ^ s ^ "\""
+          | false -> s
     in
       info ~ctxt (f_ "Running command '%s'") cmdline;
       match f_exit_code, Sys.command cmdline with
@@ -2679,6 +3284,13 @@
         | Some f, i ->
             f i
 
+  let run ~ctxt ?f_exit_code ?quote cmd args =
+    if OASISHostPath.use_bash () &&
+       (Sys.os_type <> "Win32" || not (Filename.check_suffix cmd ".bat"))
+    then
+      run_bash ~ctxt ?f_exit_code ?quote cmd args
+    else
+      run_default ~ctxt ?f_exit_code ?quote cmd args
 
   let run_read_output ~ctxt ?f_exit_code cmd args =
     let fn =
@@ -2789,7 +3401,7 @@
       ) alternatives
 
 
-  let which ~ctxt prg =
+  let which ?(plain=false) ?ctxt prg =
     let path_sep =
       match Sys.os_type with
         | "Win32" ->
@@ -2801,11 +3413,19 @@
     let exec_ext =
       match Sys.os_type with
         | "Win32" ->
-            "" :: (OASISString.nsplit (Sys.getenv "PATHEXT") path_sep)
+          "" :: (List.map
+                   OASISString.lowercase_ascii
+                   (OASISString.nsplit (Sys.getenv "PATHEXT") path_sep))
         | _ ->
             [""]
     in
+    let p =
       find_file ~case_sensitive:false [path_lst; [prg]] exec_ext
+    in
+    if plain then
+      p
+    else
+      OASISHostPath.of_unix p
 
 
   (**/**)
@@ -2822,35 +3442,54 @@
         dn
 
 
-  let q = Filename.quote
+  let q s = OASISHostPath.quote (OASISHostPath.of_unix s)
   (**/**)
 
-
   let cp ~ctxt ?(recurse=false) src tgt =
     if recurse then
-      match Sys.os_type with
-        | "Win32" ->
-            OASISExec.run ~ctxt
-              "xcopy" [q src; q tgt; "/E"]
-        | _ ->
-            OASISExec.run ~ctxt
-              "cp" ["-r"; q src; q tgt]
+      (*
+        'xcopy /E' and 'cp -r' don't have the same semantic!
+        -dir2 does exist:
+          xcopy dir dir2 /E -> copys content of dir into dir2 (dir2/dir doesn't exist!)
+          cp -r dir dir2    -> copys dir to dir2 (dir2/dir does exist!)
+        -dir2 doesn't exist:
+          xcopy dir dir2 /E -> request on command line, if dir2 is an directory or file.
+          cp -r dir dir2    -> dir and dir2 have the same content (dir2/dir doesn't exist)
+        Probably, there are even more differences,....
+      *)
+      if Sys.os_type = "Win32" && OASISHostPath.use_bash () = false then
+        let tgt_real =
+          if Sys.file_exists tgt = false then
+            begin
+              OASISExec.run ~ctxt "md" [q tgt];
+              tgt
+            end
     else
-      OASISExec.run ~ctxt
-        (match Sys.os_type with
-         | "Win32" -> "copy"
-         | _ -> "cp")
-        [q src; q tgt]
-
+            let base = Filename.basename src in
+            if base = "." then
+              tgt
+            else
+              let tgt_real = Filename.concat tgt base in
+              if Sys.file_exists tgt_real = false then
+                OASISExec.run ~ctxt "md" [q tgt_real];
+              tgt_real
+        in
+        OASISExec.run ~ctxt "xcopy" [q src; q tgt_real; "/E" ; "/Q" ; "/Y"]
+      else
+        OASISExec.run ~ctxt "cp" ["-r"; q src; q tgt]
+    else if Sys.os_type = "Win32" && OASISHostPath.use_bash () = false then
+      OASISExec.run ~ctxt "copy" [q src; q tgt ; "/Y"]
+    else
+      OASISExec.run ~ctxt "cp" [q src; q tgt]
 
   let mkdir ~ctxt tgt =
     OASISExec.run ~ctxt
-      (match Sys.os_type with
-         | "Win32" -> "md"
-         | _ -> "mkdir")
+      ( if Sys.os_type = "Win32" && not (OASISHostPath.use_bash ()) then
+          "md"
+        else
+          "mkdir" )
       [q tgt]
 
-
   let rec mkdir_parent ~ctxt f tgt =
     let tgt =
       fix_dir tgt
@@ -2876,10 +3515,9 @@
 
   let rmdir ~ctxt tgt =
     if Sys.readdir tgt = [||] then begin
-      match Sys.os_type with
-        | "Win32" ->
+      if Sys.os_type = "Win32" && OASISHostPath.use_bash () = false then
             OASISExec.run ~ctxt "rd" [q tgt]
-        | _ ->
+      else
             OASISExec.run ~ctxt "rm" ["-r"; q tgt]
     end else begin
       OASISMessage.error ~ctxt
@@ -2933,7 +3571,7 @@
 end
 
 
-# 2916 "setup.ml"
+# 3531 "setup.ml"
 module BaseEnvLight = struct
 # 22 "src/base/BaseEnvLight.ml"
 
@@ -2944,24 +3582,12 @@
   type t = string MapString.t
 
 
-  let default_filename =
-    Filename.concat
-      (Sys.getcwd ())
-      "setup.data"
+  let default_filename = Filename.concat (Sys.getcwd ()) "setup.data"
 
 
-  let load ?(allow_empty=false) ?(filename=default_filename) () =
-    if Sys.file_exists filename then
-      begin
-        let chn =
-          open_in_bin filename
-        in
-        let st =
-          Stream.of_channel chn
-        in
-        let line =
-          ref 1
-        in
+  let load ?(allow_empty=false) ?(filename=default_filename) ?stream () =
+    let line = ref 1 in
+    let lexer st =
         let st_line =
           Stream.from
             (fun _ ->
@@ -2971,36 +3597,32 @@
                    | c -> Some c
                with Stream.Failure -> None)
         in
-        let lexer =
           Genlex.make_lexer ["="] st_line
         in
-        let rec read_file mp =
-          match Stream.npeek 3 lexer with
+    let rec read_file lxr mp =
+      match Stream.npeek 3 lxr with
             | [Genlex.Ident nm; Genlex.Kwd "="; Genlex.String value] ->
-                Stream.junk lexer;
-                Stream.junk lexer;
-                Stream.junk lexer;
-                read_file (MapString.add nm value mp)
-            | [] ->
-                mp
+        Stream.junk lxr; Stream.junk lxr; Stream.junk lxr;
+        read_file lxr (MapString.add nm value mp)
+      | [] -> mp
             | _ ->
                 failwith
-                  (Printf.sprintf
-                     "Malformed data file '%s' line %d"
-                     filename !line)
-        in
-        let mp =
-          read_file MapString.empty
+          (Printf.sprintf "Malformed data file '%s' line %d" filename !line)
         in
-          close_in chn;
-          mp
-      end
-    else if allow_empty then
-      begin
+    match stream with
+    | Some st -> read_file (lexer st) MapString.empty
+    | None ->
+      if Sys.file_exists filename then begin
+        let chn = open_in_bin filename in
+        let st = Stream.of_channel chn in
+        try
+          let mp = read_file (lexer st) MapString.empty in
+          close_in chn; mp
+        with e ->
+          close_in chn; raise e
+      end else if allow_empty then begin
         MapString.empty
-      end
-    else
-      begin
+      end else begin
         failwith
           (Printf.sprintf
              "Unable to load environment, the file '%s' doesn't exist."
@@ -3007,11 +3629,8 @@
              filename)
       end
 
-
   let rec var_expand str env =
-    let buff =
-      Buffer.create ((String.length str) * 2)
-    in
+    let buff = Buffer.create ((String.length str) * 2) in
       Buffer.add_substitute
         buff
         (fun var ->
@@ -3027,18 +3646,12 @@
       Buffer.contents buff
 
 
-  let var_get name env =
-    var_expand (MapString.find name env) env
-
-
-  let var_choose lst env =
-    OASISExpr.choose
-      (fun nm -> var_get nm env)
-      lst
+  let var_get name env = var_expand (MapString.find name env) env
+  let var_choose lst env = OASISExpr.choose (fun nm -> var_get nm env) lst
 end
 
 
-# 3021 "setup.ml"
+# 3611 "setup.ml"
 module BaseContext = struct
 # 22 "src/base/BaseContext.ml"
 
@@ -3082,6 +3695,7 @@
 
   open OASISGettext
   open OASISUtils
+  open OASISContext
   open PropList
 
 
@@ -3113,26 +3727,22 @@
       }
 
 
-  let schema =
-    Schema.create "environment"
+  let schema = Schema.create "environment"
 
 
   (* Environment data *)
-  let env =
-    Data.create ()
+  let env = Data.create ()
 
 
   (* Environment data from file *)
-  let env_from_file =
-    ref MapString.empty
+  let env_from_file = ref MapString.empty
 
 
   (* Lexer for var *)
-  let var_lxr =
-    Genlex.make_lexer []
+  let var_lxr = Genlex.make_lexer []
 
 
-  let rec var_expand str =
+  let rec var_expand ?(quoted=false) str =
     let buff =
       Buffer.create ((String.length str) * 2)
     in
@@ -3160,7 +3770,11 @@
                  | [Genlex.Ident "ocaml_escaped"; Genlex.String s] ->
                      String.escaped s
                  | [Genlex.Ident nm] ->
-                     var_get nm
+                 let s = var_get nm in
+                 if quoted then
+                   OASISHostPath.quote s
+                 else
+                   s
                  | _ ->
                      failwithf
                        (f_ "Unknown expression '%s' in variable expansion of %s.")
@@ -3252,7 +3866,7 @@
     let var_get_low lst =
       let errors, res =
         List.fold_left
-          (fun (errors, res) (o, v) ->
+          (fun (errors, res) (_, v) ->
              if res = None then
                begin
                  try
@@ -3295,7 +3909,7 @@
         ~parse:(fun ?(context=ODefault) s -> [context, fun () -> s])
         ~print:var_get_low
         ~default
-        ~update:(fun ?context x old_x -> x @ old_x)
+        ~update:(fun ?context:_ x old_x -> x @ old_x)
         ?help
         extra
     in
@@ -3333,7 +3947,7 @@
       end
 
 
-  let var_ignore (e: unit -> string) = ()
+  let var_ignore (_: unit -> string) = ()
 
 
   let print_hidden =
@@ -3358,12 +3972,34 @@
          schema)
 
 
-  let default_filename =
-    BaseEnvLight.default_filename
+  let default_filename = in_srcdir "setup.data"
 
 
-  let load ?allow_empty ?filename () =
-    env_from_file := BaseEnvLight.load ?allow_empty ?filename ()
+  let load ~ctxt ?(allow_empty=false) ?(filename=default_filename) () =
+    let open OASISFileSystem in
+    env_from_file :=
+      let repr_filename = ctxt.srcfs#string_of_filename filename in
+      if ctxt.srcfs#file_exists filename then begin
+        let buf = Buffer.create 13 in
+        defer_close
+          (ctxt.srcfs#open_in ~mode:binary_in filename)
+          (read_all buf);
+        defer_close
+          (ctxt.srcfs#open_in ~mode:binary_in filename)
+          (fun rdr ->
+             OASISMessage.info ~ctxt "Loading environment from %S." repr_filename;
+             BaseEnvLight.load ~allow_empty
+               ~filename:(repr_filename)
+               ~stream:(stream_of_reader rdr)
+               ())
+      end else if allow_empty then begin
+        BaseEnvLight.MapString.empty
+      end else begin
+        failwith
+          (Printf.sprintf
+             (f_ "Unable to load environment, the file '%s' doesn't exist.")
+             repr_filename)
+      end
 
 
   let unload () =
@@ -3371,27 +4007,22 @@
     Data.clear env
 
 
-  let dump ?(filename=default_filename) () =
-    let chn =
-      open_out_bin filename
-    in
+  let dump ~ctxt ?(filename=default_filename) () =
+    let open OASISFileSystem in
+    defer_close
+      (ctxt.OASISContext.srcfs#open_out ~mode:binary_out filename)
+      (fun wrtr ->
+         let buf = Buffer.create 63 in
     let output nm value =
-      Printf.fprintf chn "%s=%S\n" nm value
+           Buffer.add_string buf (Printf.sprintf "%s=%S\n" nm value)
     in
     let mp_todo =
       (* Dump data from schema *)
       Schema.fold
         (fun mp_todo nm def _ ->
-           if def.dump then
-             begin
+                if def.dump then begin
                try
-                 let value =
-                   Schema.get
-                     schema
-                     env
-                     nm
-                 in
-                   output nm value
+                    output nm (Schema.get schema env nm)
                with Not_set _ ->
                  ()
              end;
@@ -3401,10 +4032,7 @@
     in
       (* Dump data defined outside of schema *)
       MapString.iter output mp_todo;
-
-      (* End of the dump *)
-      close_out chn
-
+         wrtr#output buf)
 
   let print () =
     let printable_vars =
@@ -3413,12 +4041,7 @@
            if not def.hide || bool_of_string (print_hidden ()) then
              begin
                try
-                 let value =
-                   Schema.get
-                     schema
-                     env
-                     nm
-                 in
+                 let value = Schema.get schema env nm in
                  let txt =
                    match short_descr_opt with
                      | Some s -> s ()
@@ -3438,22 +4061,21 @@
         (List.rev_map String.length
            (List.rev_map fst printable_vars))
     in
-    let dot_pad str =
-      String.make ((max_length - (String.length str)) + 3) '.'
-    in
-
-    Printf.printf "\nConfiguration: \n";
+    let dot_pad str = String.make ((max_length - (String.length str)) + 3) '.' in
+    Printf.printf "\nConfiguration:\n";
     List.iter
       (fun (name, value) ->
-        Printf.printf "%s: %s %s\n" name (dot_pad name) value)
+         Printf.printf "%s: %s" name (dot_pad name);
+         if value = "" then
+           Printf.printf "\n"
+         else
+           Printf.printf " %s\n" value)
       (List.rev printable_vars);
     Printf.printf "\n%!"
 
 
   let args () =
-    let arg_concat =
-      OASISUtils.varname_concat ~hyphen:'-'
-    in
+    let arg_concat = OASISUtils.varname_concat ~hyphen:'-' in
       [
         "--override",
          Arg.Tuple
@@ -3690,9 +4312,11 @@
     in
     let findlib_dir pkg =
       let dir =
+        OASISHostPath.of_unix (
+          OASISHostPath.ocamlfind_unquote (
         OASISExec.run_read_one_line ~ctxt:!BaseContext.default
           (ocamlfind ())
-          ["query"; "-format"; "%d"; pkg]
+              ["query"; "-format"; "%d"; pkg] ) )
       in
         if Sys.file_exists dir && Sys.is_directory dir then
           dir
@@ -3822,6 +4446,9 @@
       match nm with
         | "ocaml_version" ->
             "version", chop_version_suffix
+        | "standard_library"
+        | "standard_library_default" ->
+            nm, ( fun x -> OASISHostPath.of_unix x)
         | _ -> nm, (fun x -> x)
     in
       var_redefine
@@ -3849,7 +4476,6 @@
 
   open OASISGettext
   open OASISTypes
-  open OASISExpr
   open BaseCheck
   open BaseEnv
 
@@ -3962,15 +4588,43 @@
 
 
   let (/) a b =
-    if os_type () = Sys.os_type then
+    let os = os_type () in
+    if os = Sys.os_type then
+      if Sys.os_type = "Win32" && OASISHostPath.use_bash () then
+        OASISUnixPath.concat a b
+      else
       Filename.concat a b
-    else if os_type () = "Unix" then
+    else if os = "Unix" || os = "Cygwin" then
       OASISUnixPath.concat a b
     else
-      OASISUtils.failwithf (f_ "Cannot handle os_type %s filename concat")
-        (os_type ())
+      OASISUtils.failwithf (f_ "Cannot handle os_type %s filename concat") os
   (**/**)
 
+  let auto_bash =
+    lazy (
+      try
+        let bash = OASISFileUtil.which ~plain:true "bash" in
+        let sh = Filename.concat (Filename.dirname bash) "sh.exe" in
+        if Sys.file_exists sh then
+          sh
+        else
+          bash
+      with
+      | Not_found | Sys_error _ -> "" )
+
+  let auto_bash () =
+    if Sys.os_type <> "Win32" then
+      ""
+    else
+      Lazy.force auto_bash
+
+  let bash_cmd =
+    var_define
+     ~short_desc:(fun () -> s_ "Enforced bash shell:")
+      ~cli:CLIAuto
+      ~arg_help:"program"
+      "use_bash"
+      auto_bash
 
   let prefix =
     p "prefix"
@@ -3978,10 +4632,30 @@
       (fun () ->
          match os_type () with
            | "Win32" ->
+            let getenv w =
+              try
+                Some(Sys.getenv w)
+              with
+              | Not_found -> None
+            in
+            let s =
+              if Sys.word_size = 64 then
+                getenv "ProgramW6432"
+              else
+                None
+            in
+            let s =
+              if s = None then
+                getenv "PROGRAMFILES"
+              else
+                s
+            in
                let program_files =
-                 Sys.getenv "PROGRAMFILES"
+              match s with
+              | None -> "C:\\Program Files"
+              | Some x -> x
                in
-                 program_files/(pkg_name ())
+            OASISHostPath.of_unix (program_files/(pkg_name ()))
            | _ ->
                "/usr/local")
 
@@ -4067,7 +4741,15 @@
   let docdir =
     p "docdir"
       (fun () -> s_ "Documentation root")
-      (fun () -> "$datarootdir"/"doc"/"$pkg_name")
+      (fun () ->
+        (* TODO: (Windows only?) "$pkg_name" is not always substituted
+         * (at least if datarootdir contains spaces or other garbage)
+         * I haven't looked up why.
+         *)
+        match os_type () with
+          | "Win32" -> "$datarootdir"/"doc"/ ( pkg_name () )
+          | _ -> "$datarootdir"/"doc"/"$pkg_name"
+      )
 
 
   let htmldir =
@@ -4141,9 +4823,10 @@
       ~short_desc:(fun () -> s_ "Remove a file.")
       "rm"
       (fun () ->
-         match os_type () with
-           | "Win32" -> "del"
-           | _ -> "rm -f")
+         if not (OASISHostPath.use_bash ()) && os_type () = "Win32" then
+           "del"
+         else
+           "rm -f" )
 
 
   let rmdir =
@@ -4151,9 +4834,10 @@
       ~short_desc:(fun () -> s_ "Remove a directory.")
       "rmdir"
       (fun () ->
-         match os_type () with
-           | "Win32" -> "rd"
-           | _ -> "rm -rf")
+         if not (OASISHostPath.use_bash ()) && os_type () = "Win32" then
+           "rd"
+         else
+           "rm -rf")
 
 
   let debug =
@@ -4217,14 +4901,26 @@
            let has_native_dynlink =
              let ocamlfind = ocamlfind () in
                try
-                 let fn =
+               (* -format %d/%a doesn't work, because ocamlfind quotes %d
+                  * and %a separatly *)
+               let fn1 =
+                 OASISHostPath.ocamlfind_unquote (
+                   OASISExec.run_read_one_line
+                     ~ctxt:!BaseContext.default
+                     ocamlfind
+                     ["query"; "-predicates"; "native"; "dynlink";
+                      "-format"; "%d"] )
+               in
+               let fn2 =
+                 OASISHostPath.ocamlfind_unquote (
                    OASISExec.run_read_one_line
                      ~ctxt:!BaseContext.default
                      ocamlfind
                      ["query"; "-predicates"; "native"; "dynlink";
-                      "-format"; "%d/%a"]
+                      "-format"; "%a"]
+                 )
                  in
-                   Sys.file_exists fn
+               fn1 <> "" && fn2 <> "" && Sys.file_exists (Filename.concat fn1 fn2)
                with _ ->
                  false
            in
@@ -4251,6 +4947,8 @@
     rpkg := Some pkg;
     List.iter (fun f -> f pkg.oasis_version) !var_cond
 
+  let () =
+    OASISHostPath.bash_cmd := bash_cmd
 end
 
 module BaseFileAB = struct
@@ -4260,47 +4958,28 @@
   open BaseEnv
   open OASISGettext
   open BaseMessage
+  open OASISContext
 
 
   let to_filename fn =
-    let fn =
-      OASISHostPath.of_unix fn
-    in
       if not (Filename.check_suffix fn ".ab") then
-        warning
-          (f_ "File '%s' doesn't have '.ab' extension")
-          fn;
-      Filename.chop_extension fn
+      warning (f_ "File '%s' doesn't have '.ab' extension") fn;
+    OASISFileSystem.of_unix_filename (Filename.chop_extension fn)
 
 
-  let replace fn_lst =
-    let buff =
-      Buffer.create 13
-    in
+  let replace ~ctxt fn_lst =
+    let open OASISFileSystem in
+    let ibuf, obuf = Buffer.create 13, Buffer.create 13 in
       List.iter
         (fun fn ->
-           let fn =
-             OASISHostPath.of_unix fn
-           in
-           let chn_in =
-             open_in fn
-           in
-           let chn_out =
-             open_out (to_filename fn)
-           in
-             (
-               try
-                 while true do
-                  Buffer.add_string buff (var_expand (input_line chn_in));
-                  Buffer.add_char buff '\n'
-                 done
-               with End_of_file ->
-                 ()
-             );
-             Buffer.output_buffer chn_out buff;
-             Buffer.clear buff;
-             close_in chn_in;
-             close_out chn_out)
+         Buffer.clear ibuf; Buffer.clear obuf;
+         defer_close
+           (ctxt.srcfs#open_in (of_unix_filename fn))
+           (read_all ibuf);
+         Buffer.add_string obuf (var_expand (Buffer.contents ibuf));
+         defer_close
+           (ctxt.srcfs#open_out (to_filename fn))
+           (fun wrtr -> wrtr#output obuf))
         fn_lst
 end
 
@@ -4309,15 +4988,16 @@
 
 
   open OASISUtils
+  open OASISContext
+  open OASISGettext
+  open OASISFileSystem
 
 
-  let default_filename =
-    Filename.concat
-      (Filename.dirname BaseEnv.default_filename)
-      "setup.log"
+  let default_filename = in_srcdir "setup.log"
 
 
-  module SetTupleString =
+  let load ~ctxt () =
+    let module SetTupleString =
     Set.Make
       (struct
          type t = string * string
@@ -4326,109 +5006,74 @@
              | 0 -> String.compare s12 s22
              | n -> n
        end)
-
-
-  let load () =
-    if Sys.file_exists default_filename then
-      begin
-        let chn =
-          open_in default_filename
-        in
-        let scbuf =
-          Scanf.Scanning.from_file default_filename
         in
+    if ctxt.srcfs#file_exists default_filename then begin
+      defer_close
+        (ctxt.srcfs#open_in default_filename)
+        (fun rdr ->
+           let line = ref 1 in
+           let lxr = Genlex.make_lexer [] (stream_of_reader rdr) in
         let rec read_aux (st, lst) =
-          if not (Scanf.Scanning.end_of_input scbuf) then
-            begin
-              let acc =
-                try
-                  Scanf.bscanf scbuf "%S %S\n"
-                    (fun e d ->
-                       let t =
-                         e, d
-                       in
+             match Stream.npeek 2 lxr with
+             | [Genlex.String e; Genlex.String d] ->
+               let t = e, d in
+               Stream.junk lxr; Stream.junk lxr;
                          if SetTupleString.mem t st then
-                           st, lst
-                         else
-                           SetTupleString.add t st,
-                           t :: lst)
-                with Scanf.Scan_failure _ ->
-                  failwith
-                    (Scanf.bscanf scbuf
-                       "%l"
-                       (fun line ->
-                          Printf.sprintf
-                            "Malformed log file '%s' at line %d"
-                            default_filename
-                            line))
-              in
-                read_aux acc
-            end
+                 read_aux (st, lst)
           else
-            begin
-              close_in chn;
-              List.rev lst
-            end
+                 read_aux (SetTupleString.add t st, t :: lst)
+             | [] -> List.rev lst
+             | _ ->
+               failwithf
+                 (f_ "Malformed log file '%s' at line %d")
+                 (ctxt.srcfs#string_of_filename default_filename)
+                 !line
         in
-          read_aux (SetTupleString.empty, [])
-      end
-    else
-      begin
+           read_aux (SetTupleString.empty, []))
+    end else begin
         []
       end
 
 
-  let register event data =
-    let chn_out =
-      open_out_gen [Open_append; Open_creat; Open_text] 0o644 default_filename
-    in
-      Printf.fprintf chn_out "%S %S\n" event data;
-      close_out chn_out
+  let register ~ctxt event data =
+    defer_close
+      (ctxt.srcfs#open_out
+         ~mode:[Open_append; Open_creat; Open_text]
+         ~perm:0o644
+         default_filename)
+      (fun wrtr ->
+         let buf = Buffer.create 13 in
+         Printf.bprintf buf "%S %S\n" event data;
+         wrtr#output buf)
 
 
-  let unregister event data =
-    if Sys.file_exists default_filename then
-      begin
-        let lst =
-          load ()
-        in
-        let chn_out =
-          open_out default_filename
-        in
-        let write_something =
-          ref false
-        in
+  let unregister ~ctxt event data =
+    let lst = load ~ctxt () in
+    let buf = Buffer.create 13 in
           List.iter
             (fun (e, d) ->
                if e <> event || d <> data then
-                 begin
-                   write_something := true;
-                   Printf.fprintf chn_out "%S %S\n" e d
-                 end)
+           Printf.bprintf buf "%S %S\n" e d)
             lst;
-          close_out chn_out;
-          if not !write_something then
-            Sys.remove default_filename
-      end
+    if Buffer.length buf > 0 then
+      defer_close
+        (ctxt.srcfs#open_out default_filename)
+        (fun wrtr -> wrtr#output buf)
+    else
+      ctxt.srcfs#remove default_filename
 
 
-  let filter events =
-    let st_events =
-      List.fold_left
-        (fun st e ->
-           SetString.add e st)
-        SetString.empty
-        events
-    in
+  let filter ~ctxt events =
+    let st_events = SetString.of_list events in
       List.filter
         (fun (e, _) -> SetString.mem e st_events)
-        (load ())
+      (load ~ctxt ())
 
 
-  let exists event data =
+  let exists ~ctxt event data =
     List.exists
       (fun v -> (event, data) = v)
-      (load ())
+      (load ~ctxt ())
 end
 
 module BaseBuilt = struct
@@ -4464,27 +5109,24 @@
     "is_"^(to_log_event_file t nm)
 
 
-  let register t nm lst =
-    BaseLog.register
-      (to_log_event_done t nm)
-      "true";
+  let register ~ctxt t nm lst =
+    BaseLog.register ~ctxt (to_log_event_done t nm) "true";
     List.iter
       (fun alt ->
          let registered =
            List.fold_left
              (fun registered fn ->
-                if OASISFileUtil.file_exists_case fn then
-                  begin
-                    BaseLog.register
+                if OASISFileUtil.file_exists_case fn then begin
+                  BaseLog.register ~ctxt
                       (to_log_event_file t nm)
                       (if Filename.is_relative fn then
                          Filename.concat (Sys.getcwd ()) fn
                        else
                          fn);
                     true
-                  end
-                else
-                  registered)
+                end else begin
+                  registered
+                end)
              false
              alt
          in
@@ -4495,56 +5137,40 @@
       lst
 
 
-  let unregister t nm =
+  let unregister ~ctxt t nm =
     List.iter
-      (fun (e, d) ->
-         BaseLog.unregister e d)
-      (BaseLog.filter
-         [to_log_event_file t nm;
-          to_log_event_done t nm])
+      (fun (e, d) -> BaseLog.unregister ~ctxt e d)
+      (BaseLog.filter ~ctxt [to_log_event_file t nm; to_log_event_done t nm])
 
 
-  let fold t nm f acc =
+  let fold ~ctxt t nm f acc =
     List.fold_left
       (fun acc (_, fn) ->
-         if OASISFileUtil.file_exists_case fn then
-           begin
+         if OASISFileUtil.file_exists_case fn then begin
              f acc fn
-           end
-         else
-           begin
+         end else begin
              warning
                (f_ "File '%s' has been marked as built \
                   for %s but doesn't exist")
                fn
                (Printf.sprintf
                   (match t with
-                     | BExec | BExecLib ->
-                         (f_ "executable %s")
-                     | BLib ->
-                         (f_ "library %s")
-                     | BObj ->
-                         (f_ "object %s")
-                     | BDoc ->
-                         (f_ "documentation %s"))
+                  | BExec | BExecLib -> (f_ "executable %s")
+                  | BLib -> (f_ "library %s")
+                  | BObj -> (f_ "object %s")
+                  | BDoc -> (f_ "documentation %s"))
                   nm);
              acc
            end)
       acc
-      (BaseLog.filter
-         [to_log_event_file t nm])
+      (BaseLog.filter ~ctxt [to_log_event_file t nm])
 
 
-  let is_built t nm =
+  let is_built ~ctxt t nm =
     List.fold_left
-      (fun is_built (_, d) ->
-         (try
-            bool_of_string d
-          with _ ->
-            false))
+      (fun _ (_, d) -> try bool_of_string d with _ -> false)
       false
-      (BaseLog.filter
-         [to_log_event_done t nm])
+      (BaseLog.filter ~ctxt [to_log_event_done t nm])
 
 
   let of_executable ffn (cs, bs, exec) =
@@ -4623,7 +5249,7 @@
     OASISExec.run ~ctxt:!BaseContext.default ~quote:false
       (var_expand cmd)
       (List.map
-         var_expand
+         (var_expand ~quoted:true)
          (args @ (Array.to_list extra_args)))
 
 
@@ -4672,12 +5298,12 @@
   open BaseBuilt
 
 
-  let init pkg =
+  let init ~ctxt pkg =
     (* TODO: disambiguate exec vs other variable by adding exec_VARNAME. *)
     (* TODO: provide compile option for library libary_byte_args_VARNAME... *)
     List.iter
       (function
-         | Executable (cs, bs, exec) ->
+        | Executable (cs, bs, _) ->
              if var_choose bs.bs_build then
                var_ignore
                  (var_redefine
@@ -4690,10 +5316,7 @@
                     (OASISUtils.varname_of_string cs.cs_name)
                     (fun () ->
                        let fn_opt =
-                         fold
-                           BExec cs.cs_name
-                           (fun _ fn -> Some fn)
-                           None
+                      fold ~ctxt BExec cs.cs_name (fun _ fn -> Some fn) None
                        in
                          match fn_opt with
                            | Some fn -> fn
@@ -4717,11 +5340,10 @@
   open BaseEnv
   open BaseMessage
   open OASISTypes
-  open OASISExpr
   open OASISGettext
 
 
-  let test lst pkg extra_args =
+  let test ~ctxt lst pkg extra_args =
 
     let one_test (failure, n) (test_plugin, cs, test) =
       if var_choose
@@ -4731,15 +5353,11 @@
            ~printer:string_of_bool
            test.test_run then
         begin
-          let () =
-            info (f_ "Running test '%s'") cs.cs_name
-          in
+          let () = info (f_ "Running test '%s'") cs.cs_name in
           let back_cwd =
             match test.test_working_directory with
               | Some dir ->
-                  let cwd =
-                    Sys.getcwd ()
-                  in
+                let cwd = Sys.getcwd () in
                   let chdir d =
                     info (f_ "Changing directory to '%s'") d;
                     Sys.chdir d
@@ -4754,7 +5372,7 @@
               let failure_percent =
                 BaseCustom.hook
                   test.test_custom
-                  (test_plugin pkg (cs, test))
+                (test_plugin ~ctxt pkg (cs, test))
                   extra_args
               in
                 back_cwd ();
@@ -4771,18 +5389,8 @@
           (failure, n)
         end
     in
-    let failed, n =
-      List.fold_left
-        one_test
-        (0.0, 0)
-        lst
-    in
-    let failure_percent =
-      if n = 0 then
-        0.0
-      else
-        failed /. (float_of_int n)
-    in
+    let failed, n = List.fold_left one_test (0.0, 0) lst in
+    let failure_percent = if n = 0 then 0.0 else failed /. (float_of_int n) in
     let msg =
       Printf.sprintf
         (f_ "Tests had a %.2f%% failure rate")
@@ -4812,7 +5420,7 @@
   open OASISGettext
 
 
-  let doc lst pkg extra_args =
+  let doc ~ctxt lst pkg extra_args =
 
     let one_doc (doc_plugin, cs, doc) =
       if var_choose
@@ -4825,7 +5433,7 @@
           info (f_ "Building documentation '%s'") cs.cs_name;
           BaseCustom.hook
             doc.doc_custom
-            (doc_plugin pkg (cs, doc))
+            (doc_plugin ~ctxt pkg (cs, doc))
             extra_args
         end
     in
@@ -4842,20 +5450,25 @@
 module BaseSetup = struct
 # 22 "src/base/BaseSetup.ml"
 
+  open OASISContext
   open BaseEnv
   open BaseMessage
   open OASISTypes
-  open OASISSection
   open OASISGettext
   open OASISUtils
 
 
   type std_args_fun =
-      package -> string array -> unit
+    ctxt:OASISContext.t -> package -> string array -> unit
 
 
   type ('a, 'b) section_args_fun =
-      name * (package -> (common_section * 'a) -> string array -> 'b)
+    name *
+    (ctxt:OASISContext.t ->
+     package ->
+     (common_section * 'a) ->
+     string array ->
+     'b)
 
 
   type t =
@@ -4908,47 +5521,66 @@
         action
 
 
-  let configure t args =
+  let configure ~ctxt t args =
     (* Run configure *)
+
+    (* use-bash is an exception. It's already needed to run the
+       pre-configure script. *)
+    let rec f = function
+      | [] ->
+        begin
+          try
+            let x = Sys.getenv "USE_BASH" in
+              OASISHostPath.bash_cmd := (fun () -> x);
+          with
+            _ -> ()
+        end
+      | "--use-bash"::x::_ ->
+          OASISHostPath.bash_cmd := (fun () -> x);
+      | _::tl -> f tl
+    in
+      f (Array.to_list args);
     BaseCustom.hook
       t.package.conf_custom
       (fun () ->
+           OASISHostPath.bash_cmd := BaseStandardVar.bash_cmd;
          (* Reload if preconf has changed it *)
          begin
            try
              unload ();
-             load ();
+             load ~ctxt ();
            with _ ->
              ()
          end;
 
          (* Run plugin's configure *)
-         t.configure t.package args;
+         t.configure ~ctxt t.package args;
 
          (* Dump to allow postconf to change it *)
-         dump ())
+         dump ~ctxt ())
       ();
 
     (* Reload environment *)
     unload ();
-    load ();
+    load ~ctxt ();
 
     (* Save environment *)
     print ();
 
     (* Replace data in file *)
-    BaseFileAB.replace t.package.files_ab
+    BaseFileAB.replace ~ctxt t.package.files_ab
 
 
-  let build t args =
+  let build ~ctxt t args =
     BaseCustom.hook
       t.package.build_custom
-      (t.build t.package)
+      (t.build ~ctxt t.package)
       args
 
 
-  let doc t args =
+  let doc ~ctxt t args =
     BaseDoc.doc
+      ~ctxt
       (join_plugin_sections
          (function
             | Doc (cs, e) ->
@@ -4967,8 +5599,9 @@
       args
 
 
-  let test t args =
+  let test ~ctxt t args =
     BaseTest.test
+      ~ctxt
       (join_plugin_sections
          (function
             | Test (cs, e) ->
@@ -4987,16 +5620,10 @@
       args
 
 
-  let all t args =
-    let rno_doc =
-      ref false
-    in
-    let rno_test =
-      ref false
-    in
-    let arg_rest =
-      ref []
-    in
+  let all ~ctxt t args =
+    let rno_doc = ref false in
+    let rno_test = ref false in
+    let arg_rest = ref [] in
       Arg.parse_argv
         ~current:(ref 0)
         (Array.of_list
@@ -5019,52 +5646,39 @@
         "";
 
       info "Running configure step";
-      configure t (Array.of_list (List.rev !arg_rest));
+    configure ~ctxt t (Array.of_list (List.rev !arg_rest));
 
       info "Running build step";
-      build     t [||];
+    build ~ctxt t [||];
 
       (* Load setup.log dynamic variables *)
-      BaseDynVar.init t.package;
+    BaseDynVar.init ~ctxt t.package;
 
-      if not !rno_doc then
-        begin
+    if not !rno_doc then begin
           info "Running doc step";
-          doc t [||];
-        end
-      else
-        begin
+      doc ~ctxt t [||]
+    end else begin
           info "Skipping doc step"
         end;
-
-      if not !rno_test then
-        begin
+    if not !rno_test then begin
           info "Running test step";
-          test t [||]
-        end
-      else
-        begin
+      test ~ctxt t [||]
+    end else begin
           info "Skipping test step"
         end
 
 
-  let install t args =
-    BaseCustom.hook
-      t.package.install_custom
-      (t.install t.package)
-      args
+  let install ~ctxt t args =
+    BaseCustom.hook t.package.install_custom (t.install ~ctxt t.package) args
 
 
-  let uninstall t args =
-    BaseCustom.hook
-      t.package.uninstall_custom
-      (t.uninstall t.package)
-      args
+  let uninstall ~ctxt t args =
+    BaseCustom.hook t.package.uninstall_custom (t.uninstall ~ctxt t.package) args
 
 
-  let reinstall t args =
-    uninstall t args;
-    install t args
+  let reinstall ~ctxt t args =
+    uninstall ~ctxt t args;
+    install ~ctxt t args
 
 
   let clean, distclean =
@@ -5079,7 +5693,7 @@
              | e -> Printexc.to_string e)
     in
 
-    let generic_clean t cstm mains docs tests args =
+    let generic_clean ~ctxt t cstm mains docs tests args =
       BaseCustom.hook
         ~failsafe:true
         cstm
@@ -5092,40 +5706,27 @@
                       try
                         List.assoc cs.cs_name tests
                       with Not_found ->
-                        fun _ _ _ -> ()
+                   fun ~ctxt:_ _ _ _ -> ()
                     in
-                      failsafe
-                        (f t.package (cs, test))
-                        args
+                 failsafe (f ~ctxt t.package (cs, test)) args
                 | Doc (cs, doc) ->
                     let f =
                       try
                         List.assoc cs.cs_name docs
                       with Not_found ->
-                        fun _ _ _ -> ()
+                   fun ~ctxt:_ _ _ _ -> ()
                     in
-                      failsafe
-                        (f t.package (cs, doc))
-                        args
-                | Library _
-                | Object _
-                | Executable _
-                | Flag _
-                | SrcRepo _ ->
-                    ())
+                 failsafe (f ~ctxt t.package (cs, doc)) args
+               | Library _ | Object _ | Executable _ | Flag _ | SrcRepo _ -> ())
              t.package.sections;
            (* Clean whole package *)
-           List.iter
-             (fun f ->
-                failsafe
-                  (f t.package)
-                  args)
-             mains)
+           List.iter (fun f -> failsafe (f ~ctxt t.package) args) mains)
         ()
     in
 
-    let clean t args =
+    let clean ~ctxt t args =
       generic_clean
+        ~ctxt
         t
         t.package.clean_custom
         t.clean
@@ -5134,12 +5735,13 @@
         args
     in
 
-    let distclean t args =
+    let distclean ~ctxt t args =
       (* Call clean *)
-      clean t args;
+      clean ~ctxt t args;
 
       (* Call distclean code *)
       generic_clean
+        ~ctxt
         t
         t.package.distclean_custom
         t.distclean
@@ -5147,26 +5749,21 @@
         t.distclean_test
         args;
 
-      (* Remove generated file *)
+      (* Remove generated source files. *)
       List.iter
         (fun fn ->
-           if Sys.file_exists fn then
-             begin
-               info (f_ "Remove '%s'") fn;
-               Sys.remove fn
+           if ctxt.srcfs#file_exists fn then begin
+             info (f_ "Remove '%s'") (ctxt.srcfs#string_of_filename fn);
+             ctxt.srcfs#remove fn
              end)
-        (BaseEnv.default_filename
-         ::
-         BaseLog.default_filename
-         ::
-         (List.rev_map BaseFileAB.to_filename t.package.files_ab))
+        ([BaseEnv.default_filename; BaseLog.default_filename]
+         @ (List.rev_map BaseFileAB.to_filename t.package.files_ab))
     in
 
       clean, distclean
 
 
-  let version t _ =
-    print_endline t.oasis_version
+  let version ~ctxt:_ (t: t) _ = print_endline t.oasis_version
 
 
   let update_setup_ml, no_update_setup_ml_cli =
@@ -5176,7 +5773,7 @@
        Arg.Clear b,
        s_ " Don't try to update setup.ml, even if _oasis has changed.")
 
-
+  (* TODO: srcfs *)
   let default_oasis_fn = "_oasis"
 
 
@@ -5257,10 +5854,8 @@
                 OASISExec.run
                   ~ctxt:!BaseContext.default
                   ~f_exit_code:
-                  (function
-                     | 0 ->
-                         ()
-                     | n ->
+                  (fun n ->
+                     if n <> 0 then
                          failwithf
                            (f_ "Unable to update setup.ml using '%s', \
                                 please fix the problem and retry.")
@@ -5305,24 +5900,17 @@
 
 
   let setup t =
-    let catch_exn =
-      ref true
-    in
-      try
+    let catch_exn = ref true in
         let act_ref =
-          ref (fun _ ->
+      ref (fun ~ctxt:_ _ ->
                  failwithf
                    (f_ "No action defined, run '%s %s -help'")
                    Sys.executable_name
                    Sys.argv.(0))
 
         in
-        let extra_args_ref =
-          ref []
-        in
-        let allow_empty_env_ref =
-          ref false
-        in
+    let extra_args_ref = ref [] in
+    let allow_empty_env_ref = ref false in
         let arg_handle ?(allow_empty_env=false) act =
           Arg.Tuple
             [
@@ -5334,7 +5922,8 @@
                    act_ref := act);
             ]
         in
-
+    try
+      let () =
           Arg.parse
             (Arg.align
                ([
@@ -5396,10 +5985,14 @@
                    [])
                @ (BaseContext.args ())))
             (failwithf (f_ "Don't know what to do with '%s'"))
-            (s_ "Setup and run build process current package\n");
+          (s_ "Setup and run build process current package\n")
+      in
+
+      (* Instantiate the context. *)
+      let ctxt = !BaseContext.default in
 
           (* Build initial environment *)
-          load ~allow_empty:!allow_empty_env_ref ();
+      load ~ctxt ~allow_empty:!allow_empty_env_ref ();
 
           (** Initialize flags *)
           List.iter
@@ -5423,10 +6016,8 @@
                                              choices)))
                      in
                        match hlp with
-                         | Some hlp ->
-                             apply ~short_desc:(fun () -> hlp) ()
-                         | None ->
-                             apply ()
+              | Some hlp -> apply ~short_desc:(fun () -> hlp) ()
+              | None -> apply ()
                    end
                | _ ->
                    ())
@@ -5434,12 +6025,10 @@
 
           BaseStandardVar.init t.package;
 
-          BaseDynVar.init t.package;
+      BaseDynVar.init ~ctxt t.package;
 
-          if t.setup_update && update_setup_ml t then
-            ()
-          else
-            !act_ref t (Array.of_list (List.rev !extra_args_ref))
+      if not (t.setup_update && update_setup_ml t) then
+        !act_ref ~ctxt t (Array.of_list (List.rev !extra_args_ref))
 
       with e when !catch_exn ->
         error "%s" (Printexc.to_string e);
@@ -5448,8 +6037,144 @@
 
 end
 
+module BaseCompat = struct
+# 22 "src/base/BaseCompat.ml"
+
+  (** Compatibility layer to provide a stable API inside setup.ml.
+      This layer allows OASIS to change in between minor versions
+      (e.g. 0.4.6 -> 0.4.7) but still provides a stable API inside setup.ml. This
+      enables to write functions that manipulate setup_t inside setup.ml. See
+      deps.ml for an example.
+
+      The module opened by default will depend on the version of the _oasis. E.g.
+      if we have "OASISFormat: 0.3", the module Compat_0_3 will be opened and
+      the function Compat_0_3 will be called. If setup.ml is generated with the
+      -nocompat, no module will be opened.
+
+      @author Sylvain Le Gall
+    *)
+
+  module Compat_0_4 =
+  struct
+    let rctxt = ref !BaseContext.default
+
+    module BaseSetup =
+    struct
+      module Original = BaseSetup
+
+      open OASISTypes
+
+      type std_args_fun = package -> string array -> unit
+      type ('a, 'b) section_args_fun =
+        name * (package -> (common_section * 'a) -> string array -> 'b)
+      type t =
+        {
+          configure:        std_args_fun;
+          build:            std_args_fun;
+          doc:              ((doc, unit)  section_args_fun) list;
+          test:             ((test, float) section_args_fun) list;
+          install:          std_args_fun;
+          uninstall:        std_args_fun;
+          clean:            std_args_fun list;
+          clean_doc:        (doc, unit) section_args_fun list;
+          clean_test:       (test, unit) section_args_fun list;
+          distclean:        std_args_fun list;
+          distclean_doc:    (doc, unit) section_args_fun list;
+          distclean_test:   (test, unit) section_args_fun list;
+          package:          package;
+          oasis_fn:         string option;
+          oasis_version:    string;
+          oasis_digest:     Digest.t option;
+          oasis_exec:       string option;
+          oasis_setup_args: string list;
+          setup_update:     bool;
+        }
+
+      let setup t =
+        let mk_std_args_fun f =
+          fun ~ctxt pkg args -> rctxt := ctxt; f pkg args
+        in
+        let mk_section_args_fun l =
+          List.map
+            (fun (nm, f) ->
+               nm,
+               (fun ~ctxt pkg sct args ->
+                  rctxt := ctxt;
+                  f pkg sct args))
+            l
+        in
+        let t' =
+          {
+            Original.
+            configure =        mk_std_args_fun t.configure;
+            build =            mk_std_args_fun t.build;
+            doc =              mk_section_args_fun t.doc;
+            test =             mk_section_args_fun t.test;
+            install =          mk_std_args_fun t.install;
+            uninstall =        mk_std_args_fun t.uninstall;
+            clean =            List.map mk_std_args_fun t.clean;
+            clean_doc =        mk_section_args_fun t.clean_doc;
+            clean_test =       mk_section_args_fun t.clean_test;
+            distclean =        List.map mk_std_args_fun t.distclean;
+            distclean_doc =    mk_section_args_fun t.distclean_doc;
+            distclean_test =   mk_section_args_fun t.distclean_test;
+
+            package =          t.package;
+            oasis_fn =         t.oasis_fn;
+            oasis_version =    t.oasis_version;
+            oasis_digest =     t.oasis_digest;
+            oasis_exec =       t.oasis_exec;
+            oasis_setup_args = t.oasis_setup_args;
+            setup_update =     t.setup_update;
+          }
+        in
+        Original.setup t'
+
+    end
+
+    let adapt_setup_t setup_t =
+      let module O = BaseSetup.Original in
+      let mk_std_args_fun f = fun pkg args -> f ~ctxt:!rctxt pkg args in
+      let mk_section_args_fun l =
+        List.map
+          (fun (nm, f) -> nm, (fun pkg sct args -> f ~ctxt:!rctxt pkg sct args))
+          l
+      in
+      {
+        BaseSetup.
+        configure =        mk_std_args_fun setup_t.O.configure;
+        build =            mk_std_args_fun setup_t.O.build;
+        doc =              mk_section_args_fun setup_t.O.doc;
+        test =             mk_section_args_fun setup_t.O.test;
+        install =          mk_std_args_fun setup_t.O.install;
+        uninstall =        mk_std_args_fun setup_t.O.uninstall;
+        clean =            List.map mk_std_args_fun setup_t.O.clean;
+        clean_doc =        mk_section_args_fun setup_t.O.clean_doc;
+        clean_test =       mk_section_args_fun setup_t.O.clean_test;
+        distclean =        List.map mk_std_args_fun setup_t.O.distclean;
+        distclean_doc =    mk_section_args_fun setup_t.O.distclean_doc;
+        distclean_test =   mk_section_args_fun setup_t.O.distclean_test;
+
+        package =          setup_t.O.package;
+        oasis_fn =         setup_t.O.oasis_fn;
+        oasis_version =    setup_t.O.oasis_version;
+        oasis_digest =     setup_t.O.oasis_digest;
+        oasis_exec =       setup_t.O.oasis_exec;
+        oasis_setup_args = setup_t.O.oasis_setup_args;
+        setup_update =     setup_t.O.setup_update;
+      }
+  end
+
+
+  module Compat_0_3 =
+  struct
+    include Compat_0_4
+  end
+
+end
+
 
-# 5432 "setup.ml"
+# 6133 "setup.ml"
 module InternalConfigurePlugin = struct
 # 22 "src/plugins/internal/InternalConfigurePlugin.ml"
 
@@ -5467,9 +6192,9 @@
 
 
   (** Configure build using provided series of check to be done
-    * and then output corresponding file.
+      and then output corresponding file.
     *)
-  let configure pkg argv =
+  let configure ~ctxt:_ pkg argv =
     let var_ignore_eval var = let _s: string = var () in () in
     let errors = ref SetString.empty in
     let buff = Buffer.create 13 in
@@ -5503,8 +6228,8 @@
                (* Check that matching tool is built *)
                List.iter
                  (function
-                    | Executable ({cs_name = nm2},
-                                  {bs_build = build},
+                | Executable ({cs_name = nm2; _},
+                              {bs_build = build; _},
                                   _) when nm1 = nm2 ->
                          if not (var_choose build) then
                            add_errors
@@ -5559,8 +6284,8 @@
                    (* Check that matching library is built *)
                    List.iter
                      (function
-                        | Library ({cs_name = nm2},
-                                   {bs_build = build},
+                    | Library ({cs_name = nm2; _},
+                               {bs_build = build; _},
                                    _) when nm1 = nm2 ->
                              if not (var_choose build) then
                                add_errors
@@ -5624,7 +6349,7 @@
     begin
       let ocaml_ge4 =
         OASISVersion.version_compare
-          (OASISVersion.version_of_string (BaseStandardVar.ocaml_version()))
+          (OASISVersion.version_of_string (BaseStandardVar.ocaml_version ()))
           (OASISVersion.version_of_string "4.0.0") >= 0 in
       if ocaml_ge4 then
         let findlib_lt132 =
@@ -5663,7 +6388,7 @@
       pkg.sections;
 
     (* Check if we need native dynlink (presence of libraries that compile to
-     * native)
+       native)
      *)
     begin
       let has_cmxa =
@@ -5708,6 +6433,8 @@
     *)
 
 
+  (* TODO: rewrite this module with OASISFileSystem. *)
+
   open BaseEnv
   open BaseStandardVar
   open BaseMessage
@@ -5717,39 +6444,31 @@
   open OASISUtils
 
 
-  let exec_hook =
-    ref (fun (cs, bs, exec) -> cs, bs, exec)
-
-
-  let lib_hook =
-    ref (fun (cs, bs, lib) -> cs, bs, lib, [])
-
-
-  let obj_hook =
-    ref (fun (cs, bs, obj) -> cs, bs, obj, [])
-
-
-  let doc_hook =
-    ref (fun (cs, doc) -> cs, doc)
-
-
-  let install_file_ev =
-    "install-file"
-
-
-  let install_dir_ev =
-    "install-dir"
-
-
-  let install_findlib_ev =
-    "install-findlib"
-
-
-  let win32_max_command_line_length = 8000
+  let exec_hook = ref (fun (cs, bs, exec) -> cs, bs, exec)
+  let lib_hook  = ref (fun (cs, bs, dn, lib) -> cs, bs, dn, lib, [])
+  let obj_hook  = ref (fun (cs, bs, dn, obj) -> cs, bs, dn, obj, [])
+  let doc_hook  = ref (fun (cs, doc) -> cs, doc)
+
+  let install_file_ev    = "install-file"
+  let install_dir_ev     = "install-dir"
+  let install_findlib_ev = "install-findlib"
 
 
   let split_install_command ocamlfind findlib_name meta files =
-    if Sys.os_type = "Win32" then
+    if Sys.os_type <> "Win32" then
+      ["install" :: findlib_name :: meta :: files]
+    else
+      let f s =
+        OASISHostPath.quote ( OASISHostPath.of_unix s )
+      in
+      let files = List.map f files in
+      let meta = f meta  in
+      let win32_max_command_line_length =
+        if OASISHostPath.use_bash () = false then
+          7900
+        else
+          30000
+      in
       (* Arguments for the first command: *)
       let first_args = ["install"; findlib_name; meta] in
       (* Arguments for remaining commands: *)
@@ -5807,13 +6526,14 @@
                     let cmds = split other_args others in
                     cmd :: cmds
       in
+      if files = [] then
+        [ first_args ]
+      else
       (* The first command does not use -add: *)
       split first_args files
-    else
-      ["install" :: findlib_name :: meta :: files]
 
 
-  let install pkg argv =
+  let install =
 
     let in_destdir =
       try
@@ -5828,9 +6548,9 @@
         fun fn -> fn
     in
 
-    let install_file ?tgt_fn src_file envdir =
+    let install_file ~ctxt ?(prepend_destdir=true) ?tgt_fn src_file envdir =
       let tgt_dir =
-        in_destdir (envdir ())
+        if prepend_destdir then in_destdir (envdir ()) else envdir ()
       in
       let tgt_file =
         Filename.concat
@@ -5843,20 +6563,48 @@
       in
         (* Create target directory if needed *)
         OASISFileUtil.mkdir_parent
-          ~ctxt:!BaseContext.default
+          ~ctxt
           (fun dn ->
              info (f_ "Creating directory '%s'") dn;
-             BaseLog.register install_dir_ev dn)
-          tgt_dir;
+             BaseLog.register ~ctxt install_dir_ev dn)
+          (Filename.dirname tgt_file);
 
         (* Really install files *)
         info (f_ "Copying file '%s' to '%s'") src_file tgt_file;
-        OASISFileUtil.cp ~ctxt:!BaseContext.default src_file tgt_file;
-        BaseLog.register install_file_ev tgt_file
+        OASISFileUtil.cp ~ctxt src_file tgt_file;
+        BaseLog.register ~ctxt install_file_ev tgt_file
+    in
+
+    (* Install the files for a library. *)
+
+    let install_lib_files ~ctxt findlib_name files =
+      let findlib_dir =
+        let dn =
+          let findlib_destdir =
+            OASISExec.run_read_one_line ~ctxt (ocamlfind ())
+              ["printconf" ; "destdir"]
+          in
+          Filename.concat findlib_destdir findlib_name
+        in
+        fun () -> dn
+      in
+      let () =
+        if not (OASISFileUtil.file_exists_case (findlib_dir ())) then
+          failwithf
+            (f_ "Directory '%s' doesn't exist for findlib library %s")
+            (findlib_dir ()) findlib_name
+      in
+      let f dir file =
+        let basename = Filename.basename file in
+        let tgt_fn = Filename.concat dir basename in
+        (* Destdir is already include in printconf. *)
+        install_file ~ctxt ~prepend_destdir:false ~tgt_fn file findlib_dir
+      in
+      List.iter (fun (dir, files) -> List.iter (f dir) files) files ;
     in
 
     (* Install data into defined directory *)
-    let install_data srcdir lst tgtdir =
+    let install_data ~ctxt srcdir lst tgtdir =
       let tgtdir =
         OASISHostPath.of_unix (var_expand tgtdir)
       in
@@ -5873,7 +6621,7 @@
                    src;
                List.iter
                  (fun fn ->
-                    install_file
+                    install_file ~ctxt
                       fn
                       (fun () ->
                          match tgt_opt with
@@ -5895,66 +6643,99 @@
         sufx
         []
     in
-
-    (** Install all libraries *)
-    let install_libs pkg =
-
-      let files_of_library (f_data, acc) data_lib =
-        let cs, bs, lib, lib_extra =
-          !lib_hook data_lib
-        in
-          if var_choose bs.bs_install &&
-             BaseBuilt.is_built BaseBuilt.BLib cs.cs_name then
-            begin
-              let acc =
-                (* Start with acc + lib_extra *)
-                List.rev_append lib_extra acc
-              in
-              let acc =
-                (* Add uncompiled header from the source tree *)
-                let path =
-                  OASISHostPath.of_unix bs.bs_path
+
+    (** Install all libraries *)
+    let install_libs ~ctxt pkg =
+
+      let find_first_existing_files_in_path bs lst =
+        let path = OASISHostPath.of_unix bs.bs_path in
+        List.find
+          OASISFileUtil.file_exists_case
+          (List.map (Filename.concat path) lst)
                 in
+
+      let files_of_modules new_files typ cs bs modules =
                   List.fold_left
-                    begin fun acc modul ->
+          (fun acc modul ->
                       begin
                         try
-                          [List.find
-                            OASISFileUtil.file_exists_case
-                            (List.map
-                               (Filename.concat path)
-                               (make_fnames modul [".mli"; ".ml"]))]
+                 (* Add uncompiled header from the source tree *)
+                 [find_first_existing_files_in_path
+                    bs (make_fnames modul [".mli"; ".ml"])]
                         with Not_found ->
                           warning
                             (f_ "Cannot find source header for module %s \
-                                 in library %s")
-                            modul cs.cs_name;
+                        in %s %s")
+                   typ modul cs.cs_name;
                           []
                       end
                       @
-                      List.filter
-                        OASISFileUtil.file_exists_case
-                        (List.map
-                           (Filename.concat path)
-                           (make_fnames modul [".annot";".cmti";".cmt"]))
-                      @ acc
-                    end
-                    acc
-                    lib.lib_modules
+             List.fold_left
+               (fun acc fn ->
+                  try
+                    find_first_existing_files_in_path bs [fn] :: acc
+                  with Not_found ->
+                    acc)
+               acc (make_fnames modul [".annot";".cmti";".cmt"]))
+          new_files
+          modules
               in
 
-              let acc =
+      let files_of_build_section (f_data, new_files) typ cs bs =
+        let extra_files =
+          List.map
+            (fun fn ->
+               try
+                 find_first_existing_files_in_path bs [fn]
+               with Not_found ->
+                 failwithf
+                   (f_ "Cannot find extra findlib file %S in %s %s ")
+                   fn
+                   typ
+                   cs.cs_name)
+            bs.bs_findlib_extra_files
+        in
+        let f_data () =
+          (* Install data associated with the library *)
+          install_data
+            ~ctxt
+            bs.bs_path
+            bs.bs_data_files
+            (Filename.concat
+               (datarootdir ())
+               pkg.name);
+          f_data ()
+        in
+        f_data, new_files @ extra_files
+      in
+
+      let files_of_library (f_data, acc) data_lib =
+        let cs, bs, lib, dn, lib_extra = !lib_hook data_lib in
+        if var_choose bs.bs_install &&
+           BaseBuilt.is_built ~ctxt BaseBuilt.BLib cs.cs_name then begin
+          (* Start with lib_extra *)
+          let new_files = lib_extra in
+          let new_files =
+            files_of_modules new_files "library" cs bs lib.lib_modules
+          in
+          let f_data, new_files =
+            files_of_build_section (f_data, new_files) "library" cs bs
+          in
+          let new_files =
                (* Get generated files *)
                BaseBuilt.fold
+              ~ctxt
                  BaseBuilt.BLib
                  cs.cs_name
                  (fun acc fn -> fn :: acc)
-                 acc
+              new_files
               in
+          let acc = (dn, new_files) :: acc in
 
               let f_data () =
                 (* Install data associated with the library *)
                 install_data
+              ~ctxt
                   bs.bs_path
                   bs.bs_data_files
                   (Filename.concat
@@ -5964,82 +6745,46 @@
               in
 
                 (f_data, acc)
-            end
-           else
-            begin
+        end else begin
               (f_data, acc)
             end
       and files_of_object (f_data, acc) data_obj =
-        let cs, bs, obj, obj_extra =
-          !obj_hook data_obj
-        in
+        let cs, bs, obj, dn, obj_extra = !obj_hook data_obj in
           if var_choose bs.bs_install &&
-             BaseBuilt.is_built BaseBuilt.BObj cs.cs_name then
-            begin
-              let acc =
-                (* Start with acc + obj_extra *)
-                List.rev_append obj_extra acc
-              in
-              let acc =
-                (* Add uncompiled header from the source tree *)
-                let path =
-                  OASISHostPath.of_unix bs.bs_path
+           BaseBuilt.is_built ~ctxt BaseBuilt.BObj cs.cs_name then begin
+          (* Start with obj_extra *)
+          let new_files = obj_extra in
+          let new_files =
+            files_of_modules new_files "object" cs bs obj.obj_modules
                 in
-                  List.fold_left
-                    begin fun acc modul ->
-                      begin
-                        try
-                          [List.find
-                             OASISFileUtil.file_exists_case
-                             (List.map
-                                (Filename.concat path)
-                                (make_fnames modul [".mli"; ".ml"]))]
-                        with Not_found ->
-                          warning
-                            (f_ "Cannot find source header for module %s \
-                                 in object %s")
-                            modul cs.cs_name;
-                          []
-                      end
-                      @
-                      List.filter
-                        OASISFileUtil.file_exists_case
-                        (List.map
-                           (Filename.concat path)
-                           (make_fnames modul [".annot";".cmti";".cmt"]))
-                      @ acc
-                    end
-                    acc
-                    obj.obj_modules
+          let f_data, new_files =
+            files_of_build_section (f_data, new_files) "object" cs bs
               in
 
-              let acc =
+          let new_files =
                (* Get generated files *)
                BaseBuilt.fold
+              ~ctxt
                  BaseBuilt.BObj
                  cs.cs_name
                  (fun acc fn -> fn :: acc)
-                 acc
+              new_files
               in
+          let acc = (dn, new_files) :: acc in
 
               let f_data () =
                 (* Install data associated with the object *)
                 install_data
+              ~ctxt
                   bs.bs_path
                   bs.bs_data_files
-                  (Filename.concat
-                     (datarootdir ())
-                     pkg.name);
+              (Filename.concat (datarootdir ()) pkg.name);
                 f_data ()
               in
-
                 (f_data, acc)
-            end
-           else
-            begin
+        end else begin
               (f_data, acc)
             end
-
       in
 
       (* Install one group of library *)
@@ -6050,10 +6795,10 @@
             match grp with
               | Container (_, children) ->
                   data_and_files, children
-              | Package (_, cs, bs, `Library lib, children) ->
-                  files_of_library data_and_files (cs, bs, lib), children
-              | Package (_, cs, bs, `Object obj, children) ->
-                  files_of_object data_and_files (cs, bs, obj), children
+              | Package (_, cs, bs, `Library lib, dn, children) ->
+                  files_of_library data_and_files (cs, bs, lib, dn), children
+              | Package (_, cs, bs, `Object obj, dn, children) ->
+                  files_of_object data_and_files (cs, bs, obj, dn), children
           in
             List.fold_left
               install_group_lib_aux
@@ -6062,37 +6807,23 @@
         in
 
         (* Findlib name of the root library *)
-        let findlib_name =
-          findlib_of_group grp
-        in
+        let findlib_name = findlib_of_group grp in
 
         (* Determine root library *)
-        let root_lib =
-          root_of_group grp
-        in
+        let root_lib = root_of_group grp in
 
         (* All files to install for this library *)
-        let f_data, files =
-          install_group_lib_aux (ignore, []) grp
-        in
+        let f_data, files = install_group_lib_aux (ignore, []) grp in
 
           (* Really install, if there is something to install *)
-          if files = [] then
-            begin
+        if files = [] then begin
               warning
-                (f_ "Nothing to install for findlib library '%s'")
-                findlib_name
-            end
-          else
-            begin
+            (f_ "Nothing to install for findlib library '%s'") findlib_name
+        end else begin
               let meta =
                 (* Search META file *)
-                let _, bs, _ =
-                  root_lib
-                in
-                let res =
-                  Filename.concat bs.bs_path "META"
-                in
+            let _, bs, _ = root_lib in
+            let res = Filename.concat bs.bs_path "META" in
                   if not (OASISFileUtil.file_exists_case res) then
                     failwithf
                       (f_ "Cannot find file '%s' for findlib library %s")
@@ -6104,45 +6835,42 @@
                 (* Make filename shorter to avoid hitting command max line length
                  * too early, esp. on Windows.
                  *)
+            (* TODO: move to OASISHostPath as make_relative. *)
                 let remove_prefix p n =
                   let plen = String.length p in
                   let nlen = String.length n in
-                    if plen <= nlen && String.sub n 0 plen = p then
-                      begin
-                        let fn_sep =
-                          if Sys.os_type = "Win32" then
-                            '\\'
-                          else
-                            '/'
-                        in
-                        let cutpoint = plen +
-                          (if plen < nlen && n.[plen] = fn_sep then
-                             1
-                           else
-                             0)
+              if plen <= nlen && String.sub n 0 plen = p then begin
+                let fn_sep = if Sys.os_type = "Win32" then '\\' else '/' in
+                let cutpoint =
+                  plen +
+                  (if plen < nlen && n.[plen] = fn_sep then 1 else 0)
                         in
                           String.sub n cutpoint (nlen - cutpoint)
-                      end
-                    else
+              end else begin
                       n
+              end
                 in
-                  List.map (remove_prefix (Sys.getcwd ())) files
+            List.map
+              (fun (dir, fn) ->
+                 (dir, List.map (remove_prefix (Sys.getcwd ())) fn))
+              files
               in
-                info
-                  (f_ "Installing findlib library '%s'")
-                  findlib_name;
                 let ocamlfind = ocamlfind () in
-                let commands =
-                  split_install_command
-                    ocamlfind
-                    findlib_name
-                    meta
-                    files
+          let nodir_files, dir_files =
+            List.fold_left
+              (fun (nodir, dir) (dn, lst) ->
+                 match dn with
+                 | Some dn -> nodir, (dn, lst) :: dir
+                 | None -> lst @ nodir, dir)
+              ([], [])
+              (List.rev files)
                 in
+          info (f_ "Installing findlib library '%s'") findlib_name;
                 List.iter
-                  (OASISExec.run ~ctxt:!BaseContext.default ocamlfind)
-                  commands;
-                BaseLog.register install_findlib_ev findlib_name
+            (OASISExec.run ~ctxt ocamlfind)
+            (split_install_command ocamlfind findlib_name meta nodir_files);
+          install_lib_files ~ctxt findlib_name dir_files;
+          BaseLog.register ~ctxt install_findlib_ev findlib_name
             end;
 
           (* Install data files *)
@@ -6147,84 +6875,62 @@
 
           (* Install data files *)
           f_data ();
-
       in
 
-      let group_libs, _, _ =
-        findlib_mapping pkg
-      in
+      let group_libs, _, _ = findlib_mapping pkg in
 
         (* We install libraries in groups *)
         List.iter install_group_lib group_libs
     in
 
-    let install_execs pkg =
+    let install_execs ~ctxt pkg =
       let install_exec data_exec =
-        let cs, bs, exec =
-          !exec_hook data_exec
-        in
+        let cs, bs, _ = !exec_hook data_exec in
           if var_choose bs.bs_install &&
-             BaseBuilt.is_built BaseBuilt.BExec cs.cs_name then
-            begin
-              let exec_libdir () =
-                Filename.concat
-                  (libdir ())
-                  pkg.name
-              in
+           BaseBuilt.is_built ~ctxt BaseBuilt.BExec cs.cs_name then begin
+          let exec_libdir () = Filename.concat (libdir ()) pkg.name in
                 BaseBuilt.fold
+            ~ctxt
                   BaseBuilt.BExec
                   cs.cs_name
                   (fun () fn ->
-                     install_file
+               install_file ~ctxt
                        ~tgt_fn:(cs.cs_name ^ ext_program ())
                        fn
                        bindir)
                   ();
                 BaseBuilt.fold
+            ~ctxt
                   BaseBuilt.BExecLib
                   cs.cs_name
-                  (fun () fn ->
-                     install_file
-                       fn
-                       exec_libdir)
+            (fun () fn -> install_file ~ctxt fn exec_libdir)
                   ();
-                install_data
+          install_data ~ctxt
                   bs.bs_path
                   bs.bs_data_files
-                  (Filename.concat
-                     (datarootdir ())
-                     pkg.name)
+            (Filename.concat (datarootdir ()) pkg.name)
             end
       in
         List.iter
           (function
-             | Executable (cs, bs, exec)->
-                 install_exec (cs, bs, exec)
-             | _ ->
-                 ())
+          | Executable (cs, bs, exec)-> install_exec (cs, bs, exec)
+          | _ -> ())
           pkg.sections
     in
 
-    let install_docs pkg =
+    let install_docs ~ctxt pkg =
       let install_doc data =
-        let cs, doc =
-          !doc_hook data
-        in
+        let cs, doc = !doc_hook data in
           if var_choose doc.doc_install &&
-             BaseBuilt.is_built BaseBuilt.BDoc cs.cs_name then
-            begin
-              let tgt_dir =
-                OASISHostPath.of_unix (var_expand doc.doc_install_dir)
-              in
+           BaseBuilt.is_built ~ctxt BaseBuilt.BDoc cs.cs_name then begin
+          let tgt_dir = OASISHostPath.of_unix (var_expand doc.doc_install_dir) in
                 BaseBuilt.fold
+            ~ctxt
                   BaseBuilt.BDoc
                   cs.cs_name
-                  (fun () fn ->
-                     install_file
-                       fn
-                       (fun () -> tgt_dir))
+            (fun () fn -> install_file ~ctxt fn (fun () -> tgt_dir))
                 ();
-                install_data
+          install_data ~ctxt
                   Filename.current_dir_name
                   doc.doc_data_files
                   doc.doc_install_dir
@@ -6232,88 +6938,59 @@
       in
         List.iter
           (function
-             | Doc (cs, doc) ->
-                 install_doc (cs, doc)
-             | _ ->
-                 ())
+          | Doc (cs, doc) -> install_doc (cs, doc)
+          | _ -> ())
           pkg.sections
     in
-
-      install_libs  pkg;
-      install_execs pkg;
-      install_docs  pkg
+    fun ~ctxt pkg _ ->
+      install_libs ~ctxt pkg;
+      install_execs ~ctxt pkg;
+      install_docs ~ctxt pkg
 
 
   (* Uninstall already installed data *)
-  let uninstall _ argv =
-    List.iter
-      (fun (ev, data) ->
-         if ev = install_file_ev then
-           begin
-             if OASISFileUtil.file_exists_case data then
-               begin
-                 info
-                   (f_ "Removing file '%s'")
-                   data;
+  let uninstall ~ctxt _ _ =
+    let uninstall_aux (ev, data) =
+      if ev = install_file_ev then begin
+        if OASISFileUtil.file_exists_case data then begin
+          info (f_ "Removing file '%s'") data;
                  Sys.remove data
+        end else begin
+          warning (f_ "File '%s' doesn't exist anymore") data
                end
-             else
-               begin
-                 warning
-                   (f_ "File '%s' doesn't exist anymore")
-                   data
-               end
-           end
-         else if ev = install_dir_ev then
-           begin
-             if Sys.file_exists data && Sys.is_directory data then
-               begin
-                 if Sys.readdir data = [||] then
-                   begin
-                     info
-                       (f_ "Removing directory '%s'")
-                       data;
-                     OASISFileUtil.rmdir ~ctxt:!BaseContext.default data
-                   end
-                 else
-                   begin
+      end else if ev = install_dir_ev then begin
+        if Sys.file_exists data && Sys.is_directory data then begin
+          if Sys.readdir data = [||] then begin
+            info (f_ "Removing directory '%s'") data;
+            OASISFileUtil.rmdir ~ctxt data
+          end else begin
                      warning
                        (f_ "Directory '%s' is not empty (%s)")
                        data
-                       (String.concat
-                          ", "
-                          (Array.to_list
-                             (Sys.readdir data)))
-                   end
-               end
-             else
-               begin
-                 warning
-                   (f_ "Directory '%s' doesn't exist anymore")
-                   data
+              (String.concat ", " (Array.to_list (Sys.readdir data)))
                end
+        end else begin
+          warning (f_ "Directory '%s' doesn't exist anymore") data
            end
-         else if ev = install_findlib_ev then
-           begin
+      end else if ev = install_findlib_ev then begin
              info (f_ "Removing findlib library '%s'") data;
-             OASISExec.run ~ctxt:!BaseContext.default
-               (ocamlfind ()) ["remove"; data]
-           end
-         else
+        OASISExec.run ~ctxt (ocamlfind ()) ["remove"; data]
+      end else begin
            failwithf (f_ "Unknown log event '%s'") ev;
-         BaseLog.unregister ev data)
+      end;
+      BaseLog.unregister ~ctxt ev data
+    in
       (* We process event in reverse order *)
+    List.iter uninstall_aux
       (List.rev
-         (BaseLog.filter
-            [install_file_ev;
-             install_dir_ev;
-             install_findlib_ev]))
-
+         (BaseLog.filter ~ctxt [install_file_ev; install_dir_ev]));
+    List.iter uninstall_aux
+      (List.rev (BaseLog.filter ~ctxt [install_findlib_ev]))
 
 end
 
 
-# 6296 "setup.ml"
+# 6949 "setup.ml"
 module OCamlbuildCommon = struct
 # 22 "src/plugins/ocamlbuild/OCamlbuildCommon.ml"
 
@@ -6352,6 +7029,14 @@
             "-classic-display";
             "-no-log";
             "-no-links";
+          ]
+        else
+          [];
+
+        if OASISVersion.comparator_apply
+            (OASISVersion.version_of_string (ocaml_version ()))
+            (OASISVersion.VLesser (OASISVersion.version_of_string "3.11.1")) then
+          [
             "-install-lib-dir";
             (Filename.concat (standard_library ()) "ocamlbuild")
           ]
@@ -6388,35 +7073,32 @@
 
 
   (** Run 'ocamlbuild -clean' if not already done *)
-  let run_clean extra_argv =
+  let run_clean ~ctxt extra_argv =
     let extra_cli =
       String.concat " " (Array.to_list extra_argv)
     in
       (* Run if never called with these args *)
-      if not (BaseLog.exists ocamlbuild_clean_ev extra_cli) then
+    if not (BaseLog.exists ~ctxt ocamlbuild_clean_ev extra_cli) then
         begin
-          OASISExec.run ~ctxt:!BaseContext.default
-            (ocamlbuild ()) (fix_args ["-clean"] extra_argv);
-          BaseLog.register ocamlbuild_clean_ev extra_cli;
+        OASISExec.run ~ctxt (ocamlbuild ()) (fix_args ["-clean"] extra_argv);
+        BaseLog.register ~ctxt ocamlbuild_clean_ev extra_cli;
           at_exit
             (fun () ->
                try
-                 BaseLog.unregister ocamlbuild_clean_ev extra_cli
-               with _ ->
-                 ())
+               BaseLog.unregister ~ctxt ocamlbuild_clean_ev extra_cli
+             with _ -> ())
         end
 
 
   (** Run ocamlbuild, unregister all clean events *)
-  let run_ocamlbuild args extra_argv =
+  let run_ocamlbuild ~ctxt args extra_argv =
     (* TODO: enforce that target in args must be UNIX encoded i.e. toto/index.html
      *)
-    OASISExec.run ~ctxt:!BaseContext.default
-      (ocamlbuild ()) (fix_args args extra_argv);
+    OASISExec.run ~ctxt (ocamlbuild ()) (fix_args args extra_argv);
     (* Remove any clean event, we must run it again *)
     List.iter
-      (fun (e, d) -> BaseLog.unregister e d)
-      (BaseLog.filter [ocamlbuild_clean_ev])
+      (fun (e, d) -> BaseLog.unregister ~ctxt e d)
+      (BaseLog.filter ~ctxt [ocamlbuild_clean_ev])
 
 
   (** Determine real build directory *)
@@ -6451,17 +7133,12 @@
   open BaseEnv
   open OCamlbuildCommon
   open BaseStandardVar
-  open BaseMessage
-
 
 
+  let cond_targets_hook = ref (fun lst -> lst)
 
 
-  let cond_targets_hook =
-    ref (fun lst -> lst)
-
-
-  let build extra_args pkg argv =
+  let build ~ctxt extra_args pkg argv =
     (* Return the filename in build directory *)
     let in_build_dir fn =
       Filename.concat
@@ -6525,8 +7202,8 @@
                           (List.map
                              (List.filter
                                 (fun fn ->
-                                 ends_with ".cmo" fn
-                                 || ends_with ".cmx" fn))
+                                 ends_with ~what:".cmo" fn
+                                 || ends_with ~what:".cmx" fn))
                              unix_files))
                    in
 
@@ -6541,10 +7218,8 @@
 
              | Executable (cs, bs, exec) when var_choose bs.bs_build ->
                  begin
-                   let evs, unix_exec_is, unix_dll_opt =
-                     BaseBuilt.of_executable
-                       in_build_dir_of_unix
-                       (cs, bs, exec)
+                   let evs, _, _ =
+                     BaseBuilt.of_executable in_build_dir_of_unix (cs, bs, exec)
                    in
 
                    let target ext =
@@ -6558,7 +7233,7 @@
                        (* Fix evs, we want to use the unix_tgt, without copying *)
                        List.map
                          (function
-                            | BaseBuilt.BExec, nm, lst when nm = cs.cs_name ->
+                            | BaseBuilt.BExec, nm, _ when nm = cs.cs_name ->
                                 BaseBuilt.BExec, nm,
                                 [[in_build_dir_of_unix unix_tgt]]
                             | ev ->
@@ -6602,27 +7277,30 @@
                   (List.length fns))
                (String.concat (s_ " or ") (List.map (Printf.sprintf "'%s'") fns)))
         lst;
-        (BaseBuilt.register bt bnm lst)
+        (BaseBuilt.register ~ctxt bt bnm lst)
     in
 
     (* Run the hook *)
     let cond_targets = !cond_targets_hook cond_targets in
 
     (* Run a list of target... *)
-    run_ocamlbuild (List.flatten (List.map snd cond_targets) @ extra_args) argv;
+    run_ocamlbuild
+      ~ctxt
+      (List.flatten (List.map snd cond_targets) @ extra_args)
+      argv;
     (* ... and register events *)
     List.iter check_and_register (List.flatten (List.map fst cond_targets))
 
 
-  let clean pkg extra_args  =
-    run_clean extra_args;
+  let clean ~ctxt pkg extra_args  =
+    run_clean ~ctxt extra_args;
     List.iter
       (function
          | Library (cs, _, _) ->
-             BaseBuilt.unregister BaseBuilt.BLib cs.cs_name
+             BaseBuilt.unregister ~ctxt BaseBuilt.BLib cs.cs_name
          | Executable (cs, _, _) ->
-             BaseBuilt.unregister BaseBuilt.BExec cs.cs_name;
-             BaseBuilt.unregister BaseBuilt.BExecLib cs.cs_name
+             BaseBuilt.unregister ~ctxt BaseBuilt.BExec cs.cs_name;
+             BaseBuilt.unregister ~ctxt BaseBuilt.BExecLib cs.cs_name
          | _ ->
              ())
       pkg.sections
@@ -6641,11 +7319,7 @@
 
   open OASISTypes
   open OASISGettext
-  open OASISMessage
   open OCamlbuildCommon
-  open BaseStandardVar
-
-
 
 
   type run_t =
@@ -6655,7 +7329,7 @@
     }
 
 
-  let doc_build run pkg (cs, doc) argv =
+  let doc_build ~ctxt run _ (cs, _) argv =
     let index_html =
       OASISUnixPath.make
         [
@@ -6672,26 +7346,26 @@
           cs.cs_name^".docdir";
         ]
     in
-      run_ocamlbuild (index_html :: run.extra_args) argv;
+    run_ocamlbuild ~ctxt (index_html :: run.extra_args) argv;
       List.iter
         (fun glb ->
            BaseBuilt.register
+           ~ctxt
              BaseBuilt.BDoc
              cs.cs_name
-             [OASISFileUtil.glob ~ctxt:!BaseContext.default
-                (Filename.concat tgt_dir glb)])
+           [OASISFileUtil.glob ~ctxt (Filename.concat tgt_dir glb)])
         ["*.html"; "*.css"]
 
 
-  let doc_clean run pkg (cs, doc) argv =
-    run_clean argv;
-    BaseBuilt.unregister BaseBuilt.BDoc cs.cs_name
+  let doc_clean ~ctxt _ _ (cs, _) argv =
+    run_clean ~ctxt argv;
+    BaseBuilt.unregister ~ctxt BaseBuilt.BDoc cs.cs_name
 
 
 end
 
 
-# 6674 "setup.ml"
+# 7322 "setup.ml"
 module CustomPlugin = struct
 # 22 "src/plugins/custom/CustomPlugin.ml"
 
@@ -6720,35 +7394,27 @@
   let run  = BaseCustom.run
 
 
-  let main t _ extra_args =
-    let cmd, args =
-      var_choose
-        ~name:(s_ "main command")
-        t.cmd_main
-    in
+  let main ~ctxt:_ t _ extra_args =
+    let cmd, args = var_choose ~name:(s_ "main command") t.cmd_main in
       run cmd args extra_args
 
 
-  let clean t pkg extra_args =
+  let clean ~ctxt:_ t _ extra_args =
     match var_choose t.cmd_clean with
-      | Some (cmd, args) ->
-          run cmd args extra_args
-      | _ ->
-          ()
+    | Some (cmd, args) -> run cmd args extra_args
+    | _ -> ()
 
 
-  let distclean t pkg extra_args =
+  let distclean ~ctxt:_ t _ extra_args =
     match var_choose t.cmd_distclean with
-      | Some (cmd, args) ->
-          run cmd args extra_args
-      | _ ->
-          ()
+    | Some (cmd, args) -> run cmd args extra_args
+    | _ -> ()
 
 
   module Build =
   struct
-    let main t pkg extra_args =
-      main t pkg extra_args;
+    let main ~ctxt t pkg extra_args =
+      main ~ctxt t pkg extra_args;
       List.iter
         (fun sct ->
            let evs =
@@ -6775,36 +7441,35 @@
                    []
            in
              List.iter
-               (fun (bt, bnm, lst) -> BaseBuilt.register bt bnm lst)
+             (fun (bt, bnm, lst) -> BaseBuilt.register ~ctxt bt bnm lst)
                evs)
         pkg.sections
 
-    let clean t pkg extra_args =
-      clean t pkg extra_args;
+    let clean ~ctxt t pkg extra_args =
+      clean ~ctxt t pkg extra_args;
       (* TODO: this seems to be pretty generic (at least wrt to ocamlbuild
        * considering moving this to BaseSetup?
        *)
       List.iter
         (function
            | Library (cs, _, _) ->
-               BaseBuilt.unregister BaseBuilt.BLib cs.cs_name
+            BaseBuilt.unregister ~ctxt BaseBuilt.BLib cs.cs_name
            | Executable (cs, _, _) ->
-               BaseBuilt.unregister BaseBuilt.BExec cs.cs_name;
-               BaseBuilt.unregister BaseBuilt.BExecLib cs.cs_name
+            BaseBuilt.unregister ~ctxt BaseBuilt.BExec cs.cs_name;
+            BaseBuilt.unregister ~ctxt BaseBuilt.BExecLib cs.cs_name
            | _ ->
                ())
         pkg.sections
 
-    let distclean t pkg extra_args =
-      distclean t pkg extra_args
+    let distclean ~ctxt t pkg extra_args = distclean ~ctxt t pkg extra_args
   end
 
 
   module Test =
   struct
-    let main t pkg (cs, test) extra_args =
+    let main ~ctxt t pkg (cs, _) extra_args =
       try
-        main t pkg extra_args;
+        main ~ctxt t pkg extra_args;
         0.0
       with Failure s ->
         BaseMessage.warning
@@ -6813,33 +7478,30 @@
           s;
         1.0
 
-    let clean t pkg (cs, test) extra_args =
-      clean t pkg extra_args
+    let clean ~ctxt t pkg _ extra_args = clean ~ctxt t pkg extra_args
 
-    let distclean t pkg (cs, test) extra_args =
-      distclean t pkg extra_args
+    let distclean ~ctxt t pkg _ extra_args = distclean ~ctxt t pkg extra_args
   end
 
 
   module Doc =
   struct
-    let main t pkg (cs, _) extra_args =
-      main t pkg extra_args;
-      BaseBuilt.register BaseBuilt.BDoc cs.cs_name []
+    let main ~ctxt t pkg (cs, _) extra_args =
+      main ~ctxt t pkg extra_args;
+      BaseBuilt.register ~ctxt BaseBuilt.BDoc cs.cs_name []
 
-    let clean t pkg (cs, _) extra_args =
-      clean t pkg extra_args;
-      BaseBuilt.unregister BaseBuilt.BDoc cs.cs_name
+    let clean ~ctxt t pkg (cs, _) extra_args =
+      clean ~ctxt t pkg extra_args;
+      BaseBuilt.unregister ~ctxt BaseBuilt.BDoc cs.cs_name
 
-    let distclean t pkg (cs, _) extra_args =
-      distclean t pkg extra_args
+    let distclean ~ctxt t pkg _ extra_args = distclean ~ctxt t pkg extra_args
   end
 
 
 end
 
 
-# 6822 "setup.ml"
+# 7454 "setup.ml"
 open OASISTypes;;
 
 let setup_t =
@@ -7049,10 +7711,6 @@
        {
           oasis_version = "0.3";
           ocaml_version = Some (OASISVersion.VGreaterEqual "3.12.1");
-          findlib_version = Some (OASISVersion.VGreaterEqual "1.3.1");
-          alpha_features = [];
-          beta_features = [];
-          name = "oasis";
           version = "0.4.7";
           license =
             OASISLicense.DEP5License
@@ -7062,11 +7720,16 @@
                     excption = Some "OCaml linking";
                     version = OASISLicense.Version "2.1"
                  });
+          findlib_version = Some (OASISVersion.VGreaterEqual "1.3.1");
+          alpha_features = [];
+          beta_features = [];
+          name = "oasis";
           license_file = Some "COPYING.txt";
           copyrights = ["(C) 2008-2010 OCamlCore SARL"];
           maintainers = ["Sylvain Le Gall <gildor@ocamlcore.org>"];
           authors = ["Sylvain Le Gall"];
           homepage = Some "http://oasis.forge.ocamlcore.org/";
+          bugreports = None;
           synopsis = "Tooling for building OCaml libraries and applications";
           description =
             Some
@@ -7082,44 +7745,12 @@
                  OASISText.Verbatim "* ocaml-autoconf (todo)";
                  OASISText.BlankLine;
                  OASISText.Para
-                   "It also features a do-it-yourself command line invocation and an internal configure/install scheme. Libraries are managed through findlib. It has been tested on GNU Linux and Windows.";
-                 OASISText.Para
-                   "It also allows to have standard entry points and description. It helps to integrates your libraries and software with third parties tools like GODI."
-              ];
-          categories = [];
-          conf_type = (`Configure, "internal", Some "0.4");
-          conf_custom =
-            {
-               pre_command = [(OASISExpr.EBool true, None)];
-               post_command = [(OASISExpr.EBool true, None)]
-            };
-          build_type = (`Build, "ocamlbuild", Some "0.3");
-          build_custom =
-            {
-               pre_command = [(OASISExpr.EBool true, None)];
-               post_command = [(OASISExpr.EBool true, None)]
-            };
-          install_type = (`Install, "internal", Some "0.4");
-          install_custom =
-            {
-               pre_command = [(OASISExpr.EBool true, None)];
-               post_command = [(OASISExpr.EBool true, None)]
-            };
-          uninstall_custom =
-            {
-               pre_command = [(OASISExpr.EBool true, None)];
-               post_command = [(OASISExpr.EBool true, None)]
-            };
-          clean_custom =
-            {
-               pre_command = [(OASISExpr.EBool true, None)];
-               post_command = [(OASISExpr.EBool true, None)]
-            };
-          distclean_custom =
-            {
-               pre_command = [(OASISExpr.EBool true, None)];
-               post_command = [(OASISExpr.EBool true, None)]
-            };
+                   "It also features a do-it-yourself command line invocation and an internal configure/install scheme. Libraries are managed through findlib. It has been tested on GNU Linux and Windows.";
+                 OASISText.Para
+                   "It also allows to have standard entry points and description. It helps to integrates your libraries and software with third parties tools like GODI."
+              ];
+          tags = [];
+          categories = [];
           files_ab = ["src/oasis/OASISConf.ml.ab"];
           sections =
             [
@@ -7171,8 +7802,119 @@
                            ExternalTool "ocamllex";
                            ExternalTool "ocamlify"
                         ];
+                      bs_interface_patterns =
+                        [
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("capitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".mli"
+                                ];
+                              origin = "${capitalize_file module}.mli"
+                           };
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("uncapitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".mli"
+                                ];
+                              origin = "${uncapitalize_file module}.mli"
+                           }
+                        ];
+                      bs_implementation_patterns =
+                        [
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("capitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".ml"
+                                ];
+                              origin = "${capitalize_file module}.ml"
+                           };
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("uncapitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".ml"
+                                ];
+                              origin = "${uncapitalize_file module}.ml"
+                           };
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("capitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".mll"
+                                ];
+                              origin = "${capitalize_file module}.mll"
+                           };
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("uncapitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".mll"
+                                ];
+                              origin = "${uncapitalize_file module}.mll"
+                           };
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("capitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".mly"
+                                ];
+                              origin = "${capitalize_file module}.mly"
+                           };
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("uncapitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".mly"
+                                ];
+                              origin = "${uncapitalize_file module}.mly"
+                           }
+                        ];
                       bs_c_sources = [];
                       bs_data_files = [];
+                      bs_findlib_extra_files = [];
                       bs_ccopt = [(OASISExpr.EBool true, [])];
                       bs_cclib = [(OASISExpr.EBool true, [])];
                       bs_dlllib = [(OASISExpr.EBool true, [])];
@@ -7259,6 +8001,7 @@
                         ];
                       lib_findlib_parent = None;
                       lib_findlib_name = None;
+                      lib_findlib_directory = None;
                       lib_findlib_containers = []
                    });
                Library
@@ -7284,8 +8027,119 @@
                            ExternalTool "ocamlmod";
                            ExternalTool "ocamlify"
                         ];
+                      bs_interface_patterns =
+                        [
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("capitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".mli"
+                                ];
+                              origin = "${capitalize_file module}.mli"
+                           };
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("uncapitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".mli"
+                                ];
+                              origin = "${uncapitalize_file module}.mli"
+                           }
+                        ];
+                      bs_implementation_patterns =
+                        [
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("capitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".ml"
+                                ];
+                              origin = "${capitalize_file module}.ml"
+                           };
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("uncapitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".ml"
+                                ];
+                              origin = "${uncapitalize_file module}.ml"
+                           };
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("capitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".mll"
+                                ];
+                              origin = "${capitalize_file module}.mll"
+                           };
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("uncapitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".mll"
+                                ];
+                              origin = "${uncapitalize_file module}.mll"
+                           };
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("capitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".mly"
+                                ];
+                              origin = "${capitalize_file module}.mly"
+                           };
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("uncapitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".mly"
+                                ];
+                              origin = "${uncapitalize_file module}.mly"
+                           }
+                        ];
                       bs_c_sources = [];
                       bs_data_files = [];
+                      bs_findlib_extra_files = [];
                       bs_ccopt = [(OASISExpr.EBool true, [])];
                       bs_cclib = [(OASISExpr.EBool true, [])];
                       bs_dlllib = [(OASISExpr.EBool true, [])];
@@ -7320,6 +8174,7 @@
                       lib_internal_modules = [];
                       lib_findlib_parent = Some "oasis";
                       lib_findlib_name = None;
+                      lib_findlib_directory = None;
                       lib_findlib_containers = []
                    });
                Library
@@ -7341,8 +8196,119 @@
                         ];
                       bs_build_tools =
                         [ExternalTool "ocamlbuild"; ExternalTool "make"];
+                      bs_interface_patterns =
+                        [
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("capitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".mli"
+                                ];
+                              origin = "${capitalize_file module}.mli"
+                           };
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("uncapitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".mli"
+                                ];
+                              origin = "${uncapitalize_file module}.mli"
+                           }
+                        ];
+                      bs_implementation_patterns =
+                        [
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("capitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".ml"
+                                ];
+                              origin = "${capitalize_file module}.ml"
+                           };
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("uncapitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".ml"
+                                ];
+                              origin = "${uncapitalize_file module}.ml"
+                           };
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("capitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".mll"
+                                ];
+                              origin = "${capitalize_file module}.mll"
+                           };
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("uncapitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".mll"
+                                ];
+                              origin = "${uncapitalize_file module}.mll"
+                           };
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("capitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".mly"
+                                ];
+                              origin = "${capitalize_file module}.mly"
+                           };
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("uncapitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".mly"
+                                ];
+                              origin = "${uncapitalize_file module}.mly"
+                           }
+                        ];
                       bs_c_sources = [];
                       bs_data_files = [];
+                      bs_findlib_extra_files = [];
                       bs_ccopt = [(OASISExpr.EBool true, [])];
                       bs_cclib = [(OASISExpr.EBool true, [])];
                       bs_dlllib = [(OASISExpr.EBool true, [])];
@@ -7387,6 +8353,7 @@
                         ];
                       lib_findlib_parent = Some "oasis";
                       lib_findlib_name = None;
+                      lib_findlib_directory = None;
                       lib_findlib_containers = []
                    });
                Library
@@ -7407,8 +8374,119 @@
                         ];
                       bs_build_tools =
                         [ExternalTool "ocamlbuild"; ExternalTool "make"];
+                      bs_interface_patterns =
+                        [
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("capitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".mli"
+                                ];
+                              origin = "${capitalize_file module}.mli"
+                           };
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("uncapitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".mli"
+                                ];
+                              origin = "${uncapitalize_file module}.mli"
+                           }
+                        ];
+                      bs_implementation_patterns =
+                        [
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("capitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".ml"
+                                ];
+                              origin = "${capitalize_file module}.ml"
+                           };
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("uncapitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".ml"
+                                ];
+                              origin = "${uncapitalize_file module}.ml"
+                           };
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("capitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".mll"
+                                ];
+                              origin = "${capitalize_file module}.mll"
+                           };
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("uncapitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".mll"
+                                ];
+                              origin = "${uncapitalize_file module}.mll"
+                           };
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("capitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".mly"
+                                ];
+                              origin = "${capitalize_file module}.mly"
+                           };
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("uncapitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".mly"
+                                ];
+                              origin = "${uncapitalize_file module}.mly"
+                           }
+                        ];
                       bs_c_sources = [];
                       bs_data_files = [];
+                      bs_findlib_extra_files = [];
                       bs_ccopt = [(OASISExpr.EBool true, [])];
                       bs_cclib = [(OASISExpr.EBool true, [])];
                       bs_dlllib = [(OASISExpr.EBool true, [])];
@@ -7422,6 +8500,7 @@
                       lib_internal_modules = [];
                       lib_findlib_parent = Some "oasis";
                       lib_findlib_name = None;
+                      lib_findlib_directory = None;
                       lib_findlib_containers = []
                    });
                Doc
@@ -7519,8 +8598,119 @@
                       bs_build_depends = [FindlibPackage ("unix", None)];
                       bs_build_tools =
                         [ExternalTool "ocamlbuild"; ExternalTool "make"];
+                      bs_interface_patterns =
+                        [
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("capitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".mli"
+                                ];
+                              origin = "${capitalize_file module}.mli"
+                           };
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("uncapitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".mli"
+                                ];
+                              origin = "${uncapitalize_file module}.mli"
+                           }
+                        ];
+                      bs_implementation_patterns =
+                        [
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("capitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".ml"
+                                ];
+                              origin = "${capitalize_file module}.ml"
+                           };
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("uncapitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".ml"
+                                ];
+                              origin = "${uncapitalize_file module}.ml"
+                           };
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("capitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".mll"
+                                ];
+                              origin = "${capitalize_file module}.mll"
+                           };
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("uncapitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".mll"
+                                ];
+                              origin = "${uncapitalize_file module}.mll"
+                           };
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("capitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".mly"
+                                ];
+                              origin = "${capitalize_file module}.mly"
+                           };
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("uncapitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".mly"
+                                ];
+                              origin = "${uncapitalize_file module}.mly"
+                           }
+                        ];
                       bs_c_sources = [];
                       bs_data_files = [];
+                      bs_findlib_extra_files = [];
                       bs_ccopt = [(OASISExpr.EBool true, [])];
                       bs_cclib = [(OASISExpr.EBool true, [])];
                       bs_dlllib = [(OASISExpr.EBool true, [])];
@@ -7563,8 +8753,119 @@
                         ];
                       bs_build_tools =
                         [ExternalTool "ocamlbuild"; ExternalTool "make"];
+                      bs_interface_patterns =
+                        [
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("capitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".mli"
+                                ];
+                              origin = "${capitalize_file module}.mli"
+                           };
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("uncapitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".mli"
+                                ];
+                              origin = "${uncapitalize_file module}.mli"
+                           }
+                        ];
+                      bs_implementation_patterns =
+                        [
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("capitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".ml"
+                                ];
+                              origin = "${capitalize_file module}.ml"
+                           };
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("uncapitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".ml"
+                                ];
+                              origin = "${uncapitalize_file module}.ml"
+                           };
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("capitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".mll"
+                                ];
+                              origin = "${capitalize_file module}.mll"
+                           };
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("uncapitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".mll"
+                                ];
+                              origin = "${uncapitalize_file module}.mll"
+                           };
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("capitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".mly"
+                                ];
+                              origin = "${capitalize_file module}.mly"
+                           };
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("uncapitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".mly"
+                                ];
+                              origin = "${uncapitalize_file module}.mly"
+                           }
+                        ];
                       bs_c_sources = [];
                       bs_data_files = [];
+                      bs_findlib_extra_files = [];
                       bs_ccopt = [(OASISExpr.EBool true, [])];
                       bs_cclib = [(OASISExpr.EBool true, [])];
                       bs_dlllib = [(OASISExpr.EBool true, [])];
@@ -7594,10 +8895,121 @@
                            FindlibPackage ("fileutils", None);
                            InternalLibrary "oasis"
                         ];
-                      bs_build_tools =
-                        [ExternalTool "ocamlbuild"; ExternalTool "make"];
+                      bs_build_tools =
+                        [ExternalTool "ocamlbuild"; ExternalTool "make"];
+                      bs_interface_patterns =
+                        [
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("capitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".mli"
+                                ];
+                              origin = "${capitalize_file module}.mli"
+                           };
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("uncapitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".mli"
+                                ];
+                              origin = "${uncapitalize_file module}.mli"
+                           }
+                        ];
+                      bs_implementation_patterns =
+                        [
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("capitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".ml"
+                                ];
+                              origin = "${capitalize_file module}.ml"
+                           };
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("uncapitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".ml"
+                                ];
+                              origin = "${uncapitalize_file module}.ml"
+                           };
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("capitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".mll"
+                                ];
+                              origin = "${capitalize_file module}.mll"
+                           };
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("uncapitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".mll"
+                                ];
+                              origin = "${uncapitalize_file module}.mll"
+                           };
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("capitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".mly"
+                                ];
+                              origin = "${capitalize_file module}.mly"
+                           };
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("uncapitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".mly"
+                                ];
+                              origin = "${uncapitalize_file module}.mly"
+                           }
+                        ];
                       bs_c_sources = [];
                       bs_data_files = [];
+                      bs_findlib_extra_files = [];
                       bs_ccopt = [(OASISExpr.EBool true, [])];
                       bs_cclib = [(OASISExpr.EBool true, [])];
                       bs_dlllib = [(OASISExpr.EBool true, [])];
@@ -7629,8 +9041,119 @@
                         ];
                       bs_build_tools =
                         [ExternalTool "ocamlbuild"; ExternalTool "make"];
+                      bs_interface_patterns =
+                        [
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("capitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".mli"
+                                ];
+                              origin = "${capitalize_file module}.mli"
+                           };
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("uncapitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".mli"
+                                ];
+                              origin = "${uncapitalize_file module}.mli"
+                           }
+                        ];
+                      bs_implementation_patterns =
+                        [
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("capitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".ml"
+                                ];
+                              origin = "${capitalize_file module}.ml"
+                           };
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("uncapitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".ml"
+                                ];
+                              origin = "${uncapitalize_file module}.ml"
+                           };
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("capitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".mll"
+                                ];
+                              origin = "${capitalize_file module}.mll"
+                           };
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("uncapitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".mll"
+                                ];
+                              origin = "${uncapitalize_file module}.mll"
+                           };
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("capitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".mly"
+                                ];
+                              origin = "${capitalize_file module}.mly"
+                           };
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("uncapitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".mly"
+                                ];
+                              origin = "${uncapitalize_file module}.mly"
+                           }
+                        ];
                       bs_c_sources = [];
                       bs_data_files = [];
+                      bs_findlib_extra_files = [];
                       bs_ccopt = [(OASISExpr.EBool true, [])];
                       bs_cclib = [(OASISExpr.EBool true, [])];
                       bs_dlllib = [(OASISExpr.EBool true, [])];
@@ -7662,8 +9185,119 @@
                         ];
                       bs_build_tools =
                         [ExternalTool "ocamlbuild"; ExternalTool "make"];
+                      bs_interface_patterns =
+                        [
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("capitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".mli"
+                                ];
+                              origin = "${capitalize_file module}.mli"
+                           };
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("uncapitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".mli"
+                                ];
+                              origin = "${uncapitalize_file module}.mli"
+                           }
+                        ];
+                      bs_implementation_patterns =
+                        [
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("capitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".ml"
+                                ];
+                              origin = "${capitalize_file module}.ml"
+                           };
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("uncapitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".ml"
+                                ];
+                              origin = "${uncapitalize_file module}.ml"
+                           };
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("capitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".mll"
+                                ];
+                              origin = "${capitalize_file module}.mll"
+                           };
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("uncapitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".mll"
+                                ];
+                              origin = "${uncapitalize_file module}.mll"
+                           };
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("capitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".mly"
+                                ];
+                              origin = "${capitalize_file module}.mly"
+                           };
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("uncapitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".mly"
+                                ];
+                              origin = "${uncapitalize_file module}.mly"
+                           }
+                        ];
                       bs_c_sources = [];
                       bs_data_files = [];
+                      bs_findlib_extra_files = [];
                       bs_ccopt = [(OASISExpr.EBool true, [])];
                       bs_cclib = [(OASISExpr.EBool true, [])];
                       bs_dlllib = [(OASISExpr.EBool true, [])];
@@ -7695,8 +9329,119 @@
                         ];
                       bs_build_tools =
                         [ExternalTool "ocamlbuild"; ExternalTool "make"];
+                      bs_interface_patterns =
+                        [
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("capitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".mli"
+                                ];
+                              origin = "${capitalize_file module}.mli"
+                           };
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("uncapitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".mli"
+                                ];
+                              origin = "${uncapitalize_file module}.mli"
+                           }
+                        ];
+                      bs_implementation_patterns =
+                        [
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("capitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".ml"
+                                ];
+                              origin = "${capitalize_file module}.ml"
+                           };
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("uncapitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".ml"
+                                ];
+                              origin = "${uncapitalize_file module}.ml"
+                           };
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("capitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".mll"
+                                ];
+                              origin = "${capitalize_file module}.mll"
+                           };
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("uncapitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".mll"
+                                ];
+                              origin = "${uncapitalize_file module}.mll"
+                           };
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("capitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".mly"
+                                ];
+                              origin = "${capitalize_file module}.mly"
+                           };
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("uncapitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".mly"
+                                ];
+                              origin = "${uncapitalize_file module}.mly"
+                           }
+                        ];
                       bs_c_sources = [];
                       bs_data_files = [];
+                      bs_findlib_extra_files = [];
                       bs_ccopt = [(OASISExpr.EBool true, [])];
                       bs_cclib = [(OASISExpr.EBool true, [])];
                       bs_dlllib = [(OASISExpr.EBool true, [])];
@@ -7731,8 +9476,119 @@
                         ];
                       bs_build_tools =
                         [ExternalTool "ocamlbuild"; ExternalTool "make"];
+                      bs_interface_patterns =
+                        [
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("capitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".mli"
+                                ];
+                              origin = "${capitalize_file module}.mli"
+                           };
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("uncapitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".mli"
+                                ];
+                              origin = "${uncapitalize_file module}.mli"
+                           }
+                        ];
+                      bs_implementation_patterns =
+                        [
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("capitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".ml"
+                                ];
+                              origin = "${capitalize_file module}.ml"
+                           };
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("uncapitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".ml"
+                                ];
+                              origin = "${uncapitalize_file module}.ml"
+                           };
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("capitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".mll"
+                                ];
+                              origin = "${capitalize_file module}.mll"
+                           };
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("uncapitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".mll"
+                                ];
+                              origin = "${uncapitalize_file module}.mll"
+                           };
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("capitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".mly"
+                                ];
+                              origin = "${capitalize_file module}.mly"
+                           };
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("uncapitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".mly"
+                                ];
+                              origin = "${uncapitalize_file module}.mly"
+                           }
+                        ];
                       bs_c_sources = [];
                       bs_data_files = [];
+                      bs_findlib_extra_files = [];
                       bs_ccopt = [(OASISExpr.EBool true, [])];
                       bs_cclib = [(OASISExpr.EBool true, [])];
                       bs_dlllib = [(OASISExpr.EBool true, [])];
@@ -7759,8 +9615,119 @@
                         ];
                       bs_build_tools =
                         [ExternalTool "ocamlbuild"; ExternalTool "make"];
+                      bs_interface_patterns =
+                        [
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("capitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".mli"
+                                ];
+                              origin = "${capitalize_file module}.mli"
+                           };
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("uncapitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".mli"
+                                ];
+                              origin = "${uncapitalize_file module}.mli"
+                           }
+                        ];
+                      bs_implementation_patterns =
+                        [
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("capitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".ml"
+                                ];
+                              origin = "${capitalize_file module}.ml"
+                           };
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("uncapitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".ml"
+                                ];
+                              origin = "${uncapitalize_file module}.ml"
+                           };
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("capitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".mll"
+                                ];
+                              origin = "${capitalize_file module}.mll"
+                           };
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("uncapitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".mll"
+                                ];
+                              origin = "${uncapitalize_file module}.mll"
+                           };
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("capitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".mly"
+                                ];
+                              origin = "${capitalize_file module}.mly"
+                           };
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("uncapitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".mly"
+                                ];
+                              origin = "${uncapitalize_file module}.mly"
+                           }
+                        ];
                       bs_c_sources = [];
                       bs_data_files = [];
+                      bs_findlib_extra_files = [];
                       bs_ccopt = [(OASISExpr.EBool true, [])];
                       bs_cclib = [(OASISExpr.EBool true, [])];
                       bs_dlllib = [(OASISExpr.EBool true, [])];
@@ -7774,6 +9741,7 @@
                       lib_internal_modules = [];
                       lib_findlib_parent = None;
                       lib_findlib_name = None;
+                      lib_findlib_directory = None;
                       lib_findlib_containers = []
                    });
                Library
@@ -7799,8 +9767,119 @@
                         ];
                       bs_build_tools =
                         [ExternalTool "ocamlbuild"; ExternalTool "make"];
+                      bs_interface_patterns =
+                        [
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("capitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".mli"
+                                ];
+                              origin = "${capitalize_file module}.mli"
+                           };
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("uncapitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".mli"
+                                ];
+                              origin = "${uncapitalize_file module}.mli"
+                           }
+                        ];
+                      bs_implementation_patterns =
+                        [
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("capitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".ml"
+                                ];
+                              origin = "${capitalize_file module}.ml"
+                           };
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("uncapitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".ml"
+                                ];
+                              origin = "${uncapitalize_file module}.ml"
+                           };
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("capitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".mll"
+                                ];
+                              origin = "${capitalize_file module}.mll"
+                           };
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("uncapitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".mll"
+                                ];
+                              origin = "${uncapitalize_file module}.mll"
+                           };
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("capitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".mly"
+                                ];
+                              origin = "${capitalize_file module}.mly"
+                           };
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("uncapitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".mly"
+                                ];
+                              origin = "${uncapitalize_file module}.mly"
+                           }
+                        ];
                       bs_c_sources = [];
                       bs_data_files = [];
+                      bs_findlib_extra_files = [];
                       bs_ccopt = [(OASISExpr.EBool true, [])];
                       bs_cclib = [(OASISExpr.EBool true, [])];
                       bs_dlllib = [(OASISExpr.EBool true, [])];
@@ -7820,6 +9899,7 @@
                       lib_internal_modules = ["CLIData"; "CLIPluginsLoaded"];
                       lib_findlib_parent = Some "oasis";
                       lib_findlib_name = None;
+                      lib_findlib_directory = None;
                       lib_findlib_containers = []
                    });
                Executable
@@ -7840,10 +9920,121 @@
                            InternalLibrary "cli";
                            InternalLibrary "builtin-plugins"
                         ];
-                      bs_build_tools =
-                        [ExternalTool "ocamlbuild"; ExternalTool "make"];
+                      bs_build_tools =
+                        [ExternalTool "ocamlbuild"; ExternalTool "make"];
+                      bs_interface_patterns =
+                        [
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("capitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".mli"
+                                ];
+                              origin = "${capitalize_file module}.mli"
+                           };
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("uncapitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".mli"
+                                ];
+                              origin = "${uncapitalize_file module}.mli"
+                           }
+                        ];
+                      bs_implementation_patterns =
+                        [
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("capitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".ml"
+                                ];
+                              origin = "${capitalize_file module}.ml"
+                           };
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("uncapitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".ml"
+                                ];
+                              origin = "${uncapitalize_file module}.ml"
+                           };
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("capitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".mll"
+                                ];
+                              origin = "${capitalize_file module}.mll"
+                           };
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("uncapitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".mll"
+                                ];
+                              origin = "${uncapitalize_file module}.mll"
+                           };
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("capitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".mly"
+                                ];
+                              origin = "${capitalize_file module}.mly"
+                           };
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("uncapitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".mly"
+                                ];
+                              origin = "${uncapitalize_file module}.mly"
+                           }
+                        ];
                       bs_c_sources = [];
                       bs_data_files = [];
+                      bs_findlib_extra_files = [];
                       bs_ccopt = [(OASISExpr.EBool true, [])];
                       bs_cclib = [(OASISExpr.EBool true, [])];
                       bs_dlllib = [(OASISExpr.EBool true, [])];
@@ -7919,8 +10110,119 @@
                       bs_build_depends = [];
                       bs_build_tools =
                         [ExternalTool "ocamlbuild"; ExternalTool "make"];
+                      bs_interface_patterns =
+                        [
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("capitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".mli"
+                                ];
+                              origin = "${capitalize_file module}.mli"
+                           };
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("uncapitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".mli"
+                                ];
+                              origin = "${uncapitalize_file module}.mli"
+                           }
+                        ];
+                      bs_implementation_patterns =
+                        [
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("capitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".ml"
+                                ];
+                              origin = "${capitalize_file module}.ml"
+                           };
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("uncapitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".ml"
+                                ];
+                              origin = "${uncapitalize_file module}.ml"
+                           };
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("capitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".mll"
+                                ];
+                              origin = "${capitalize_file module}.mll"
+                           };
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("uncapitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".mll"
+                                ];
+                              origin = "${uncapitalize_file module}.mll"
+                           };
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("capitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".mly"
+                                ];
+                              origin = "${capitalize_file module}.mly"
+                           };
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("uncapitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".mly"
+                                ];
+                              origin = "${uncapitalize_file module}.mly"
+                           }
+                        ];
                       bs_c_sources = [];
                       bs_data_files = [];
+                      bs_findlib_extra_files = [];
                       bs_ccopt = [(OASISExpr.EBool true, [])];
                       bs_cclib = [(OASISExpr.EBool true, [])];
                       bs_dlllib = [(OASISExpr.EBool true, [])];
@@ -7934,6 +10236,7 @@
                       lib_internal_modules = [];
                       lib_findlib_parent = None;
                       lib_findlib_name = None;
+                      lib_findlib_directory = None;
                       lib_findlib_containers = []
                    });
                Library
@@ -7955,8 +10258,119 @@
                       bs_build_depends = [InternalLibrary "pluginloaderLib"];
                       bs_build_tools =
                         [ExternalTool "ocamlbuild"; ExternalTool "make"];
+                      bs_interface_patterns =
+                        [
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("capitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".mli"
+                                ];
+                              origin = "${capitalize_file module}.mli"
+                           };
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("uncapitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".mli"
+                                ];
+                              origin = "${uncapitalize_file module}.mli"
+                           }
+                        ];
+                      bs_implementation_patterns =
+                        [
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("capitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".ml"
+                                ];
+                              origin = "${capitalize_file module}.ml"
+                           };
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("uncapitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".ml"
+                                ];
+                              origin = "${uncapitalize_file module}.ml"
+                           };
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("capitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".mll"
+                                ];
+                              origin = "${capitalize_file module}.mll"
+                           };
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("uncapitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".mll"
+                                ];
+                              origin = "${uncapitalize_file module}.mll"
+                           };
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("capitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".mly"
+                                ];
+                              origin = "${capitalize_file module}.mly"
+                           };
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("uncapitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".mly"
+                                ];
+                              origin = "${uncapitalize_file module}.mly"
+                           }
+                        ];
                       bs_c_sources = [];
                       bs_data_files = [];
+                      bs_findlib_extra_files = [];
                       bs_ccopt = [(OASISExpr.EBool true, [])];
                       bs_cclib = [(OASISExpr.EBool true, [])];
                       bs_dlllib = [(OASISExpr.EBool true, [])];
@@ -7970,6 +10384,7 @@
                       lib_internal_modules = [];
                       lib_findlib_parent = None;
                       lib_findlib_name = None;
+                      lib_findlib_directory = None;
                       lib_findlib_containers = []
                    });
                Library
@@ -7995,8 +10410,119 @@
                         ];
                       bs_build_tools =
                         [ExternalTool "ocamlbuild"; ExternalTool "make"];
+                      bs_interface_patterns =
+                        [
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("capitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".mli"
+                                ];
+                              origin = "${capitalize_file module}.mli"
+                           };
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("uncapitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".mli"
+                                ];
+                              origin = "${uncapitalize_file module}.mli"
+                           }
+                        ];
+                      bs_implementation_patterns =
+                        [
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("capitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".ml"
+                                ];
+                              origin = "${capitalize_file module}.ml"
+                           };
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("uncapitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".ml"
+                                ];
+                              origin = "${uncapitalize_file module}.ml"
+                           };
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("capitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".mll"
+                                ];
+                              origin = "${capitalize_file module}.mll"
+                           };
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("uncapitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".mll"
+                                ];
+                              origin = "${uncapitalize_file module}.mll"
+                           };
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("capitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".mly"
+                                ];
+                              origin = "${capitalize_file module}.mly"
+                           };
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("uncapitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".mly"
+                                ];
+                              origin = "${uncapitalize_file module}.mly"
+                           }
+                        ];
                       bs_c_sources = [];
                       bs_data_files = [];
+                      bs_findlib_extra_files = [];
                       bs_ccopt = [(OASISExpr.EBool true, [])];
                       bs_cclib = [(OASISExpr.EBool true, [])];
                       bs_dlllib = [(OASISExpr.EBool true, [])];
@@ -8010,6 +10536,7 @@
                       lib_internal_modules = [];
                       lib_findlib_parent = None;
                       lib_findlib_name = None;
+                      lib_findlib_directory = None;
                       lib_findlib_containers = []
                    });
                Library
@@ -8031,8 +10558,119 @@
                       bs_build_depends = [InternalLibrary "pluginloaderLib"];
                       bs_build_tools =
                         [ExternalTool "ocamlbuild"; ExternalTool "make"];
+                      bs_interface_patterns =
+                        [
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("capitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".mli"
+                                ];
+                              origin = "${capitalize_file module}.mli"
+                           };
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("uncapitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".mli"
+                                ];
+                              origin = "${uncapitalize_file module}.mli"
+                           }
+                        ];
+                      bs_implementation_patterns =
+                        [
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("capitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".ml"
+                                ];
+                              origin = "${capitalize_file module}.ml"
+                           };
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("uncapitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".ml"
+                                ];
+                              origin = "${uncapitalize_file module}.ml"
+                           };
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("capitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".mll"
+                                ];
+                              origin = "${capitalize_file module}.mll"
+                           };
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("uncapitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".mll"
+                                ];
+                              origin = "${uncapitalize_file module}.mll"
+                           };
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("capitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".mly"
+                                ];
+                              origin = "${capitalize_file module}.mly"
+                           };
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("uncapitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".mly"
+                                ];
+                              origin = "${uncapitalize_file module}.mly"
+                           }
+                        ];
                       bs_c_sources = [];
                       bs_data_files = [];
+                      bs_findlib_extra_files = [];
                       bs_ccopt = [(OASISExpr.EBool true, [])];
                       bs_cclib = [(OASISExpr.EBool true, [])];
                       bs_dlllib = [(OASISExpr.EBool true, [])];
@@ -8046,6 +10684,7 @@
                       lib_internal_modules = [];
                       lib_findlib_parent = None;
                       lib_findlib_name = None;
+                      lib_findlib_directory = None;
                       lib_findlib_containers = []
                    });
                Executable
@@ -8070,8 +10709,119 @@
                         ];
                       bs_build_tools =
                         [ExternalTool "ocamlbuild"; ExternalTool "make"];
+                      bs_interface_patterns =
+                        [
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("capitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".mli"
+                                ];
+                              origin = "${capitalize_file module}.mli"
+                           };
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("uncapitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".mli"
+                                ];
+                              origin = "${uncapitalize_file module}.mli"
+                           }
+                        ];
+                      bs_implementation_patterns =
+                        [
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("capitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".ml"
+                                ];
+                              origin = "${capitalize_file module}.ml"
+                           };
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("uncapitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".ml"
+                                ];
+                              origin = "${uncapitalize_file module}.ml"
+                           };
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("capitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".mll"
+                                ];
+                              origin = "${capitalize_file module}.mll"
+                           };
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("uncapitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".mll"
+                                ];
+                              origin = "${uncapitalize_file module}.mll"
+                           };
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("capitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".mly"
+                                ];
+                              origin = "${capitalize_file module}.mly"
+                           };
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("uncapitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".mly"
+                                ];
+                              origin = "${uncapitalize_file module}.mly"
+                           }
+                        ];
                       bs_c_sources = [];
                       bs_data_files = [];
+                      bs_findlib_extra_files = [];
                       bs_ccopt = [(OASISExpr.EBool true, [])];
                       bs_cclib = [(OASISExpr.EBool true, [])];
                       bs_dlllib = [(OASISExpr.EBool true, [])];
@@ -8104,8 +10854,119 @@
                         ];
                       bs_build_tools =
                         [ExternalTool "ocamlbuild"; ExternalTool "make"];
+                      bs_interface_patterns =
+                        [
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("capitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".mli"
+                                ];
+                              origin = "${capitalize_file module}.mli"
+                           };
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("uncapitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".mli"
+                                ];
+                              origin = "${uncapitalize_file module}.mli"
+                           }
+                        ];
+                      bs_implementation_patterns =
+                        [
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("capitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".ml"
+                                ];
+                              origin = "${capitalize_file module}.ml"
+                           };
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("uncapitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".ml"
+                                ];
+                              origin = "${uncapitalize_file module}.ml"
+                           };
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("capitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".mll"
+                                ];
+                              origin = "${capitalize_file module}.mll"
+                           };
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("uncapitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".mll"
+                                ];
+                              origin = "${uncapitalize_file module}.mll"
+                           };
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("capitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".mly"
+                                ];
+                              origin = "${capitalize_file module}.mly"
+                           };
+                           {
+                              OASISSourcePatterns.Templater.atoms =
+                                [
+                                   OASISSourcePatterns.Templater.Text "";
+                                   OASISSourcePatterns.Templater.Expr
+                                     (OASISSourcePatterns.Templater.Call
+                                        ("uncapitalize_file",
+                                          OASISSourcePatterns.Templater.Ident
+                                            "module"));
+                                   OASISSourcePatterns.Templater.Text ".mly"
+                                ];
+                              origin = "${uncapitalize_file module}.mly"
+                           }
+                        ];
                       bs_c_sources = [];
                       bs_data_files = [];
+                      bs_findlib_extra_files = [];
                       bs_ccopt = [(OASISExpr.EBool true, [])];
                       bs_cclib = [(OASISExpr.EBool true, [])];
                       bs_dlllib = [(OASISExpr.EBool true, [])];
@@ -8148,18 +11009,51 @@
                         ]
                    })
             ];
+          disable_oasis_section = [];
+          conf_type = (`Configure, "internal", Some "0.4");
+          conf_custom =
+            {
+               pre_command = [(OASISExpr.EBool true, None)];
+               post_command = [(OASISExpr.EBool true, None)]
+            };
+          build_type = (`Build, "ocamlbuild", Some "0.3");
+          build_custom =
+            {
+               pre_command = [(OASISExpr.EBool true, None)];
+               post_command = [(OASISExpr.EBool true, None)]
+            };
+          install_type = (`Install, "internal", Some "0.4");
+          install_custom =
+            {
+               pre_command = [(OASISExpr.EBool true, None)];
+               post_command = [(OASISExpr.EBool true, None)]
+            };
+          uninstall_custom =
+            {
+               pre_command = [(OASISExpr.EBool true, None)];
+               post_command = [(OASISExpr.EBool true, None)]
+            };
+          clean_custom =
+            {
+               pre_command = [(OASISExpr.EBool true, None)];
+               post_command = [(OASISExpr.EBool true, None)]
+            };
+          distclean_custom =
+            {
+               pre_command = [(OASISExpr.EBool true, None)];
+               post_command = [(OASISExpr.EBool true, None)]
+            };
           plugins =
             [
                (`Extra, "DevFiles", Some "0.3");
                (`Extra, "StdFiles", Some "0.3");
                (`Extra, "META", Some "0.3")
             ];
-          disable_oasis_section = [];
           schema_data = PropList.Data.create ();
           plugin_data = []
        };
      oasis_fn = Some "_oasis";
-     oasis_version = "0.4.6";
+     oasis_version = "0.4.7";
      oasis_digest = Some "\211\149Y\005q\211\209:\153\biR2 D]";
      oasis_exec = None;
      oasis_setup_args = [];
@@ -8168,7 +11062,9 @@
 
 let setup () = BaseSetup.setup setup_t;;
 
-# 8152 "setup.ml"
+# 11016 "setup.ml"
+let setup_t = BaseCompat.Compat_0_3.adapt_setup_t setup_t
+open BaseCompat.Compat_0_3
 (* OASIS_STOP *)
 
 #use "deps.ml";;
--- ./src/base/BaseCheck.ml
+++ ./src/base/BaseCheck.ml
@@ -118,9 +118,11 @@
   in
   let findlib_dir pkg =
     let dir =
+      OASISHostPath.of_unix (
+        OASISHostPath.ocamlfind_unquote (
       OASISExec.run_read_one_line ~ctxt:!BaseContext.default
         (ocamlfind ())
-        ["query"; "-format"; "%d"; pkg]
+            ["query"; "-format"; "%d"; pkg] ) )
     in
     if Sys.file_exists dir && Sys.is_directory dir then
       dir
--- ./src/base/BaseCustom.ml
+++ ./src/base/BaseCustom.ml
@@ -31,7 +31,7 @@
   OASISExec.run ~ctxt:!BaseContext.default ~quote:false
     (var_expand cmd)
     (List.map
-       var_expand
+       (var_expand ~quoted:true)
        (args @ (Array.to_list extra_args)))
 
 
--- ./src/base/BaseEnv.ml
+++ ./src/base/BaseEnv.ml
@@ -69,7 +69,7 @@
 let var_lxr = Genlex.make_lexer []
 
 
-let rec var_expand str =
+let rec var_expand ?(quoted=false) str =
   let buff =
     Buffer.create ((String.length str) * 2)
   in
@@ -97,7 +97,11 @@
            | [Genlex.Ident "ocaml_escaped"; Genlex.String s] ->
              String.escaped s
            | [Genlex.Ident nm] ->
-             var_get nm
+               let s = var_get nm in
+               if quoted then
+                 OASISHostPath.quote s
+               else
+                 s
            | _ ->
              failwithf
                (f_ "Unknown expression '%s' in variable expansion of %s.")
--- ./src/base/BaseEnv.mli
+++ ./src/base/BaseEnv.mli
@@ -73,8 +73,9 @@
 
 (** Expand variable that can be found in string. Variable follow definition of
     variable for [Buffer.add_substitute].
+    quoted is false by default
 *)
-val var_expand: string -> string
+val var_expand: ?quoted:bool -> string -> string
 
 
 (** Get variable. *)
--- ./src/base/BaseOCamlcConfig.ml
+++ ./src/base/BaseOCamlcConfig.ml
@@ -116,6 +116,9 @@
     match nm with
       | "ocaml_version" ->
         "version", chop_version_suffix
+      | "standard_library"
+      | "standard_library_default" ->
+          nm, ( fun x -> OASISHostPath.of_unix x)
       | _ -> nm, (fun x -> x)
   in
   var_redefine
--- ./src/base/BaseSetup.ml
+++ ./src/base/BaseSetup.ml
@@ -93,9 +93,27 @@
 
 let configure ~ctxt t args =
   (* Run configure *)
+
+  (* use-bash is an exception. It's already needed to run the
+     pre-configure script. *)
+  let rec f = function
+    | [] ->
+      begin
+        try
+          let x = Sys.getenv "USE_BASH" in
+            OASISHostPath.bash_cmd := (fun () -> x);
+        with
+          _ -> ()
+      end
+    | "--use-bash"::x::_ ->
+        OASISHostPath.bash_cmd := (fun () -> x);
+    | _::tl -> f tl
+  in
+    f (Array.to_list args);
   BaseCustom.hook
     t.package.conf_custom
     (fun () ->
+         OASISHostPath.bash_cmd := BaseStandardVar.bash_cmd;
        (* Reload if preconf has changed it *)
        begin
          try
--- ./src/base/BaseStandardVar.ml
+++ ./src/base/BaseStandardVar.ml
@@ -135,15 +135,43 @@
 
 
 let (/) a b =
-  if os_type () = Sys.os_type then
+  let os = os_type () in
+  if os = Sys.os_type then
+    if Sys.os_type = "Win32" && OASISHostPath.use_bash () then
+      OASISUnixPath.concat a b
+    else
     Filename.concat a b
-  else if os_type () = "Unix" || os_type () = "Cygwin" then
+  else if os = "Unix" || os = "Cygwin" then
     OASISUnixPath.concat a b
   else
-    OASISUtils.failwithf (f_ "Cannot handle os_type %s filename concat")
-      (os_type ())
+    OASISUtils.failwithf (f_ "Cannot handle os_type %s filename concat") os
 (**/**)
 
+let auto_bash =
+  lazy (
+    try
+      let bash = OASISFileUtil.which ~plain:true "bash" in
+      let sh = Filename.concat (Filename.dirname bash) "sh.exe" in
+      if Sys.file_exists sh then
+        sh
+      else
+        bash
+    with
+    | Not_found | Sys_error _ -> "" )
+
+let auto_bash () =
+  if Sys.os_type <> "Win32" then
+    ""
+  else
+    Lazy.force auto_bash
+
+let bash_cmd =
+  var_define
+   ~short_desc:(fun () -> s_ "Enforced bash shell:")
+    ~cli:CLIAuto
+    ~arg_help:"program"
+    "use_bash"
+    auto_bash
 
 let prefix =
   p "prefix"
@@ -151,10 +179,30 @@
     (fun () ->
        match os_type () with
          | "Win32" ->
+          let getenv w =
+            try
+              Some(Sys.getenv w)
+            with
+            | Not_found -> None
+          in
+          let s =
+            if Sys.word_size = 64 then
+              getenv "ProgramW6432"
+            else
+              None
+          in
+          let s =
+            if s = None then
+              getenv "PROGRAMFILES"
+            else
+              s
+          in
            let program_files =
-             Sys.getenv "PROGRAMFILES"
+            match s with
+            | None -> "C:\\Program Files"
+            | Some x -> x
            in
-           program_files/(pkg_name ())
+          OASISHostPath.of_unix (program_files/(pkg_name ()))
          | _ ->
            "/usr/local")
 
@@ -240,7 +288,15 @@
 let docdir =
   p "docdir"
     (fun () -> s_ "Documentation root")
-    (fun () -> "$datarootdir"/"doc"/"$pkg_name")
+    (fun () ->
+      (* TODO: (Windows only?) "$pkg_name" is not always substituted
+       * (at least if datarootdir contains spaces or other garbage)
+       * I haven't looked up why.
+       *)
+      match os_type () with
+        | "Win32" -> "$datarootdir"/"doc"/ ( pkg_name () )
+        | _ -> "$datarootdir"/"doc"/"$pkg_name"
+    )
 
 
 let htmldir =
@@ -314,9 +370,10 @@
     ~short_desc:(fun () -> s_ "Remove a file.")
     "rm"
     (fun () ->
-       match os_type () with
-         | "Win32" -> "del"
-         | _ -> "rm -f")
+       if not (OASISHostPath.use_bash ()) && os_type () = "Win32" then
+         "del"
+       else
+         "rm -f" )
 
 
 let rmdir =
@@ -324,9 +381,10 @@
     ~short_desc:(fun () -> s_ "Remove a directory.")
     "rmdir"
     (fun () ->
-       match os_type () with
-         | "Win32" -> "rd"
-         | _ -> "rm -rf")
+       if not (OASISHostPath.use_bash ()) && os_type () = "Win32" then
+         "rd"
+       else
+         "rm -rf")
 
 
 let debug =
@@ -390,14 +448,26 @@
          let has_native_dynlink =
            let ocamlfind = ocamlfind () in
            try
-             let fn =
+             (* -format %d/%a doesn't work, because ocamlfind quotes %d
+                * and %a separatly *)
+             let fn1 =
+               OASISHostPath.ocamlfind_unquote (
+                 OASISExec.run_read_one_line
+                   ~ctxt:!BaseContext.default
+                   ocamlfind
+                   ["query"; "-predicates"; "native"; "dynlink";
+                    "-format"; "%d"] )
+             in
+             let fn2 =
+               OASISHostPath.ocamlfind_unquote (
                OASISExec.run_read_one_line
                  ~ctxt:!BaseContext.default
                  ocamlfind
                  ["query"; "-predicates"; "native"; "dynlink";
-                  "-format"; "%d/%a"]
+                    "-format"; "%a"]
+               )
              in
-             Sys.file_exists fn
+             fn1 <> "" && fn2 <> "" && Sys.file_exists (Filename.concat fn1 fn2)
            with _ ->
              false
          in
@@ -424,3 +494,5 @@
   rpkg := Some pkg;
   List.iter (fun f -> f pkg.oasis_version) !var_cond
 
+let () =
+  OASISHostPath.bash_cmd := bash_cmd
--- ./src/base/BaseStandardVar.mli
+++ ./src/base/BaseStandardVar.mli
@@ -73,6 +73,9 @@
 val systhread_supported:      unit -> string
 
 
+
+val bash_cmd:                 unit -> string
+
 (** {2 Paths}
 
     See {{:http://www.gnu.org/prep/standards/html_node/Directory-Variables.html} GNU standards}.
--- ./src/dynrun/OASISDynRun.ml
+++ ./src/dynrun/OASISDynRun.ml
@@ -56,7 +56,12 @@
 
   let setup ~ctxt setup_t =
     let tmp_setup_fn =
-      Filename.temp_file (setup_t.package.name^"-setup") ".ml" in
+      if Sys.os_type <> "Win32" then
+        Filename.temp_file (setup_t.package.name^"-setup") ".ml"
+      else
+        (* dirty hack, because otherwise to_unix will fail *)
+        Filename.temp_file ~temp_dir:"." ("tmp-"^setup_t.package.name^"-setup") ".ml"
+    in
     let restored = ref false in
     let cleanup ~ctxt () =
       if not !restored then begin
--- ./src/oasis/OASISCustom.ml
+++ ./src/oasis/OASISCustom.ml
@@ -38,14 +38,14 @@
   let pre_command =
     new_field_conditional schm ("Pre"^nm^"Command")
       ~default:None
-      (opt command_line)
+      (opt command_line_warn)
       hlp_pre
       (fun pkg -> (sync pkg).pre_command)
   in
   let post_command =
     new_field_conditional schm ("Post"^nm^"Command")
       ~default:None
-      (opt command_line)
+      (opt command_line_warn)
       hlp_post
       (fun pkg -> (sync pkg).post_command)
   in
--- ./src/oasis/OASISExec.ml
+++ ./src/oasis/OASISExec.ml
@@ -25,26 +25,218 @@
 open OASISUtils
 open OASISMessage
 
+(* In general, there is no chance to quote properly with the current
+ * settings. ( This is only a problem, if BaseCustom.run is used (e.g
+ * test commands, PreConfigure,....). Most of the time, OASISExec.run
+ * is used with enabled quoting.)
+ *
+ * "$rm" should ideally expand to 'rm -f' (no quotes), but "$test_exec"
+ * should ideally expand to '"C:\Program Files\dir\test.exe"' (with
+ * quotes). Paths with spaces are common on Windows, so this problem
+ * can't be ignored.
+ *
+ * Using a command with additional parameters is quite useful, not only
+ * for trivial cases like $rm. You could add an additional parameter
+ * for $make in order to use a special compatibility mode, on windows
+ * you can use it to inform ocaml that a certain program is a shell
+ * script ('sh.exe pcre-config').
+ *
+ * An additional parameter (e.g. $rm_switches) would be ugly,
+ * especially for *nix users, who don't use space characters in their
+ * installation paths anyway.
+ *
+ * I use the following workaround, which should work most of the time:
+ *
+ * - if cmd doesn't contains spaces or other suspicious characters, it
+ * can be quoted in the usual way (not ambigous, I think)
+ *
+ * - if cmd does contain spaces, a file with this name exists, and the
+ * beginning of cmd looks like a absolute pathname
+ * ('\\test\dir\foo.exe' or "C:\\sa df\\foo.exe" - not "foo.exe" ), I
+ * will also quote it. (ambigous, there could be "C:\bin\rm.exe" and
+ * "C:\bin\rm -f.exe").  Relative filenames are not considered, because
+ * I assume the source code folder contains only well named files and
+ * relative paths like "../../make.exe" are uncommon (autoconf even
+ * rejects them) *)
+
+
+(* stricter settings as for regular windows batch lines
+ * necessary because of shell comannds like:
+ *   LC_ALL=C make ....
+ *)
+let is_dubious_char = function
+  | '+' | '~' | ':' | '.' | '-' | '_' | '/' | '\\' -> false
+  | c ->
+    OASISString.is_digit c = false &&
+    OASISString.is_alpha c = false
+
+
+let win_quote_needed str =
+  let f = function
+    (* this list is not exhaustive. Feel free to added common chars, that
+     * can be passed to cmd.exe without quoting *)
+    | 'a' .. 'z'  | 'A' .. 'Z' | '0' .. '9'
+    | '_' | '-' | '~' | '.' | ':' | ',' | '\\' -> false
+    | _ -> true
+  in
+    str = "" || OASISString.exists f str
+
+let is_simple_command str =
+  String.length str > 0 &&
+  not (OASISString.exists is_dubious_char str)
+
+let is_path_sep = function
+  | '/' | '\\' -> true
+  | _ -> false
+
+let starts_with_absolute_path cmd =
+  let len = String.length cmd in
+    if len < 3 then
+      false
+    else
+      let c0 = cmd.[0] in
+      let c1 = cmd.[1] in
+        if is_path_sep c0 && is_path_sep c1 then (* network devices: "//" *)
+          true
+        else if len = 3 then
+          false
+        else  (* C:\.... *)
+          OASISString.is_alpha c0 && c1 = ':' && is_path_sep cmd.[2]
+
+let exe_exts = lazy
+  begin
+    let exts =
+      try
+        OASISString.nsplit
+          (Sys.getenv "PATHEXT")
+          ';'
+      with
+        | Not_found -> []
+    in
+    let exts' =
+      List.filter
+        ( fun a -> a <> "" && a.[0] = '.' && a <> ".exe" )
+        (List.map OASISString.lowercase_ascii exts) (* windows file system doesn't care *)
+    in
+      ".exe"::exts' (* .exe first, most common *)
+  end
+
+let exe_file_exists fln =
+  Sys.file_exists fln ||
+  List.exists
+    (fun a -> Sys.file_exists ( fln ^ a ) )
+    (Lazy.force exe_exts)
+
+
+let quote_anyway cmd =
+  if Sys.os_type <> "Win32" then (* workaround for windows only *)
+    false
+  else if is_simple_command cmd then
+    true
+  else
+    OASISString.exists OASISString.is_whitespace cmd &&
+      starts_with_absolute_path cmd &&
+      exe_file_exists cmd
+
+
+let run_bash ~ctxt ?f_exit_code ?(quote=true) cmd args =
+  let fn = Filename.temp_file "oasis-" ".sh" in
+  let fn_deleted = ref false in
+    try
+      begin
+        let ch = open_out_bin fn in
+        let ch_closed = ref false in
+          try
+            begin
+              let cmd =
+                if quote || quote_anyway cmd then
+                  OASISHostPath.quote (OASISHostPath.of_unix cmd)
+                else
+                  cmd
+              in
+                output_string ch cmd;
+                List.iter
+                  ( fun s -> output_char ch ' '; output_string ch s )
+                  args ;
+                output_char ch '\n';
+                ch_closed:=true ;
+                close_out ch;
+                let bash = !OASISHostPath.bash_cmd () in
+                let add_quotes = ref false in
+                let shell_cmd =
+                  if Sys.os_type <> "Win32" then
+                    Filename.quote bash
+                  else
+                    if win_quote_needed bash = false then
+                      bash
+                    else
+                      begin
+                        add_quotes := true;
+                        Filename.quote bash
+                      end
+                in
+                let cmdline_orig = String.concat " " (cmd :: args) in
+                let cmdline =
+                  let s = shell_cmd ^ " " ^ (Filename.quote fn) in
+                    if !add_quotes then
+                      "\"" ^ s ^ "\""
+                    else
+                      s
+                in
+                  info ~ctxt (f_ "Running command '%s'") cmdline_orig;
+                  let ret = Sys.command cmdline in
+                    fn_deleted := true;
+                    Sys.remove fn;
+                    match f_exit_code, ret with
+                      | None, 0 -> ()
+                      | None, i ->
+                          failwithf
+                            (f_ "Command '%s' terminated with error code %d")
+                            cmdline_orig i
+                      | Some f, i ->
+                          f i
+            end
+          with
+            | x when !ch_closed = false ->
+                close_out_noerr ch;
+                raise x
+      end
+    with
+      | x when !fn_deleted = false ->
+          (try Sys.remove fn with _ -> () ) ;
+          raise x
 
 (* TODO: I don't like this quote, it is there because $(rm) foo expands to
  * 'rm -f' foo...
 *)
-let run ~ctxt ?f_exit_code ?(quote=true) cmd args =
+let run_default ~ctxt ?f_exit_code ?(quote=true) cmd args =
+  let add_quotes = ref false in
   let cmd =
-    if quote then
+    if quote || quote_anyway cmd then
       if Sys.os_type = "Win32" then
-        if String.contains cmd ' ' then
-          (* Double the 1st double quote... win32... sigh *)
-          "\""^(Filename.quote cmd)
-        else
+        begin
+          if win_quote_needed cmd = false then
           cmd
       else
+            begin
+              (* Double the 1st double quote... win32... sigh *)
+              (* Above comment ist false. The whole string must be quoted.
+               * However, an error is only triggered, if args contains also
+               * quoted parameters *)
+              add_quotes := true;
+              Filename.quote cmd
+            end
+        end
+      else
         Filename.quote cmd
     else
       cmd
   in
   let cmdline =
-    String.concat " " (cmd :: args)
+    let s = String.concat " " (cmd :: args) in
+      match !add_quotes with
+        | true -> "\"" ^ s ^ "\""
+        | false -> s
   in
   info ~ctxt (f_ "Running command '%s'") cmdline;
   match f_exit_code, Sys.command cmdline with
@@ -56,6 +248,13 @@
     | Some f, i ->
       f i
 
+let run ~ctxt ?f_exit_code ?quote cmd args =
+  if OASISHostPath.use_bash () &&
+     (Sys.os_type <> "Win32" || not (Filename.check_suffix cmd ".bat"))
+  then
+    run_bash ~ctxt ?f_exit_code ?quote cmd args
+  else
+    run_default ~ctxt ?f_exit_code ?quote cmd args
 
 let run_read_output ~ctxt ?f_exit_code cmd args =
   let fn =
--- ./src/oasis/OASISFileTemplate.ml
+++ ./src/oasis/OASISFileTemplate.ml
@@ -496,6 +496,12 @@
       if Sys.file_exists bak then begin
         info ~ctxt (f_ "Restore file '%s' with backup file '%s'.")
           fn bak;
+        if Sys.os_type = "Win32" then (
+          try
+            Sys.remove fn
+          with
+          | Sys_error _ -> ()
+        );
         Sys.rename bak fn
       end else begin
         warning ~ctxt
--- ./src/oasis/OASISFileUtil.ml
+++ ./src/oasis/OASISFileUtil.ml
@@ -84,7 +84,7 @@
   ) alternatives
 
 
-let which ~ctxt prg =
+let which ?(plain=false) ?ctxt prg =
   let path_sep =
     match Sys.os_type with
       | "Win32" ->
@@ -96,11 +96,19 @@
   let exec_ext =
     match Sys.os_type with
       | "Win32" ->
-        "" :: (OASISString.nsplit (Sys.getenv "PATHEXT") path_sep)
+        "" :: (List.map
+                 OASISString.lowercase_ascii
+                 (OASISString.nsplit (Sys.getenv "PATHEXT") path_sep))
       | _ ->
         [""]
   in
+  let p =
   find_file ~case_sensitive:false [path_lst; [prg]] exec_ext
+  in
+  if plain then
+    p
+  else
+    OASISHostPath.of_unix p
 
 
 (**/**)
@@ -117,35 +125,54 @@
     dn
 
 
-let q = Filename.quote
+let q s = OASISHostPath.quote (OASISHostPath.of_unix s)
 (**/**)
 
-
 let cp ~ctxt ?(recurse=false) src tgt =
   if recurse then
-    match Sys.os_type with
-      | "Win32" ->
-        OASISExec.run ~ctxt
-          "xcopy" [q src; q tgt; "/E"]
-      | _ ->
-        OASISExec.run ~ctxt
-          "cp" ["-r"; q src; q tgt]
+    (*
+      'xcopy /E' and 'cp -r' don't have the same semantic!
+      -dir2 does exist:
+        xcopy dir dir2 /E -> copys content of dir into dir2 (dir2/dir doesn't exist!)
+        cp -r dir dir2    -> copys dir to dir2 (dir2/dir does exist!)
+      -dir2 doesn't exist:
+        xcopy dir dir2 /E -> request on command line, if dir2 is an directory or file.
+        cp -r dir dir2    -> dir and dir2 have the same content (dir2/dir doesn't exist)
+      Probably, there are even more differences,....
+    *)
+    if Sys.os_type = "Win32" && OASISHostPath.use_bash () = false then
+      let tgt_real =
+        if Sys.file_exists tgt = false then
+          begin
+            OASISExec.run ~ctxt "md" [q tgt];
+            tgt
+          end
   else
-    OASISExec.run ~ctxt
-      (match Sys.os_type with
-        | "Win32" -> "copy"
-        | _ -> "cp")
-      [q src; q tgt]
-
+          let base = Filename.basename src in
+          if base = "." then
+            tgt
+          else
+            let tgt_real = Filename.concat tgt base in
+            if Sys.file_exists tgt_real = false then
+              OASISExec.run ~ctxt "md" [q tgt_real];
+            tgt_real
+      in
+      OASISExec.run ~ctxt "xcopy" [q src; q tgt_real; "/E" ; "/Q" ; "/Y"]
+    else
+      OASISExec.run ~ctxt "cp" ["-r"; q src; q tgt]
+  else if Sys.os_type = "Win32" && OASISHostPath.use_bash () = false then
+    OASISExec.run ~ctxt "copy" [q src; q tgt ; "/Y"]
+  else
+    OASISExec.run ~ctxt "cp" [q src; q tgt]
 
 let mkdir ~ctxt tgt =
   OASISExec.run ~ctxt
-    (match Sys.os_type with
-      | "Win32" -> "md"
-      | _ -> "mkdir")
+    ( if Sys.os_type = "Win32" && not (OASISHostPath.use_bash ()) then
+        "md"
+      else
+        "mkdir" )
     [q tgt]
 
-
 let rec mkdir_parent ~ctxt f tgt =
   let tgt =
     fix_dir tgt
@@ -171,10 +198,9 @@
 
 let rmdir ~ctxt tgt =
   if Sys.readdir tgt = [||] then begin
-    match Sys.os_type with
-      | "Win32" ->
+    if Sys.os_type = "Win32" && OASISHostPath.use_bash () = false then
         OASISExec.run ~ctxt "rd" [q tgt]
-      | _ ->
+    else
         OASISExec.run ~ctxt "rm" ["-r"; q tgt]
   end else begin
     OASISMessage.error ~ctxt
--- ./src/oasis/OASISFileUtil.mli
+++ ./src/oasis/OASISFileUtil.mli
@@ -44,8 +44,7 @@
 
 (** Find real filename of an executable.
 *)
-val which: ctxt:OASISContext.t -> host_filename -> host_filename
-
+val which: ?plain:bool -> ?ctxt:OASISContext.t -> host_filename -> host_filename
 
 (** Copy a file.
 *)
--- ./src/oasis/OASISHostPath.ml
+++ ./src/oasis/OASISHostPath.ml
@@ -27,6 +27,118 @@
 
 module Unix = OASISUnixPath
 
+let bash_cmd = ref ( fun () -> "" )
+
+let use_bash () = ( !bash_cmd () ) <> ""
+
+
+(* generic quote and unixquote are taken from ocaml source *)
+let generic_quote quotequote s =
+  let l = String.length s in
+  let b = Buffer.create (l + 20) in
+    Buffer.add_char b '\'';
+    for i = 0 to l - 1 do
+      if s.[i] = '\'' then
+        Buffer.add_string b quotequote
+      else
+        Buffer.add_char b  s.[i]
+    done;
+    Buffer.add_char b '\'';
+    Buffer.contents b
+
+let unixquote = generic_quote "'\\''"
+
+let win = Sys.os_type = "Win32"
+
+let quote str =
+  if win && use_bash () then
+    unixquote str
+  else
+    quote str
+
+(* uniform_path (only called, if Sys.os_type = "Win32")
+ * - enforces uniform path seperators
+ * - strips trailing slashes (exceptions in case of C:\ and / )
+ * - removes (some) unnecessary file components like ./././
+ *)
+
+let get_naccu accu str first pos =
+  (* I assume c//d is identic to c/d
+   * the only exception (Network devices \\xyz\asdf)
+   * is covered in uniform_path
+   *)
+  if first = pos then
+    accu
+  else
+    let nlen = pos - first in
+    let nstr = String.sub str first nlen in
+      (* test/././ is the same as test *)
+      if nlen = 1 && nstr = "." then
+        accu
+      (* a/b/../ is the same as a *)
+      else if nlen = 2 && nstr = ".." then
+        match accu with
+          | []      -> [ nstr ]
+          | ".."::_ -> nstr::accu
+          | hd::tl  -> tl
+      else
+        nstr::accu
+
+let is_path_sep = function
+  | '\\' | '/' -> true
+  | _ -> false
+
+
+let uniform_path path_sep = function
+  | "" -> "" (* Raise an exception? Or an possible intermediate result?
+             * Filename.basename and dirname also don't raise exceptions *)
+  | str ->
+      let rec iter accu str len first pos =
+        if pos >= len then
+          List.rev (get_naccu accu str first pos)
+        else
+          let next = succ pos in
+            match is_path_sep str.[pos] with
+              | true -> iter (get_naccu accu str first pos) str len next next
+              | false -> iter accu str len first next
+      in
+        let is_unix_root = is_path_sep str.[0] in
+        let len = String.length str in
+        let next_sep = len > 1 && is_path_sep str.[1] in
+        let is_network_root = is_unix_root && next_sep in
+        let is_currel = str.[0] = '.' && ( next_sep || len = 1 ) in
+        let l = iter [] str len 0 0 in
+        (* Trailing slashes are normally stripped.
+         * This is not possible in case of root folders
+         * Sys.file_exists "C:" is false, Sys.file_exists "C:\\" true
+         *)
+        let l_min =
+          match l with
+            | [] -> [ "" ]
+            | _ -> l
+        in
+        let l =
+          if is_network_root then
+            ""::""::l_min
+          else if is_unix_root then
+            ""::l_min
+          else if is_currel then
+            "."::l
+          else
+            match l with
+              | s :: [] ->
+                  (* root folders like C:\ *)
+                  if String.length s = 2 && s.[1] = ':' &&
+                    len > 2 && is_path_sep str.[2]
+                  then
+                    s :: [ "" ]
+                  else
+                    l
+              | _ -> l
+        in
+          String.concat path_sep l
+
+
 
 let make =
   function
@@ -40,22 +152,31 @@
   match Sys.os_type with
   | "Unix" | "Cygwin" -> ufn
   | "Win32" ->
-    make
-      (List.map
-         (fun p ->
-            if p = Unix.current_dir_name then
-              current_dir_name
-            else if p = Unix.parent_dir_name then
-              parent_dir_name
+    let path_sep =
+      if use_bash () then
+        "/"
             else
-              p)
-         (OASISString.nsplit ufn '/'))
+        "\\"
+    in
+    uniform_path path_sep ufn
   | os_type ->
     OASISUtils.failwithf
       (f_ "Don't know the path format of os_type %S when translating unix \
            filename. %S")
       os_type ufn
 
+(* see findlib's src/findlib/frontend.ml for details *)
+let ocamlfind_unquote dir =
+  match Sys.os_type with
+  | "Cygwin"
+  | "Win32" ->
+    let len = String.length dir in
+    if len < 3 || dir.[0] <> '"' || dir.[len - 1] <> '"' ||
+       String.contains dir ' ' = false then
+      dir
+    else
+      String.sub dir 1 (len - 2)
+  | _ -> dir
 
 (* END EXPORT *)
 
--- ./src/oasis/OASISHostPath.mli
+++ ./src/oasis/OASISHostPath.mli
@@ -29,6 +29,27 @@
 open OASISTypes
 
 
+(**
+    The function should return an unix like shell,
+    that will be used to execute external commands.
+
+    The default function returns an empty string.
+    (system default will be used)
+*)
+val bash_cmd : (unit -> host_filename) ref
+
+(** True, if bash_cmd_program will return a non-empty
+    host_filename *)
+val use_bash: unit -> bool
+
+
+(**
+   On windows, the Unix quote function
+   will be used, if use_base () is true.
+   Otherwise identic to Filename.quote
+*)
+val quote: string -> string
+
 (** Create a filename out of its components.
 *)
 val make: host_filename list -> host_filename
@@ -57,5 +78,9 @@
 val add_extension: host_filename -> string -> host_filename
 
 
+(** Unquote functions for filenames from 'ocamlfind query ...' *)
+val ocamlfind_unquote: string -> string
+
+
 (** Map for host filename. {b Not exported.} *)
 module Map: OASISUtils.MapExt.S with type key = host_filename
--- ./src/oasis/OASISString.ml
+++ ./src/oasis/OASISString.ml
@@ -175,18 +175,34 @@
   else
     s
 
-(* END EXPORT *)
+let exists f str =
+  let rec iter i =
+    if i < 0 then
+      false
+    else if f str.[i] then
+      true
+    else
+      iter (pred i)
+  in
+    iter (String.length str - 1)
 
-(*  TODO: replace lowercase_ascii, capitalize_ascii and uncapitalize_ascii
-    functions by String.*_ascii function when OCaml minimal version will be
-    4.03.0.
- *)
+let is_digit c =
+  '0' <= c && c <= '9'
+
+let is_alpha c =
+  ('a' <= c && c <= 'z') || ('A' <= c && c <= 'Z')
 
 let is_whitespace =
   function
     | ' ' | '\r' | '\n' | '\t' -> true
     |  _  -> false
 
+(* END EXPORT *)
+
+(*  TODO: replace lowercase_ascii, capitalize_ascii and uncapitalize_ascii
+    functions by String.*_ascii function when OCaml minimal version will be
+    4.03.0.
+ *)
 
 let tokenize ?(is_whitespace=is_whitespace) ?(tokens=[]) str =
   let lst = ref [] in
--- ./src/oasis/OASISValues.ml
+++ ./src/oasis/OASISValues.ml
@@ -492,6 +492,38 @@
            space_separated.print (cmd :: args))
     }
 
+let command_line_warn =
+  let c = command_line in
+  let is_unix_centric_operator = function
+    | "&&" | ";" | "||" -> true
+    | _ -> false
+  in
+
+  let parse = ( fun ~ctxt s ->
+                let (cmd,args) as cmd_args = c.parse ~ctxt s in
+                  if String.length cmd > 0 && cmd.[0] <> '$' then
+                    begin
+                      OASISMessage.warning
+                        ~ctxt
+                        "External commands may differ from platform to platform (%s)"
+                        cmd
+                    end;
+                  if List.exists is_unix_centric_operator args then
+                    begin
+                      OASISMessage.warning
+                        ~ctxt
+                        "Command line '%s' seems to be *nix specific"
+                        (String.concat "" (cmd::args))
+                    end;
+                  cmd_args )
+  in
+    {
+      parse ;
+      update = c.update;
+      print = c.print;
+    }
+
+
 
 let command_line_options =
   { parse = (fun ~ctxt:_ s -> POSIXShell.split s);
--- ./src/oasis/OASISValues.mli
+++ ./src/oasis/OASISValues.mli
@@ -183,6 +183,9 @@
 val command_line: (string * string list) t
 
 
+(** As above, but emmit warnings by dubious constructs *)
+val command_line_warn : (string * string list) t
+
 (** Arguments of command line programs.  See {!OASISUtils.POSIX.split}
     for more information. *)
 val command_line_options: string list t
--- ./src/oasis/OASISVersion.ml
+++ ./src/oasis/OASISVersion.ml
@@ -38,8 +38,8 @@
 
 
 (* Range of allowed characters *)
-let is_digit c = '0' <= c && c <= '9'
-let is_alpha c = ('a' <= c && c <= 'z') || ('A' <= c && c <= 'Z')
+let is_digit = OASISString.is_digit
+let is_alpha = OASISString.is_alpha
 let is_special = function | '.' | '+' | '-' | '~' -> true | _ -> false
 
 
--- ./src/plugins/custom/CustomPlugin.ml
+++ ./src/plugins/custom/CustomPlugin.ml
@@ -200,7 +200,7 @@
       schema
       id
       nm
-      command_line
+      command_line_warn
       (* TODO: remove when fun () -> s_ be replaced *)
       (fun () -> s_ hlp)
       data (fun _ t -> t.cmd_main)
@@ -211,7 +211,7 @@
       id
       (nm^"Clean")
       ~default:None
-      (opt command_line)
+      (opt command_line_warn)
       (* TODO: remove when fun () -> s_ be replaced *)
       (fun () -> s_ hlp_clean)
       data (fun _ t -> t.cmd_clean)
@@ -222,7 +222,7 @@
       id
       (nm^"Distclean")
       ~default:None
-      (opt command_line)
+      (opt command_line_warn)
       (* TODO: remove when fun () -> s_ be replaced *)
       (fun () -> s_ hlp_distclean)
       data (fun _ t -> t.cmd_distclean)
@@ -426,7 +426,7 @@
       id
       "Clean"
       ~default:None
-      (opt command_line)
+      (opt command_line_warn)
       (fun () ->
          s_ "Run command to clean test step.")
       test_data (fun _ t -> t.cmd_clean)
@@ -437,7 +437,7 @@
       id
       "Distclean"
       ~default:None
-      (opt command_line)
+      (opt command_line_warn)
       (fun () ->
          s_ "Run command to distclean test step.")
       test_data (fun _ t -> t.cmd_distclean)
--- ./src/plugins/extra/devfiles/DevFilesPlugin.ml
+++ ./src/plugins/extra/devfiles/DevFilesPlugin.ml
@@ -201,7 +201,7 @@
           Printf.bprintf buff
             "setup.exe: setup.ml%s\n\
              \tocamlfind ocamlopt -o $@%s setup.ml || ocamlfind ocamlc -o $@%s setup.ml || true\n\
-             \t$(RM) setup.cmi setup.cmo setup.cmx setup.o\n\n"
+             \t$(RM) setup.cmi setup.cmo setup.cmx setup.o setup.obj\n\n"
             makefile_setup_deps packages packages;
         end;
         Buffer.add_string buff (".PHONY: "^(String.concat " " targets)^"\n");
@@ -226,7 +226,7 @@
             Printf.sprintf
               "if [ ! -e setup.exe ] || [ _oasis -nt setup.exe ] || [ setup.ml -nt setup.exe ] || [ configure -nt setup.exe ]; then\n  \
                ocamlfind ocamlopt -o setup.exe%s setup.ml || ocamlfind ocamlc -o setup.exe%s setup.ml || exit 1\n  \
-               rm -f setup.cmi setup.cmo setup.cmx setup.o\n\
+               rm -f setup.cmi setup.cmo setup.cmx setup.o setup.obj\n\
                fi\n\
                ./setup.exe -configure \"$@\""
               packages packages
--- ./src/plugins/internal/InternalInstallPlugin.ml
+++ ./src/plugins/internal/InternalInstallPlugin.ml
@@ -47,12 +47,21 @@
 let install_findlib_ev = "install-findlib"
 
 
-(* TODO: this can be more generic and used elsewhere. *)
-let win32_max_command_line_length = 8000
-
-
 let split_install_command ocamlfind findlib_name meta files =
-  if Sys.os_type = "Win32" then
+  if Sys.os_type <> "Win32" then
+    ["install" :: findlib_name :: meta :: files]
+  else
+    let f s =
+      OASISHostPath.quote ( OASISHostPath.of_unix s )
+    in
+    let files = List.map f files in
+    let meta = f meta  in
+    let win32_max_command_line_length =
+      if OASISHostPath.use_bash () = false then
+        7900
+      else
+        30000
+    in
     (* Arguments for the first command: *)
     let first_args = ["install"; findlib_name; meta] in
     (* Arguments for remaining commands: *)
@@ -110,10 +119,11 @@
                   let cmds = split other_args others in
                   cmd :: cmds
     in
+    if files = [] then
+      [ first_args ]
+    else
     (* The first command does not use -add: *)
     split first_args files
-  else
-    ["install" :: findlib_name :: meta :: files]
 
 
 let install =
--- ./src/plugins/ocamlbuild/MyOCamlbuildFindlib.ml
+++ ./src/plugins/ocamlbuild/MyOCamlbuildFindlib.ml
@@ -93,7 +93,9 @@
   with Not_found -> s
 
 (* ocamlfind command *)
-let ocamlfind x = S[Sh (exec_from_conf "ocamlfind"); x]
+let ocamlfind x = S[Sh (
+  Ocamlbuild_pack.Shell.quote_filename_if_needed
+    (exec_from_conf "ocamlfind") ); x]
 
 (* This lists all supported packages. *)
 let find_packages () =
--- ./src/plugins/ocamlbuild/OCamlbuildCommon.ml
+++ ./src/plugins/ocamlbuild/OCamlbuildCommon.ml
@@ -250,7 +250,7 @@
     end else begin
       let extra_args =
         match t.plugin_tags with
-        | Some tags -> "-plugin-tags" :: ("'" ^ tags ^ "'") :: t.extra_args
+        | Some tags -> "-plugin-tags" :: ("\"" ^ tags ^ "\"") :: t.extra_args
         | None -> t.extra_args
       in
       extra_args, ctxt
--- ./src/plugins/omake/OMakeEquip.ml
+++ ./src/plugins/omake/OMakeEquip.ml
@@ -192,6 +192,15 @@
   subst [] ' ' 0
 
 
+let file_exists_case fln =
+  if Sys.file_exists fln = false then
+    false
+  else
+    let dir = Filename.dirname fln in
+    let base = Filename.basename fln in
+    let files = Array.to_list (Sys.readdir dir) in
+    List.mem base files
+
 let fixup_module_case dir name =
   let name_cap = OASISUnixPath.capitalize_file name in
   let name_uncap = OASISUnixPath.uncapitalize_file name in
@@ -200,7 +209,7 @@
       List.find
         (fun (name,ext) ->
            let file = OASISUnixPath.concat dir (name ^ ext) in
-           Sys.file_exists
+           file_exists_case
              (OASISHostPath.of_unix file)
         )
         [ name_cap, ".ml";
--- ./test/fake-ocamlfind/FakeOCamlfind.ml
+++ ./test/fake-ocamlfind/FakeOCamlfind.ml
@@ -30,4 +30,18 @@
   in
   let args = Sys.argv in
     args.(0) <- real_ocamlfind;
+    if Sys.os_type <> "Win32" then
     Unix.execv real_ocamlfind args
+    else
+      let pid =
+        Unix.create_process
+          args.(0)
+          args
+          Unix.stdin
+          Unix.stdout
+          Unix.stderr
+      in
+      match snd (Unix.waitpid [] pid) with
+      | Unix.WEXITED n -> exit n
+      | Unix.WSIGNALED _ -> exit 2 (* like OCaml's uncaught exceptions *)
+      | Unix.WSTOPPED _ -> exit 1
--- ./test/TestCommon.ml
+++ ./test/TestCommon.ml
@@ -202,6 +202,17 @@
   assert_command ~ctxt ?chdir ?exit_code ?output ?extra_env ?unorder
     (oasis_exec ctxt) ((oasis_args ctxt) @ args)
 
+let file_exists_strict sfs fln =
+  if sfs#file_exists fln = false then
+    false
+  else if Sys.os_type <> "Win32" then
+    true
+  else
+    let fln_s = sfs#string_of_filename fln in
+    let dir = Filename.dirname fln_s in
+    let base = Filename.basename fln_s in
+    let dirs = Array.to_list (Sys.readdir dir) in
+    List.mem base dirs
 
 let file_content fn =
   let chn = open_in_bin fn in
--- ./test/TestFullUtils.ml
+++ ./test/TestFullUtils.ml
@@ -191,9 +191,14 @@
 
 
 (* Create tree structure for a test project and copy it there. *)
-let setup_test_directories test_ctxt ~is_native ~native_dynlink dn =
+let setup_test_directories ?tmpdir_prefix test_ctxt ~is_native ~native_dynlink dn =
   (* Create a temporary directory. *)
-  let tmpdir = bracket_tmpdir test_ctxt in
+  let prefix =
+    match tmpdir_prefix with
+      | None -> "ounit-"
+      | Some x -> x
+  in
+  let tmpdir = bracket_tmpdir ~prefix test_ctxt in
 
   (* Copy sources in this temporary directory. *)
   let src_dir =
@@ -254,7 +259,8 @@
 (* Precompile setup.ml to speedup the tests, if possible. *)
 let rec precompile_setup_ml test_ctxt t =
   let setup_exe =
-    Filename.concat t.precompile_dir (Filename.chop_extension setup_ml)
+    exec (Filename.concat t.precompile_dir
+            (Filename.chop_extension setup_ml))
   in
   let full_setup_ml = in_src_dir t setup_ml in
 
@@ -278,16 +284,17 @@
     let timer = timer_start "precompile_setup_ml" in
     let exit_code =
       FileUtil.cp ~force:FileUtil.Force [full_setup_ml] t.precompile_dir;
-      Sys.command ("ocamlfind ocamlc -o "^setup_exe^" "
-                   ^(Filename.concat t.precompile_dir setup_ml))
+      let f1 = Filename.quote setup_exe in
+      let f2 = Filename.quote (Filename.concat t.precompile_dir setup_ml) in
+        Sys.command ("ocamlfind ocamlc -o "^f1^" "^f2)
     in
     timer_stop test_ctxt timer;
     if exit_code = 0 then begin
       (* Compilation succeed, update the digest *)
-      logf test_ctxt `Info "Compilation of setup.ml succeeds.";
+      logf test_ctxt `Info "Compilation of setup.ml (%S) succeeds." setup_exe;
       `Done_for (Digest.file full_setup_ml)
     end else begin
-      logf test_ctxt `Warning "Compilation of setup.ml doesn't succeed.";
+      logf test_ctxt `Warning "Compilation of setup.ml (%S) doesn't succeed." setup_exe;
       `Not_possible
     end
   in
@@ -306,7 +313,7 @@
 
       | `Done_for digest ->
           if (Digest.file full_setup_ml) = digest then begin
-            Some (exec setup_exe)
+            Some setup_exe
           end else begin
             t.setup_ml_precompiled <- compile ();
             precompile_setup_ml test_ctxt t
@@ -525,6 +532,10 @@
   | InstalledBin of filename list
 
 
+
+let system =
+  (BaseOCamlcConfig.var_define "system") ()
+
 (* Register a set of files expected to be built. *)
 let register_installed_files test_ctxt t installed_files_lst =
   let rec file_list =
@@ -592,7 +603,12 @@
                acc
            | "a" ->
                let fn =
-                 if is_win32 then FilePath.replace_extension fn "lib" else fn
+                 if not is_win32 then
+                   fn
+                 else
+                   match system with
+                     | "mingw" | "mingw64" -> fn
+                     | _ -> FilePath.replace_extension fn "lib"
                in
                  if (* library matching the .cmxa *)
                    t.is_native ||
@@ -604,7 +620,7 @@
                    (* no .a matching bytecode only library. *)
                    acc
            | "so" when is_win32 ->
-               (FilePath.replace_extension fn ".dll") :: acc
+               (FilePath.replace_extension fn "dll") :: acc
            | "html" when 
                FilePath.basename fn = "index_extensions.html" 
                && OASISVersion.StringVersion.compare t.ocaml_version "4.02" < 0 ->
--- ./test/TestOASISLibrary.ml
+++ ./test/TestOASISLibrary.ml
@@ -44,7 +44,7 @@
                   ~ctxt
                   (cs, bs, lib)
                   (fun fn ->
-                     sfs#file_exists (OASISFileSystem.of_unix_filename fn))
+                     file_exists_strict sfs (OASISFileSystem.of_unix_filename fn))
               in
               (List.flatten (List.rev_map snd lst)) @ acc
             | Object _ | Executable _ | Flag _ | SrcRepo _ | Test _ | Doc _ ->
--- ./test/TestOASISObject.ml
+++ ./test/TestOASISObject.ml
@@ -44,7 +44,7 @@
                   ~ctxt
                   (cs, bs, obj)
                   (fun fn ->
-                     sfs#file_exists (OASISFileSystem.of_unix_filename fn))
+                     file_exists_strict sfs (OASISFileSystem.of_unix_filename fn))
               in
               (List.flatten (List.rev_map snd lst)) @ acc
             | Library _ | Executable _ | Flag _ | SrcRepo _ | Test _ | Doc _ ->
--- ./test/TestPluginOCamlbuild.ml
+++ ./test/TestPluginOCamlbuild.ml
@@ -27,6 +27,26 @@
 open OASISFileTemplate
 open TestFullUtils
 
+let fln_normalize =
+  if Sys.os_type <> "Win32" then
+    fun a -> a
+  else
+    fun str ->
+      let str =
+        let str_lower = OASISString.lowercase_ascii str in
+        if Filename.check_suffix str_lower ".exe" then
+          Filename.chop_extension str ^ ".exe"
+        else
+          str
+      in
+      let len = String.length str in
+      let b = Buffer.create len in
+      for i = 0 to len - 1 do
+        match String.get str i with
+        | '/' -> Buffer.add_char b '\\'
+        | c -> Buffer.add_char b c
+      done;
+      Buffer.contents b
 
 let all_tests =
   [
@@ -52,10 +72,12 @@
        let env = BaseEnvLight.load ~filename:(in_src_dir t "setup.data") () in
        let () =
          assert_equal ~printer:(Printf.sprintf "%S")
-           fake_ocamlfind
-           (BaseEnvLight.var_get "ocamlfind" env);
+           (fln_normalize fake_ocamlfind)
+           (fln_normalize (BaseEnvLight.var_get "ocamlfind" env));
          run_ocaml_setup_ml ~extra_env test_ctxt t ["-build"]
        in
+       (* ocamlbuild is called with -no-log on win32 *)
+       skip_if (Sys.os_type = "Win32") "UNIX test";
        let build_log =
          file_content (in_src_dir t (Filename.concat "_build" "_log"))
        in
@@ -63,11 +85,15 @@
          List.iter
            (fun line ->
               if OASISString.contains ~what:"ocamlfind" line then
+                let what =
+                  Ocamlbuild_pack.Shell.quote_filename_if_needed
+                    fake_ocamlfind
+                in
                 assert_bool
                   (Printf.sprintf
                      "line %S should starts with %S"
                      line fake_ocamlfind)
-                  (OASISString.starts_with ~what:fake_ocamlfind line))
+                  (OASISString.starts_with ~what line))
            (OASISString.nsplit build_log '\n'));
 
     "use-ocamlfind",
--- ./test/TestPluginOMake.ml
+++ ./test/TestPluginOMake.ml
@@ -65,7 +65,7 @@
        register_generated_files t
          (oasis_omake_files
             ["src"; "src/liba"; "src/libb"; "src/libc_"; "src/libwithc";
-             "src/exec"; "src/packedlib"]);
+             "src/exec" ; "src/packedlib"]);
        register_generated_files t
          ["src/liba/META"; "src/libb/META"; "src/libc_/META";
           "src/libwithc/META"; "src/packedlib/META"];
