--- ./src/topkg_fpath.ml
+++ ./src/topkg_fpath.ml
@@ -15,7 +15,8 @@
   (String.length s > 0 && s.[String.length s - 1] = '/')
 
 let append =
-  fun p q -> match p with
+  fun p q ->
+    let res = match p with
   | "" -> q
   | p ->
       match q with
@@ -24,6 +25,12 @@
           if dir_sep_prefix q then q else
           if dir_sep_suffix p then (p ^ q) else
           (p ^ Filename.dir_sep ^ q)
+    in
+    match Sys.os_type with
+    | "Win32" when res <> "" && res.[0] <> '\\' ->
+      String.map (function | '\\' -> '/' | x -> x) res
+    | _ -> res
+
 
 let ( // ) = append
 
--- ./src/topkg_os.ml
+++ ./src/topkg_os.ml
@@ -50,9 +50,15 @@
     in
     let keep p = not (skip p) in
     let process acc file = f file acc in
+    (* workaround for ocamlbuild bug *)
+    let sl a = match Sys.os_type with
+    | "Win32" -> String.map (function | '\\' -> '/' | x -> x) a
+    | _ -> a
+    in
+    let filename_concat a b = sl (Filename.concat a b) in
     let rec aux f acc = function
     | (d :: ds) :: up ->
-        let paths = List.rev_map (Filename.concat d) (readdir d) in
+        let paths = List.rev_map (filename_concat d) (readdir d) in
         let paths = List.find_all keep paths in
         let dirs, files = List.partition is_dir paths in
         let acc = List.fold_left process acc files in
@@ -185,11 +191,13 @@
   let line ?stdout ?stderr cmd =
     let strf = Printf.sprintf in
     if Topkg_cmd.is_empty cmd then failwith err_empty_line else
-    let cmd = List.rev_map Filename.quote (Topkg_cmd.to_rev_list cmd) in
+    let qu = Filename.quote in
+    let cmd = List.rev_map qu (Topkg_cmd.to_rev_list cmd) in
     let cmd = String.concat " " cmd in
-    let stdout = match stdout with None -> "" | Some f -> strf " 1>%s" f in
-    let stderr = match stderr with None -> "" | Some f -> strf " 2>%s" f in
-    strf "%s%s%s" cmd stdout stderr
+    let stdout = match stdout with None -> "" | Some f -> strf " 1>%s" (qu f) in
+    let stderr = match stderr with None -> "" | Some f -> strf " 2>%s" (qu f) in
+    let q = if Sys.os_type = "Win32" then "\"" else "" in
+    strf "%s%s%s%s%s" q cmd stdout stderr q
 
   let exec ?stdout ?stderr cmd =
     try
