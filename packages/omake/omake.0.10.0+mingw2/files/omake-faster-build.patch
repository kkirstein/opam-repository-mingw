--- ./build.ml
+++ ./build.ml
@@ -18,6 +18,9 @@
 module StrMap = Map.Make(String)
 module StrSet = Set.Make(String)
 
+let make_prog = ref None
+let j_flags = ref None
+
 let ocaml vars =
   try StrMap.find "OCAML" vars
   with Not_found -> "ocaml"
@@ -195,6 +198,8 @@
   let cmd = ocamlopt vars in
   Sys.command cmd = 0
 
+let is_msvc = ref None
+
 let configure_bootstrap vars =
   safe_mkdir "boot";
   copy "src/Makefile" "boot/Makefile";
@@ -202,11 +207,14 @@
   match get_system vars with
     | "mingw"
     | "mingw64" ->
+        is_msvc := Some false;
         copy "mk/osconfig_mingw.mk" "boot/osconfig.mk"
     | "win32"
     | "win64" ->
+        is_msvc := Some true;
         copy "mk/osconfig_msvc.mk" "boot/osconfig.mk"
     | _ ->
+        is_msvc := Some false;
         copy "mk/osconfig_unix.mk" "boot/osconfig.mk"
 
 let make self makedir vars target =
@@ -216,10 +224,29 @@
       (fun n v acc -> (n ^ "=" ^ v) :: acc)
       vars
       [] in
+  let args = "-C" :: makedir :: target :: args in
+  let is_msvc = match !is_msvc with
+  | Some x -> x
+  | None ->
+    match get_system vars with
+    | "win32" | "win64" -> true
+    | _ -> false
+  in
+  if !make_prog = None || is_msvc then
   let args_a =
     Array.of_list
-      (Filename.concat dir "make.ml" :: "-C" :: makedir :: target :: args) in
+        (Filename.concat dir "make.ml" :: args) in
   exec_command [] (ocaml vars) args_a
+  else
+    match !make_prog with
+    | None -> assert false
+    | Some make ->
+      let args =
+        match !j_flags with
+        | None -> args
+        | Some x -> "-j"::(string_of_int x)::args
+      in
+      exec_command [] make (Array.of_list args)
 
 let run_bootstrap self vars =
   configure_bootstrap vars;
@@ -250,6 +277,11 @@
       (fun n v acc -> (n ^ "=" ^ v) :: acc)
       vars
       [] in
+  let args1 =
+    match !j_flags with
+    | None -> args1
+    | Some x -> "-j"::(string_of_int x)::args1
+  in
   exec_command env omake (Array.of_list (args @ args1))
 
 let do_action self vars action omake1 omake2 =
@@ -338,6 +370,12 @@
 
       "-clean", Arg.Unit (fun () -> action := `Clean),
       "   action: clean up";
+
+      "-make", Arg.String (fun s -> make_prog := Some s),
+      "   use the following make program instead of make.ml";
+
+      "-j", Arg.Int ( fun i -> j_flags := Some i ),
+      "   pass -j n to make/omake";
     ]
     (fun s ->
        if Str.string_match set_re s 0 then
--- ./mk/osconfig_mingw.mk
+++ ./mk/osconfig_mingw.mk
@@ -3,8 +3,8 @@
 #
 LN = cp
 RM = rm -f
-DOT =
-slash = \\
+DOT = ./
+slash = /
 
 win32 = win32
 system = system
@@ -21,9 +21,9 @@
 #
 # C configuration
 #
-CC := $(shell sh -c "$(OCAMLC) -config | awk '/^bytecomp_c_compiler/ {print $$2}'")
+CC := $(shell $(OCAMLC) -config | awk '/^bytecomp_c_compiler/ {print $$2}')
 CFLAGS = -I"$(STDLIB)" -I"$(STDLIB)/caml" 
-AR := $(shell sh -c "$(OCAMLC) -config | awk '/^ranlib:/ {print $$2}' | sed 's|ranlib|ar|'") cq
+AR := $(shell $(OCAMLC) -config | awk '/^ranlib:/ {print $$2}' | sed 's|ranlib|ar|') cq
 AROUT =
 EXT_OBJ = .o
 EXT_LIB = .a
--- ./src/env/OMakefile
+++ ./src/env/OMakefile
@@ -57,7 +57,7 @@
 MAKEFILE_TEXT += $"""
 GENPARSE = $(GENPARSE)
 omake_ast_parse.mly: $$(GENPARSE)$$(EXE) omake_ast_parse.input
-	$$(DOT)$$(GENPARSE) -o $$@ omake_ast_parse.input
+	$$(DOT)$$(GENPARSE)$$(EXE) -o $$@ omake_ast_parse.input
 
 omake_ast_lex.ml: omake_ast_lex.mll
 omake_ast_lex.cmo: omake_ast_lex.cmi
--- ./src/magic/OMakefile
+++ ./src/magic/OMakefile
@@ -91,7 +91,7 @@
     --omo-files $(basename $(OMO_MAGIC_FILES))
 
 omake_magic.ml: omake_gen_magic$$(EXE) $$(GENMAGIC_DEPS)
-	$$(DOT)omake_gen_magic -o $$@ --version version.txt --var "omake_cc=$$(CC)" --var "omake_cflags=$$(CFLAGS)"  --var "omake_ccomptype=$$(CCOMPTYPE)" --magic $$(MAGIC_FILES)
+	$$(DOT)omake_gen_magic$$(EXE) -o $$@ --version version.txt --var "omake_cc=$$(CC)" --var "omake_cflags=$$(CFLAGS)"  --var "omake_ccomptype=$$(CCOMPTYPE)" --magic $$(MAGIC_FILES)
 """
 
 MakeDontLink(omake_magic.ml)
